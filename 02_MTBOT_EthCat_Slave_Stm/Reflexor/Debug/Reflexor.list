
Reflexor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014258  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027a0  08014438  08014438  00024438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bd8  08016bd8  00038088  2**0
                  CONTENTS
  4 .ARM          00000008  08016bd8  08016bd8  00026bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016be0  08016be0  00038088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016be0  08016be0  00026be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016be4  08016be4  00026be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b84  20000000  08016be8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d00  20000b88  0801776c  00030b88  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007888  0801776c  00037888  2**0
                  ALLOC
 11 .spiDma_module_space 00000200  20007e88  0801776c  00037e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  00038088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003868e  00000000  00000000  000380b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e57  00000000  00000000  00070746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ad8  00000000  00000000  000785a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027b8  00000000  00000000  0007b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d58d  00000000  00000000  0007d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d28d  00000000  00000000  0008adbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011db5d  00000000  00000000  000c804a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e5ba7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bc60  00000000  00000000  001e5bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000b88 	.word	0x20000b88
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014420 	.word	0x08014420

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000b8c 	.word	0x20000b8c
 800021c:	08014420 	.word	0x08014420

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <App_Md80_ScanDevice>:
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/
static void App_Md80_UpdateResp (tAppMd80_Data * const app);

static void App_Md80_ScanDevice (tAppMd80_Data * const app)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b098      	sub	sp, #96	; 0x60
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
   uint32_t addr = 1u;
 80005cc:	2301      	movs	r3, #1
 80005ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   uint8_t iter = 0u;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
   uint8_t data[2u] = {0u};
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   uint8_t timeout = APP_MD80_TIME_MS_SCAN;
 80005dc:	2305      	movs	r3, #5
 80005de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   uint8_t dataResp[64u] = {0};
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	223c      	movs	r2, #60	; 0x3c
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f012 fe0d 	bl	801320e <memset>
   uint8_t dataSize = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	74fb      	strb	r3, [r7, #19]
   uint16_t md80Addr[APP_MD80_TOTAL_DEV_SUPPORT] = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
   uint8_t md80num = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

   /* Prepare the frame used to scan. */
   data[0] = MD80_FRAME_GET_INFO;
 8000608:	2305      	movs	r3, #5
 800060a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
   data[1] = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

   /* Start scan md80 on bus. */
   for (addr = APP_MD80_START_ADDR; addr <= APP_MD80_END_ADDR; addr++)
 8000614:	230a      	movs	r3, #10
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000618:	e030      	b.n	800067c <App_Md80_ScanDevice+0xb8>
   {
      if (true == canIdle_SendToAddr(addr, data, 2u))
 800061a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800061e:	2202      	movs	r2, #2
 8000620:	4619      	mov	r1, r3
 8000622:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000624:	f001 f91e 	bl	8001864 <canIdle_SendToAddr>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d023      	beq.n	8000676 <App_Md80_ScanDevice+0xb2>
      {
         while (timeout--)
 800062e:	e018      	b.n	8000662 <App_Md80_ScanDevice+0x9e>
         {
            if (true == canIdle_ReadAddr((uint32_t *)&md80Addr[md80num], (uint8_t *)dataResp, (uint8_t *)&dataSize))
 8000630:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000634:	f107 0208 	add.w	r2, r7, #8
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	f107 0213 	add.w	r2, r7, #19
 8000640:	f107 0114 	add.w	r1, r7, #20
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f97b 	bl	8001940 <canIdle_ReadAddr>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d005      	beq.n	800065c <App_Md80_ScanDevice+0x98>
            {
               md80num++;
 8000650:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000654:	3301      	adds	r3, #1
 8000656:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
               break;
 800065a:	e009      	b.n	8000670 <App_Md80_ScanDevice+0xac>
            }

            osDelay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f00f fe51 	bl	8010304 <osDelay>
         while (timeout--)
 8000662:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	f887 205b 	strb.w	r2, [r7, #91]	; 0x5b
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1df      	bne.n	8000630 <App_Md80_ScanDevice+0x6c>
         }

         timeout = APP_MD80_TIME_MS_SCAN;
 8000670:	2305      	movs	r3, #5
 8000672:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   for (addr = APP_MD80_START_ADDR; addr <= APP_MD80_END_ADDR; addr++)
 8000676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000678:	3301      	adds	r3, #1
 800067a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800067c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800067e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000682:	d9ca      	bls.n	800061a <App_Md80_ScanDevice+0x56>
      }
   }

   /* Data return. */
   if (md80num > 0)
 8000684:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000688:	2b00      	cmp	r3, #0
 800068a:	d016      	beq.n	80006ba <App_Md80_ScanDevice+0xf6>
   {
      memcpy (app->rsp.data, md80Addr, md80num * 2u);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8000692:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000696:	005a      	lsls	r2, r3, #1
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4619      	mov	r1, r3
 800069e:	f012 fda8 	bl	80131f2 <memcpy>
      
      /* Size of data return. */
      app->rsp.size = md80num * 2u;
 80006a2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

      /* Update number of md80 detected on can bus. */
      app->numMd80Det = md80num;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 80006b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   }
}
 80006ba:	bf00      	nop
 80006bc:	3760      	adds	r7, #96	; 0x60
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <App_Md80_Begin>:


static void App_Md80_Begin (tAppMd80_Data * const app)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
   if (app->workState == APP_MD80_STOP)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7f1b      	ldrb	r3, [r3, #28]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <App_Md80_Begin+0x16>
   {
      app->workState = APP_MD80_RUN;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	771a      	strb	r2, [r3, #28]
   }
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <App_Md80_End>:

static void App_Md80_End (tAppMd80_Data * const app)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
   if (app->workState == APP_MD80_RUN)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7f1b      	ldrb	r3, [r3, #28]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d102      	bne.n	80006fa <App_Md80_End+0x16>
   {
      app->workState = APP_MD80_STOP;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	771a      	strb	r2, [r3, #28]
   }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <App_Md80_GenericFrame>:

static void App_Md80_GenericFrame (tAppMd80_Data * const app)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
   uint8_t cmd;
   uint8_t md80Id;
   tMd80_Device * pMd80dev = NULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
   uint8_t md80En = 0u;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   uint8_t md80Mode = MD80_IDLE;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   float currentLimit = 0.0f;
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
   uint16_t torqueBandwidth = 0u;
 8000726:	2300      	movs	r3, #0
 8000728:	837b      	strh	r3, [r7, #26]
   float kp = 0.0f;
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
   float ki = 0.0f;
 8000730:	f04f 0300 	mov.w	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
   float kd = 0.0f;
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
   float iWindup = 0.0f;
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]

   /* Get command. */
   cmd = app->cmd.data[0];
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000748:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

   /* Get md80 id. */
   md80Id = app->cmd.motorId;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7f9b      	ldrb	r3, [r3, #30]
 8000750:	f887 3020 	strb.w	r3, [r7, #32]

   /* Get the data structure of md80. */
   pMd80dev = (tMd80_Device *)app->pMd80[md80Id];
 8000754:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	3314      	adds	r3, #20
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	627b      	str	r3, [r7, #36]	; 0x24

   /* Base on command. */
   switch (cmd)
 8000764:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000768:	2b12      	cmp	r3, #18
 800076a:	f200 80bc 	bhi.w	80008e6 <App_Md80_GenericFrame+0x1de>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <App_Md80_GenericFrame+0x6c>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	080007c9 	.word	0x080007c9
 8000778:	080007d1 	.word	0x080007d1
 800077c:	080007f3 	.word	0x080007f3
 8000780:	080007c1 	.word	0x080007c1
 8000784:	0800080b 	.word	0x0800080b
 8000788:	080008e7 	.word	0x080008e7
 800078c:	08000823 	.word	0x08000823
 8000790:	080008e7 	.word	0x080008e7
 8000794:	080008e7 	.word	0x080008e7
 8000798:	080008e7 	.word	0x080008e7
 800079c:	080008e7 	.word	0x080008e7
 80007a0:	080008e7 	.word	0x080008e7
 80007a4:	080008e7 	.word	0x080008e7
 80007a8:	080008e7 	.word	0x080008e7
 80007ac:	080008e7 	.word	0x080008e7
 80007b0:	080008e7 	.word	0x080008e7
 80007b4:	0800082f 	.word	0x0800082f
 80007b8:	08000877 	.word	0x08000877
 80007bc:	080008bf 	.word	0x080008bf
   {
   case MD80_FRAME_ZERO_ENCODER:
      md80_SetEncoderZero (pMd80dev);
 80007c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007c2:	f003 f80b 	bl	80037dc <md80_SetEncoderZero>
      break;
 80007c6:	e08f      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>
   
   case MD80_FRAME_FLASH_LED:
      md80_ConfigBlink (pMd80dev);
 80007c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007ca:	f002 ffe6 	bl	800379a <md80_ConfigBlink>
      break;
 80007ce:	e08b      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>

   case MD80_FRAME_MOTOR_ENABLE:
      md80En = app->cmd.data[1];
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80007d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      md80_ControlMd80Enable (pMd80dev, md80En);
 80007da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007ec:	f003 f8d4 	bl	8003998 <md80_ControlMd80Enable>
      break;
 80007f0:	e07a      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>
   
   case MD80_FRAME_CONTROL_SELECT:
      md80Mode = app->cmd.data[1];
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80007f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      md80_ControlMd80Mode (pMd80dev, md80Mode);
 80007fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000800:	4619      	mov	r1, r3
 8000802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000804:	f003 f89e 	bl	8003944 <md80_ControlMd80Mode>
      break;
 8000808:	e06e      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>
   
   case MD80_FRAME_BASE_CONFIG:
      memcpy((void*)&currentLimit, (void *)&app->cmd.data[1], sizeof(float));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3322      	adds	r3, #34	; 0x22
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	61fb      	str	r3, [r7, #28]
      md80_SetCurrentLimit(pMd80dev, currentLimit);
 8000812:	edd7 7a07 	vldr	s15, [r7, #28]
 8000816:	eeb0 0a67 	vmov.f32	s0, s15
 800081a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800081c:	f003 f846 	bl	80038ac <md80_SetCurrentLimit>
      break;
 8000820:	e062      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>
   
   case MD80_FRAME_SET_BANDWIDTH:
      memcpy ((void *)&torqueBandwidth, (void *)&app->cmd.data[1], sizeof(torqueBandwidth));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3322      	adds	r3, #34	; 0x22
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	837b      	strh	r3, [r7, #26]
      /** FIXME: Add the function of MD80 to update bandwidth.*/
      break;
 800082c:	e05c      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>

   case MD80_FRAME_POS_CONTROL:
      memcpy ((void *)&kp, (void *)&app->cmd.data[1], sizeof(kp));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3322      	adds	r3, #34	; 0x22
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	617b      	str	r3, [r7, #20]
      memcpy ((void *)&ki, (void *)&app->cmd.data[5], sizeof(ki));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3326      	adds	r3, #38	; 0x26
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	613b      	str	r3, [r7, #16]
      memcpy ((void *)&kd, (void *)&app->cmd.data[9], sizeof(kd));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	332a      	adds	r3, #42	; 0x2a
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	60fb      	str	r3, [r7, #12]
      memcpy ((void *)&iWindup, (void *)&app->cmd.data[13], sizeof(iWindup));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	332e      	adds	r3, #46	; 0x2e
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	60bb      	str	r3, [r7, #8]

      /* Update parameters for control position. */
      md80_SetPositionControllerParams (pMd80dev, kp, ki, kd, iWindup);
 800084e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000852:	ed97 7a04 	vldr	s14, [r7, #16]
 8000856:	edd7 6a03 	vldr	s13, [r7, #12]
 800085a:	ed97 6a02 	vldr	s12, [r7, #8]
 800085e:	eef0 1a46 	vmov.f32	s3, s12
 8000862:	eeb0 1a66 	vmov.f32	s2, s13
 8000866:	eef0 0a47 	vmov.f32	s1, s14
 800086a:	eeb0 0a67 	vmov.f32	s0, s15
 800086e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000870:	f003 f8df 	bl	8003a32 <md80_SetPositionControllerParams>
      break;
 8000874:	e038      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>

   case MD80_FRAME_VEL_CONTROL:
      memcpy ((void *)&kp, (void *)&app->cmd.data[1], sizeof(kp));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3322      	adds	r3, #34	; 0x22
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	617b      	str	r3, [r7, #20]
      memcpy ((void *)&ki, (void *)&app->cmd.data[5], sizeof(ki));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3326      	adds	r3, #38	; 0x26
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	613b      	str	r3, [r7, #16]
      memcpy ((void *)&kd, (void *)&app->cmd.data[9], sizeof(kd));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	332a      	adds	r3, #42	; 0x2a
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
      memcpy ((void *)&iWindup, (void *)&app->cmd.data[13], sizeof(iWindup));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	332e      	adds	r3, #46	; 0x2e
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60bb      	str	r3, [r7, #8]

      /* Update parameters for control Velocity mode. */
      md80_SetVelocityControllerParams (pMd80dev, kp, ki, kd, iWindup);
 8000896:	edd7 7a05 	vldr	s15, [r7, #20]
 800089a:	ed97 7a04 	vldr	s14, [r7, #16]
 800089e:	edd7 6a03 	vldr	s13, [r7, #12]
 80008a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80008a6:	eef0 1a46 	vmov.f32	s3, s12
 80008aa:	eeb0 1a66 	vmov.f32	s2, s13
 80008ae:	eef0 0a47 	vmov.f32	s1, s14
 80008b2:	eeb0 0a67 	vmov.f32	s0, s15
 80008b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008b8:	f003 f8dd 	bl	8003a76 <md80_SetVelocityControllerParams>
      break;
 80008bc:	e014      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>
      
   case MD80_FRAME_IMP_CONTROL:
      memcpy ((void *)&kp, (void *)&app->cmd.data[1], sizeof(kp));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3322      	adds	r3, #34	; 0x22
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	617b      	str	r3, [r7, #20]
      memcpy ((void *)&kd, (void *)&app->cmd.data[5], sizeof(kd));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3326      	adds	r3, #38	; 0x26
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]

      /* Update parameter for control Impedance mode. */
      md80_SetImpedanceControllerParams(pMd80dev, kp, kd);
 80008ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80008d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80008d6:	eef0 0a47 	vmov.f32	s1, s14
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008e0:	f003 f8eb 	bl	8003aba <md80_SetImpedanceControllerParams>
      break;
 80008e4:	e000      	b.n	80008e8 <App_Md80_GenericFrame+0x1e0>

   default:
      break;
 80008e6:	bf00      	nop
   }
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <App_Md80_AddMd80>:

static void App_Md80_AddMd80 (tAppMd80_Data * const app)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
   uint16_t canAddr = 0u;
 80008f8:	2300      	movs	r3, #0
 80008fa:	81bb      	strh	r3, [r7, #12]
   uint8_t iter = 0u;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]

   if (app->cmd.size > 2u)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d943      	bls.n	8000992 <App_Md80_AddMd80+0xa2>
   {
      /* Get the data configuration of motor. */
      canAddr = (((uint16_t)app->cmd.data[0] << 8u)&0xFF00U) | (((uint16_t)app->cmd.data[1])&0x00FFU);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000910:	b29b      	uxth	r3, r3
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800091c:	b29b      	uxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	81bb      	strh	r3, [r7, #12]

      for (iter = 0u; iter < APP_MD80_TOTAL_DEV_SUPPORT; iter ++)
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e031      	b.n	800098c <App_Md80_AddMd80+0x9c>
      {
         if (false == app->pMd80[iter]->config.isMd80Detected)
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	3314      	adds	r3, #20
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d021      	beq.n	8000986 <App_Md80_AddMd80+0x96>
         {
            /* Initialize md80. */
            md80_Init ((tMd80_Device *)app->pMd80[iter]);
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	3314      	adds	r3, #20
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fedf 	bl	8003712 <md80_Init>

            /* Update the id. */
            app->pMd80[iter]->config.canId = iter;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	3314      	adds	r3, #20
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	7bfa      	ldrb	r2, [r7, #15]
 8000962:	701a      	strb	r2, [r3, #0]
            
            /* Update the can address TX and RX for motor. */
            canIdle_SetAddrTxRxDev (iter, canAddr, canAddr);
 8000964:	89ba      	ldrh	r2, [r7, #12]
 8000966:	89b9      	ldrh	r1, [r7, #12]
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 ff16 	bl	800179c <canIdle_SetAddrTxRxDev>

            /* Enable motor. */
            app->pMd80[iter]->config.isMd80Detected = true;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	3314      	adds	r3, #20
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2201      	movs	r2, #1
 800097e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            break;
 8000982:	bf00      	nop
         }
      }
   }
}
 8000984:	e005      	b.n	8000992 <App_Md80_AddMd80+0xa2>
      for (iter = 0u; iter < APP_MD80_TOTAL_DEV_SUPPORT; iter ++)
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	3301      	adds	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9ca      	bls.n	8000928 <App_Md80_AddMd80+0x38>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <App_Md80_UpdateDataControl>:
{
   /* FIXME: Update the code for this function.*/
}

static void App_Md80_UpdateDataControl(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
   /* MD80_DEV_0. */
   if (true == pAppMd80->pMd80[0]->local.isEnabled)
 80009a2:	4bb1      	ldr	r3, [pc, #708]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009a8:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 80a7 	beq.w	8000b00 <App_Md80_UpdateDataControl+0x164>
   {
      /* Update the data control for md80. */
      pAppMd80->pMd80[0]->input.velocity = MD80_ETH_TO_REAL(Obj.md80_0_DataControl.Velocity);
 80009b2:	4bae      	ldr	r3, [pc, #696]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 80009b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009be:	4baa      	ldr	r3, [pc, #680]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c4:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 80009c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009cc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
      pAppMd80->pMd80[0]->input.position = MD80_ETH_TO_REAL(Obj.md80_0_DataControl.Position);
 80009d0:	4ba6      	ldr	r3, [pc, #664]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 80009d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009dc:	4ba2      	ldr	r3, [pc, #648]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009e2:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 80009e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ea:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
      pAppMd80->pMd80[0]->input.torque = MD80_ETH_TO_REAL(Obj.md80_0_DataControl.Torque);
 80009ee:	4b9f      	ldr	r3, [pc, #636]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 80009f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009fa:	4b9b      	ldr	r3, [pc, #620]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a00:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a08:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

      md80_SetTorque((tMd80_Device *)&pAppMd80->pMd80[0], pAppMd80->pMd80[0]->input.torque);
 8000a0c:	4b96      	ldr	r3, [pc, #600]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000a14:	4b94      	ldr	r3, [pc, #592]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a22:	4610      	mov	r0, r2
 8000a24:	f003 f87f 	bl	8003b26 <md80_SetTorque>
      md80_SetTargetVelocity((tMd80_Device *)&pAppMd80->pMd80[0], pAppMd80->pMd80[0]->input.velocity);
 8000a28:	4b8f      	ldr	r3, [pc, #572]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000a30:	4b8d      	ldr	r3, [pc, #564]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a36:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a3e:	4610      	mov	r0, r2
 8000a40:	f003 f862 	bl	8003b08 <md80_SetTargetVelocity>
      md80_SetTargetPosition((tMd80_Device *)&pAppMd80->pMd80[0], pAppMd80->pMd80[0]->input.position);
 8000a44:	4b88      	ldr	r3, [pc, #544]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8000a4c:	4b86      	ldr	r3, [pc, #536]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a52:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000a56:	eeb0 0a67 	vmov.f32	s0, s15
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	f003 f845 	bl	8003aea <md80_SetTargetPosition>

      Obj.md80_0_DataReturn.enabled = true;
 8000a60:	4b82      	ldr	r3, [pc, #520]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	739a      	strb	r2, [r3, #14]
      Obj.md80_0_DataReturn.Mode = pAppMd80->pMd80[0]->local.mode;
 8000a66:	4b80      	ldr	r3, [pc, #512]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a6c:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 8000a70:	4b7e      	ldr	r3, [pc, #504]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000a72:	711a      	strb	r2, [r3, #4]
      Obj.md80_0_DataReturn.Position = MD80_REAL_TO_ETH(pAppMd80->pMd80[0]->output.position);
 8000a74:	4b7c      	ldr	r3, [pc, #496]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a7a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000a7e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8a:	ee17 3a90 	vmov	r3, s15
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b76      	ldr	r3, [pc, #472]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000a92:	80da      	strh	r2, [r3, #6]
      Obj.md80_0_DataReturn.Temperature = MD80_REAL_TO_ETH(pAppMd80->pMd80[0]->output.temperature);
 8000a94:	4b74      	ldr	r3, [pc, #464]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a9a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ab6:	793b      	ldrb	r3, [r7, #4]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b6c      	ldr	r3, [pc, #432]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000abc:	731a      	strb	r2, [r3, #12]
      Obj.md80_0_DataReturn.Torque = MD80_REAL_TO_ETH(pAppMd80->pMd80[0]->output.torque);
 8000abe:	4b6a      	ldr	r3, [pc, #424]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000ac8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad4:	ee17 3a90 	vmov	r3, s15
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b64      	ldr	r3, [pc, #400]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000adc:	815a      	strh	r2, [r3, #10]
      Obj.md80_0_DataReturn.Velocity = MD80_REAL_TO_ETH(pAppMd80->pMd80[0]->output.velocity);
 8000ade:	4b62      	ldr	r3, [pc, #392]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000ae8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af4:	ee17 3a90 	vmov	r3, s15
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b5c      	ldr	r3, [pc, #368]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000afc:	811a      	strh	r2, [r3, #8]
 8000afe:	e002      	b.n	8000b06 <App_Md80_UpdateDataControl+0x16a>
   }
   else
   {
      Obj.md80_0_DataReturn.enabled = false;
 8000b00:	4b5a      	ldr	r3, [pc, #360]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	739a      	strb	r2, [r3, #14]
   }

   /* MD80_DEV_1. */
   if (true == pAppMd80->pMd80[1]->local.isEnabled)
 8000b06:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0c:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 80af 	beq.w	8000c74 <App_Md80_UpdateDataControl+0x2d8>
   {
      /* Update the data control for md80. */
      pAppMd80->pMd80[1]->input.velocity = MD80_ETH_TO_REAL(Obj.md80_1_DataControl.Velocity);
 8000b16:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b22:	4b51      	ldr	r3, [pc, #324]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b28:	eddf 6a51 	vldr	s13, [pc, #324]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000b2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b30:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
      pAppMd80->pMd80[1]->input.position = MD80_ETH_TO_REAL(Obj.md80_1_DataControl.Position);
 8000b34:	4b4d      	ldr	r3, [pc, #308]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000b36:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000b38:	ee07 3a90 	vmov	s15, r3
 8000b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b40:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b4e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
      pAppMd80->pMd80[1]->input.torque = MD80_ETH_TO_REAL(Obj.md80_1_DataControl.Torque);
 8000b52:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b60:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	eddf 6a42 	vldr	s13, [pc, #264]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

      md80_SetTorque((tMd80_Device *)&pAppMd80->pMd80[1], pAppMd80->pMd80[1]->input.torque);
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b80:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000b84:	eeb0 0a67 	vmov.f32	s0, s15
 8000b88:	4610      	mov	r0, r2
 8000b8a:	f002 ffcc 	bl	8003b26 <md80_SetTorque>
      md80_SetTargetVelocity((tMd80_Device *)&pAppMd80->pMd80[1], pAppMd80->pMd80[1]->input.velocity);
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000b96:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f002 ffaf 	bl	8003b08 <md80_SetTargetVelocity>
      md80_SetTargetPosition((tMd80_Device *)&pAppMd80->pMd80[1], pAppMd80->pMd80[1]->input.position);
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f002 ff92 	bl	8003aea <md80_SetTargetPosition>

      Obj.md80_1_DataReturn.enabled = true;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	769a      	strb	r2, [r3, #26]
      Obj.md80_1_DataReturn.Mode = pAppMd80->pMd80[1]->local.mode;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000bd8:	741a      	strb	r2, [r3, #16]
      Obj.md80_1_DataReturn.Position = MD80_REAL_TO_ETH(pAppMd80->pMd80[1]->output.position);
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000be4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf0:	ee17 3a90 	vmov	r3, s15
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000bf8:	825a      	strh	r2, [r3, #18]
      Obj.md80_1_DataReturn.Temperature = MD80_REAL_TO_ETH(pAppMd80->pMd80[1]->output.temperature);
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000c04:	ee07 3a90 	vmov	s15, r3
 8000c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c18:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c1c:	793b      	ldrb	r3, [r7, #4]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000c22:	761a      	strb	r2, [r3, #24]
      Obj.md80_1_DataReturn.Torque = MD80_REAL_TO_ETH(pAppMd80->pMd80[1]->output.torque);
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000c2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c3a:	ee17 3a90 	vmov	r3, s15
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000c42:	82da      	strh	r2, [r3, #22]
      Obj.md80_1_DataReturn.Velocity = MD80_REAL_TO_ETH(pAppMd80->pMd80[1]->output.velocity);
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <App_Md80_UpdateDataControl+0x2cc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000c4e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000c70 <App_Md80_UpdateDataControl+0x2d4>
 8000c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <App_Md80_UpdateDataControl+0x2d0>)
 8000c62:	829a      	strh	r2, [r3, #20]
 8000c64:	e009      	b.n	8000c7a <App_Md80_UpdateDataControl+0x2de>
 8000c66:	bf00      	nop
 8000c68:	20000ba4 	.word	0x20000ba4
 8000c6c:	20002044 	.word	0x20002044
 8000c70:	42c80000 	.word	0x42c80000
   }
   else
   {
      Obj.md80_1_DataReturn.enabled = false;
 8000c74:	4bbb      	ldr	r3, [pc, #748]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	769a      	strb	r2, [r3, #26]
   }

   /* MD80_DEV_2. */
   if (true == pAppMd80->pMd80[2]->local.isEnabled)
 8000c7a:	4bbb      	ldr	r3, [pc, #748]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c80:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f000 80ac 	beq.w	8000de2 <App_Md80_UpdateDataControl+0x446>
   {
      /* Update the data control for md80. */
      pAppMd80->pMd80[3]->input.velocity = MD80_ETH_TO_REAL(Obj.md80_2_DataControl.Velocity);
 8000c8a:	4bb6      	ldr	r3, [pc, #728]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c98:	4bb3      	ldr	r3, [pc, #716]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
      pAppMd80->pMd80[3]->input.position = MD80_ETH_TO_REAL(Obj.md80_2_DataControl.Position);
 8000caa:	4bae      	ldr	r3, [pc, #696]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cb8:	4bab      	ldr	r3, [pc, #684]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	eddf 6aab 	vldr	s13, [pc, #684]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
      pAppMd80->pMd80[3]->input.torque = MD80_ETH_TO_REAL(Obj.md80_2_DataControl.Torque);
 8000cca:	4ba6      	ldr	r3, [pc, #664]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000ccc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000cd0:	ee07 3a90 	vmov	s15, r3
 8000cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd8:	4ba3      	ldr	r3, [pc, #652]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

      md80_SetTorque((tMd80_Device *)&pAppMd80->pMd80[2], pAppMd80->pMd80[2]->input.torque);
 8000cea:	4b9f      	ldr	r3, [pc, #636]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8000cf2:	4b9d      	ldr	r3, [pc, #628]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000d00:	4610      	mov	r0, r2
 8000d02:	f002 ff10 	bl	8003b26 <md80_SetTorque>
      md80_SetTargetVelocity((tMd80_Device *)&pAppMd80->pMd80[2], pAppMd80->pMd80[2]->input.velocity);
 8000d06:	4b98      	ldr	r3, [pc, #608]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8000d0e:	4b96      	ldr	r3, [pc, #600]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d14:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000d18:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	f002 fef3 	bl	8003b08 <md80_SetTargetVelocity>
      md80_SetTargetPosition((tMd80_Device *)&pAppMd80->pMd80[2], pAppMd80->pMd80[2]->input.position);
 8000d22:	4b91      	ldr	r3, [pc, #580]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8000d2a:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d30:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000d34:	eeb0 0a67 	vmov.f32	s0, s15
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f002 fed6 	bl	8003aea <md80_SetTargetPosition>

      Obj.md80_2_DataReturn.enabled = true;
 8000d3e:	4b89      	ldr	r3, [pc, #548]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      Obj.md80_2_DataReturn.Mode = pAppMd80->pMd80[2]->local.mode;
 8000d46:	4b88      	ldr	r3, [pc, #544]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d4c:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 8000d50:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000d52:	771a      	strb	r2, [r3, #28]
      Obj.md80_2_DataReturn.Position = MD80_REAL_TO_ETH(pAppMd80->pMd80[2]->output.position);
 8000d54:	4b84      	ldr	r3, [pc, #528]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000d5e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d6a:	ee17 3a90 	vmov	r3, s15
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000d72:	83da      	strh	r2, [r3, #30]
      Obj.md80_2_DataReturn.Temperature = MD80_REAL_TO_ETH(pAppMd80->pMd80[2]->output.temperature);
 8000d74:	4b7c      	ldr	r3, [pc, #496]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d7a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d92:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d96:	793b      	ldrb	r3, [r7, #4]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      Obj.md80_2_DataReturn.Torque = MD80_REAL_TO_ETH(pAppMd80->pMd80[2]->output.torque);
 8000da0:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000daa:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db6:	ee17 3a90 	vmov	r3, s15
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000dbe:	845a      	strh	r2, [r3, #34]	; 0x22
      Obj.md80_2_DataReturn.Velocity = MD80_REAL_TO_ETH(pAppMd80->pMd80[2]->output.velocity);
 8000dc0:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000dca:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd6:	ee17 3a90 	vmov	r3, s15
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000dde:	841a      	strh	r2, [r3, #32]
 8000de0:	e003      	b.n	8000dea <App_Md80_UpdateDataControl+0x44e>
   }
   else
   {
      Obj.md80_2_DataReturn.enabled = false;
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   }
   
   /* MD80_DEV_0. */
   if (true == pAppMd80->pMd80[3]->local.isEnabled)
 8000dea:	4b5f      	ldr	r3, [pc, #380]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df0:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 80ad 	beq.w	8000f54 <App_Md80_UpdateDataControl+0x5b8>
   {
      /* Update the data control for md80. */
      pAppMd80->pMd80[3]->input.velocity = MD80_ETH_TO_REAL(Obj.md80_3_DataControl.Velocity);
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000dfc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e08:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e16:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
      pAppMd80->pMd80[3]->input.position = MD80_ETH_TO_REAL(Obj.md80_3_DataControl.Position);
 8000e1a:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000e1c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e28:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
      pAppMd80->pMd80[3]->input.torque = MD80_ETH_TO_REAL(Obj.md80_3_DataControl.Torque);
 8000e3a:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e56:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

      md80_SetTorque((tMd80_Device *)&pAppMd80->pMd80[3], pAppMd80->pMd80[3]->input.torque);
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8000e62:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e68:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e70:	4610      	mov	r0, r2
 8000e72:	f002 fe58 	bl	8003b26 <md80_SetTorque>
      md80_SetTargetVelocity((tMd80_Device *)&pAppMd80->pMd80[3], pAppMd80->pMd80[3]->input.velocity);
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e84:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000e88:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	f002 fe3b 	bl	8003b08 <md80_SetTargetVelocity>
      md80_SetTargetPosition((tMd80_Device *)&pAppMd80->pMd80[3], pAppMd80->pMd80[3]->input.position);
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f002 fe1e 	bl	8003aea <md80_SetTargetPosition>

      Obj.md80_3_DataReturn.enabled = true;
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
      Obj.md80_3_DataReturn.Mode = pAppMd80->pMd80[3]->local.mode;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebc:	f893 21ed 	ldrb.w	r2, [r3, #493]	; 0x1ed
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      Obj.md80_3_DataReturn.Position = MD80_REAL_TO_ETH(pAppMd80->pMd80[3]->output.position);
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ecc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000ed0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000edc:	ee17 3a90 	vmov	r3, s15
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
      Obj.md80_3_DataReturn.Temperature = MD80_REAL_TO_ETH(pAppMd80->pMd80[3]->output.temperature);
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f04:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f08:	793b      	ldrb	r3, [r7, #4]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      Obj.md80_3_DataReturn.Torque = MD80_REAL_TO_ETH(pAppMd80->pMd80[3]->output.torque);
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f18:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000f1c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f28:	ee17 3a90 	vmov	r3, s15
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000f30:	85da      	strh	r2, [r3, #46]	; 0x2e
      Obj.md80_3_DataReturn.Velocity = MD80_REAL_TO_ETH(pAppMd80->pMd80[3]->output.velocity);
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <App_Md80_UpdateDataControl+0x5cc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000f3c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f6c <App_Md80_UpdateDataControl+0x5d0>
 8000f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f48:	ee17 3a90 	vmov	r3, s15
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000f50:	859a      	strh	r2, [r3, #44]	; 0x2c
   else
   {
      Obj.md80_3_DataReturn.enabled = false;
   }

}
 8000f52:	e003      	b.n	8000f5c <App_Md80_UpdateDataControl+0x5c0>
      Obj.md80_3_DataReturn.enabled = false;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <App_Md80_UpdateDataControl+0x5c8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20002044 	.word	0x20002044
 8000f68:	20000ba4 	.word	0x20000ba4
 8000f6c:	42c80000 	.word	0x42c80000

08000f70 <App_Md80_EventHandle>:

static void App_Md80_EventHandle (tAppMd80_Data * const app)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
   /** Determine if there has new command. */
   if (true == app->isNewCommand)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7f5b      	ldrb	r3, [r3, #29]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d009      	beq.n	8000f94 <App_Md80_EventHandle+0x24>
   {
      /* Allow change to Command state when this app is in Idle and Control states. */
      if (app->state == APP_MD80_IDLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7edb      	ldrb	r3, [r3, #27]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <App_Md80_EventHandle+0x24>
      {
         /* Update next state to Command. */
         app->state = APP_MD80_COMMAND_ENTER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	76da      	strb	r2, [r3, #27]

         /* Clear the flag.*/
         app->isNewCommand = false;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	775a      	strb	r2, [r3, #29]
   }
   else 
   {
      /* Keep is in Control state. */
   }
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <App_Md80_Command_Enter>:

static void App_Md80_Command_Enter (tAppMd80_Data * const app)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
   tAppMd80_States nextState = APP_MD80_COMMAND_ENTER;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]

   /* Copy data to local. */
   memcpy ((void *)&app->cmd, (void *)&app->hostReq, sizeof(tAppMd80_Msg));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	331e      	adds	r3, #30
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	221b      	movs	r2, #27
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f012 f91c 	bl	80131f2 <memcpy>

   /* Go to next state. */
   nextState = APP_MD80_COMMAND;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	73fb      	strb	r3, [r7, #15]

   /* Update next state. */
   app->state = nextState;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	76da      	strb	r2, [r3, #27]
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <App_Md80_Command>:

static void App_Md80_Command (tAppMd80_Data * const app)
{   
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
   tAppMd80_States nextState = APP_MD80_COMMAND;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	73fb      	strb	r3, [r7, #15]

   switch (app->cmd.frId)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7fdb      	ldrb	r3, [r3, #31]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d82b      	bhi.n	8001038 <App_Md80_Command+0x6c>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <App_Md80_Command+0x1c>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001039 	.word	0x08001039
 8000fec:	08001011 	.word	0x08001011
 8000ff0:	08001039 	.word	0x08001039
 8000ff4:	08001019 	.word	0x08001019
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	08001039 	.word	0x08001039
 8001000:	08001029 	.word	0x08001029
 8001004:	08001031 	.word	0x08001031
 8001008:	08001039 	.word	0x08001039
 800100c:	08001039 	.word	0x08001039
      /* code */
      break;

   case BUS_FRAME_PING_START:
      /* Scan device on bus can. */
      App_Md80_ScanDevice(app);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fad7 	bl	80005c4 <App_Md80_ScanDevice>
      break;
 8001016:	e010      	b.n	800103a <App_Md80_Command+0x6e>

   case BUS_FRAME_MD80_ADD:
      /* Add md80 with id. */
      App_Md80_AddMd80(app);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fc69 	bl	80008f0 <App_Md80_AddMd80>
      break;
 800101e:	e00c      	b.n	800103a <App_Md80_Command+0x6e>

   case BUS_FRAME_MD80_GENERIC_FRAME:
      /* Send data configuration. */
      App_Md80_GenericFrame (app);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fb71 	bl	8000708 <App_Md80_GenericFrame>
      break;
 8001026:	e008      	b.n	800103a <App_Md80_Command+0x6e>

   case BUS_FRAME_BEGIN:
      App_Md80_Begin(app);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fb4a 	bl	80006c2 <App_Md80_Begin>
      break;
 800102e:	e004      	b.n	800103a <App_Md80_Command+0x6e>
   
   case BUS_FRAME_END:
      App_Md80_End(app);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fb57 	bl	80006e4 <App_Md80_End>
      break;
 8001036:	e000      	b.n	800103a <App_Md80_Command+0x6e>
   case BUS_FRAME_RESET:
      /* FIXME: Update the function for this bus frame. */
      break;
   
   default:
      break;
 8001038:	bf00      	nop
   }

   /* Go to next state after finished handling the command. */
   nextState = APP_MD80_COMMAND_EXIT;
 800103a:	2303      	movs	r3, #3
 800103c:	73fb      	strb	r3, [r7, #15]

   /* Update state. */
   app->state = nextState;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	76da      	strb	r2, [r3, #27]
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <App_Md80_Command_Exit>:

static void App_Md80_Command_Exit (tAppMd80_Data * const app)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
   tAppMd80_States nextState = APP_MD80_COMMAND_EXIT;
 8001054:	2303      	movs	r3, #3
 8001056:	73fb      	strb	r3, [r7, #15]

   /* Enter critical section. */
   taskENTER_CRITICAL();
 8001058:	f011 fc5c 	bl	8012914 <vPortEnterCritical>

   /* Update the frame id and motor id. */
   app->rsp.frId = app->cmd.frId;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7fda      	ldrb	r2, [r3, #31]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   app->rsp.motorId = app->cmd.motorId;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7f9a      	ldrb	r2, [r3, #30]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

   /* Call function interrupt when it */
   App_Md80_UpdateResp(app);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f82b 	bl	80010cc <App_Md80_UpdateResp>

   /* Exit critical section. */
   taskEXIT_CRITICAL();
 8001076:	f011 fc7d 	bl	8012974 <vPortExitCritical>

   /* Go back to Idle state. */
   nextState = APP_MD80_IDLE;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
   
   /* Update state. */
   app->state = nextState;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	76da      	strb	r2, [r3, #27]
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <App_Md80_Control>:

static void App_Md80_Control (tAppMd80_Data * const app)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
   uint8_t iter = 0u;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

   for (iter = 0u; iter < app->numMd80Det; iter++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e00b      	b.n	80010b6 <App_Md80_Control+0x2a>
   {
      md80_MainFunction ((tMd80_Device *)app->pMd80[iter]);
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	3314      	adds	r3, #20
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fc9e 	bl	80039ec <md80_MainFunction>
   for (iter = 0u; iter < app->numMd80Det; iter++)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3ed      	bcc.n	800109e <App_Md80_Control+0x12>
   }
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <App_Md80_UpdateResp>:

static void App_Md80_UpdateResp (tAppMd80_Data * const app)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
   uint8_t iter = 0u;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
   uint8_t md80Id = 0u;
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]
   if (app->rsp.frId == BUS_FRAME_PING_START)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d128      	bne.n	8001138 <App_Md80_UpdateResp+0x6c>
   {
      /* Copy list address of md80. */
      if (app->numMd80Det > 0u)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8085 	beq.w	80011fc <App_Md80_UpdateResp+0x130>
      {
         for (iter = 0u; iter < app->numMd80Det; iter++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e018      	b.n	800112a <App_Md80_UpdateResp+0x5e>
         {
            Obj.md80_addrs[iter] = (uint32_t)app->rsp.data[iter*2u] + ((uint32_t)app->rsp.data[(iter*2u) + 1u] << 8);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001104:	4619      	mov	r1, r3
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3301      	adds	r3, #1
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	4413      	add	r3, r2
 8001110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001114:	021a      	lsls	r2, r3, #8
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	440a      	add	r2, r1
 800111a:	493a      	ldr	r1, [pc, #232]	; (8001204 <App_Md80_UpdateResp+0x138>)
 800111c:	3314      	adds	r3, #20
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	605a      	str	r2, [r3, #4]
         for (iter = 0u; iter < app->numMd80Det; iter++)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	3301      	adds	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3e0      	bcc.n	80010f8 <App_Md80_UpdateResp+0x2c>
      memcpy((void *)&Obj.md80_Respond[3], (void *)&app->rsp.data[0], app->rsp.size);

      /* Exit critical section. */
      taskEXIT_CRITICAL();
   }
}
 8001136:	e061      	b.n	80011fc <App_Md80_UpdateResp+0x130>
      md80Id = app->cmd.motorId;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f9b      	ldrb	r3, [r3, #30]
 800113c:	73bb      	strb	r3, [r7, #14]
      memcpy ((void *)&app->rsp.data[0], (void *)&app->pMd80[md80Id]->output.errorVector, sizeof(uint16_t));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	3314      	adds	r3, #20
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	336a      	adds	r3, #106	; 0x6a
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	8013      	strh	r3, [r2, #0]
      memcpy ((void *)&app->rsp.data[2], (void *)&app->pMd80[md80Id]->output.temperature, sizeof(uint8_t));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	3314      	adds	r3, #20
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	3368      	adds	r3, #104	; 0x68
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	7013      	strb	r3, [r2, #0]
      memcpy ((void *)&app->rsp.data[3], (void *)&app->pMd80[md80Id]->output.position, sizeof(float));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	3314      	adds	r3, #20
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	3354      	adds	r3, #84	; 0x54
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6013      	str	r3, [r2, #0]
      memcpy ((void *)&app->rsp.data[7], (void *)&app->pMd80[md80Id]->output.velocity, sizeof(float));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f103 0243 	add.w	r2, r3, #67	; 0x43
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	3314      	adds	r3, #20
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	3358      	adds	r3, #88	; 0x58
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6013      	str	r3, [r2, #0]
      memcpy ((void *)&app->rsp.data[11], (void *)&app->pMd80[md80Id]->output.torque, sizeof(float));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f103 0247 	add.w	r2, r3, #71	; 0x47
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	3314      	adds	r3, #20
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	335c      	adds	r3, #92	; 0x5c
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6013      	str	r3, [r2, #0]
      app->rsp.size = 14u;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	220e      	movs	r2, #14
 80011bc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
      taskENTER_CRITICAL();
 80011c0:	f011 fba8 	bl	8012914 <vPortEnterCritical>
      Obj.md80_Respond[0] = md80Id;
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <App_Md80_UpdateResp+0x138>)
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
      Obj.md80_Respond[1] = app->rsp.frId;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <App_Md80_UpdateResp+0x138>)
 80011d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Obj.md80_Respond[2] = app->rsp.size;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <App_Md80_UpdateResp+0x138>)
 80011e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      memcpy((void *)&Obj.md80_Respond[3], (void *)&app->rsp.data[0], app->rsp.size);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80011f0:	461a      	mov	r2, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <App_Md80_UpdateResp+0x13c>)
 80011f4:	f011 fffd 	bl	80131f2 <memcpy>
      taskEXIT_CRITICAL();
 80011f8:	f011 fbbc 	bl	8012974 <vPortExitCritical>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20002044 	.word	0x20002044
 8001208:	200020d6 	.word	0x200020d6

0800120c <App_Md80_UpdateCmd>:

void App_Md80_UpdateCmd (uint8_t md80id, uint8_t command, uint8_t size, uint8_t * cmd)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	460b      	mov	r3, r1
 800121a:	71bb      	strb	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	717b      	strb	r3, [r7, #5]
   bool isMd80IdExist = false;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

   /* TODO: Determine whether id exist in list. */
   isMd80IdExist = true;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]

   if (true == isMd80IdExist)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d01b      	beq.n	8001266 <App_Md80_UpdateCmd+0x5a>
   {
      /* Enter critical section. */
      taskENTER_CRITICAL();
 800122e:	f011 fb71 	bl	8012914 <vPortEnterCritical>

      /* Save the cmd. */
      pAppMd80->hostReq.motorId = md80id;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <App_Md80_UpdateCmd+0x64>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	701a      	strb	r2, [r3, #0]
      pAppMd80->hostReq.frId = command;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <App_Md80_UpdateCmd+0x64>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	79ba      	ldrb	r2, [r7, #6]
 8001240:	705a      	strb	r2, [r3, #1]
      pAppMd80->hostReq.size = size;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <App_Md80_UpdateCmd+0x64>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	797a      	ldrb	r2, [r7, #5]
 8001248:	709a      	strb	r2, [r3, #2]
      memcpy(pAppMd80->hostReq.data, cmd, size);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <App_Md80_UpdateCmd+0x64>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3303      	adds	r3, #3
 8001250:	797a      	ldrb	r2, [r7, #5]
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f011 ffcc 	bl	80131f2 <memcpy>

      /* Set flag determine it having new command.*/
      pAppMd80->isNewCommand = true;
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <App_Md80_UpdateCmd+0x64>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	775a      	strb	r2, [r3, #29]

      /* Exit critical section. */
      taskEXIT_CRITICAL();
 8001262:	f011 fb87 	bl	8012974 <vPortExitCritical>
   }
   else 
   {
      /* Do nothing. */
   }
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000ba4 	.word	0x20000ba4

08001274 <App_Md80_Init>:

void App_Md80_Init()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
   uint8_t iter = 0u;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]

   /* Create the data structure. */
   pAppMd80 = (tAppMd80_Data *)pvPortMalloc(sizeof(tAppMd80_Data));
 800127e:	2068      	movs	r0, #104	; 0x68
 8001280:	f011 fc6a 	bl	8012b58 <pvPortMalloc>
 8001284:	4603      	mov	r3, r0
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <App_Md80_Init+0x78>)
 8001288:	6013      	str	r3, [r2, #0]

   /* Create the data structure for md80s. */
   tMd80_Device * pMd80_Devs = (tMd80_Device *)pvPortMalloc(sizeof(tMd80_Device) * APP_MD80_TOTAL_DEV_SUPPORT);
 800128a:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
 800128e:	f011 fc63 	bl	8012b58 <pvPortMalloc>
 8001292:	6038      	str	r0, [r7, #0]

   /* Create the data structures for */
   if ((NULL == pAppMd80) || (NULL == pMd80_Devs))
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <App_Md80_Init+0x78>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d022      	beq.n	80012e2 <App_Md80_Init+0x6e>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01f      	beq.n	80012e2 <App_Md80_Init+0x6e>
      /**FIXME - Alert and stop this app. */
   }
   else
   {
      /* Set all the values of data structures md80 to default value. */
      bzero(pMd80_Devs, sizeof(tMd80_Device) * APP_MD80_TOTAL_DEV_SUPPORT);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80012aa:	461a      	mov	r2, r3
 80012ac:	2100      	movs	r1, #0
 80012ae:	f011 ffae 	bl	801320e <memset>

      for (iter = 0u; iter < APP_MD80_TOTAL_DEV_SUPPORT; iter++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e011      	b.n	80012dc <App_Md80_Init+0x68>
      {
         pAppMd80->pMd80[iter] = (tMd80_Device *)&pMd80_Devs[iter];
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	4613      	mov	r3, r2
 80012bc:	015b      	lsls	r3, r3, #5
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <App_Md80_Init+0x78>)
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4402      	add	r2, r0
 80012ce:	3314      	adds	r3, #20
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	605a      	str	r2, [r3, #4]
      for (iter = 0u; iter < APP_MD80_TOTAL_DEV_SUPPORT; iter++)
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	3301      	adds	r3, #1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d9ea      	bls.n	80012b8 <App_Md80_Init+0x44>
      }
   }
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000ba4 	.word	0x20000ba4

080012f0 <App_Md80_MainFunction>:
   vPortFree (pAppMd80->pMd80);
   vPortFree (pAppMd80);
}

void App_Md80_MainFunction()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
   App_Md80_EventHandle (pAppMd80);
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <App_Md80_MainFunction+0x70>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe39 	bl	8000f70 <App_Md80_EventHandle>
   
   /* Run mode. */
   switch (pAppMd80->state)
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <App_Md80_MainFunction+0x70>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	7edb      	ldrb	r3, [r3, #27]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d81d      	bhi.n	8001344 <App_Md80_MainFunction+0x54>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <App_Md80_MainFunction+0x20>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001345 	.word	0x08001345
 8001314:	08001321 	.word	0x08001321
 8001318:	0800132d 	.word	0x0800132d
 800131c:	08001339 	.word	0x08001339
   case APP_MD80_IDLE:
      /* code */
      break;

   case APP_MD80_COMMAND_ENTER:
      App_Md80_Command_Enter(pAppMd80);
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <App_Md80_MainFunction+0x70>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe3b 	bl	8000fa0 <App_Md80_Command_Enter>
      break;
 800132a:	e00c      	b.n	8001346 <App_Md80_MainFunction+0x56>

   case APP_MD80_COMMAND:
      App_Md80_Command(pAppMd80);
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <App_Md80_MainFunction+0x70>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe4b 	bl	8000fcc <App_Md80_Command>
      break;
 8001336:	e006      	b.n	8001346 <App_Md80_MainFunction+0x56>

   case APP_MD80_COMMAND_EXIT:
      App_Md80_Command_Exit(pAppMd80);
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <App_Md80_MainFunction+0x70>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe85 	bl	800104c <App_Md80_Command_Exit>
      break;
 8001342:	e000      	b.n	8001346 <App_Md80_MainFunction+0x56>

   default:
      break;
 8001344:	bf00      	nop
   }

   if (APP_MD80_RUN == pAppMd80->workState)
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <App_Md80_MainFunction+0x70>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d104      	bne.n	800135a <App_Md80_MainFunction+0x6a>
   {
      App_Md80_Control (pAppMd80);
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <App_Md80_MainFunction+0x70>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe99 	bl	800108c <App_Md80_Control>
   }
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000ba4 	.word	0x20000ba4

08001364 <AppMd80_Task>:

void AppMd80_Task (void const *argument)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN md80sTask */
   App_Md80_Init();
 800136c:	f7ff ff82 	bl	8001274 <App_Md80_Init>

   /* Infinite loop */
   for (;;)
   {
      /* Run the main function of this app. */
      App_Md80_MainFunction();
 8001370:	f7ff ffbe 	bl	80012f0 <App_Md80_MainFunction>

      /* Update data control. */
      App_Md80_UpdateDataControl();
 8001374:	f7ff fb12 	bl	800099c <App_Md80_UpdateDataControl>

      /* Delay task. */
      osDelay(APP_MD80_TASK_DELAY);
 8001378:	2001      	movs	r0, #1
 800137a:	f00e ffc3 	bl	8010304 <osDelay>
   {
 800137e:	e7f7      	b.n	8001370 <AppMd80_Task+0xc>

08001380 <canIdle_pollEvent>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

static void canIdle_pollEvent(tCanIdle_Module *const module)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
   can_iso_tp_link_t_p link = NULL;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
   uint32_t currTimeMs = 0u;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
   uint8_t idx = 0u;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

   /* Determine the identify of can device. */
   idx = canIdle_getDeviceId(module->input.id);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f834 	bl	8001408 <canIdle_getDeviceId>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]

   if (CAN_DEV_ID_INVALID != idx)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d010      	beq.n	80013cc <canIdle_pollEvent+0x4c>
   {
      /* Get current time of system. */
      currTimeMs = canIdle_getCurrentTimeInMillis();
 80013aa:	f000 f815 	bl	80013d8 <canIdle_getCurrentTimeInMillis>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Get the link and config of device. */
      link = (can_iso_tp_link_t_p)&canIdle_Devices[idx].local;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	3338      	adds	r3, #56	; 0x38
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <canIdle_pollEvent+0x54>)
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]

      /* Polling event of Can TP. */
      iso_can_tp_poll(link, currTimeMs);
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f001 fcf4 	bl	8002db4 <iso_can_tp_poll>
   }
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000

080013d8 <canIdle_getCurrentTimeInMillis>:

// Function to get the current time in milliseconds
static uint32_t canIdle_getCurrentTimeInMillis(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
   TickType_t ticks = xTaskGetTickCount();
 80013de:	f010 f941 	bl	8011664 <xTaskGetTickCount>
 80013e2:	6078      	str	r0, [r7, #4]

   uint32_t milliseconds = pdMS_TO_TICKS(ticks);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <canIdle_getCurrentTimeInMillis+0x2c>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	603b      	str	r3, [r7, #0]

   return milliseconds;
 80013f8:	683b      	ldr	r3, [r7, #0]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	10624dd3 	.word	0x10624dd3

08001408 <canIdle_getDeviceId>:

static uint8_t canIdle_getDeviceId(tCanIdle_DeviceId id)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
   uint8_t iter = 0u;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
   uint8_t deviceId = CAN_DEV_ID_INVALID;
 8001416:	2306      	movs	r3, #6
 8001418:	73bb      	strb	r3, [r7, #14]

   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e01a      	b.n	8001456 <canIdle_getDeviceId+0x4e>
   {
      if ((id == canIdle_Devices[iter].deviceId) && (CAN_DEV_ID_INVALID != canIdle_Devices[iter].deviceId))
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <canIdle_getDeviceId+0x64>)
 8001424:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	429a      	cmp	r2, r3
 8001434:	d10c      	bne.n	8001450 <canIdle_getDeviceId+0x48>
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <canIdle_getDeviceId+0x64>)
 800143a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b06      	cmp	r3, #6
 8001448:	d002      	beq.n	8001450 <canIdle_getDeviceId+0x48>
      {
         deviceId = iter;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	73bb      	strb	r3, [r7, #14]
         break;
 800144e:	e005      	b.n	800145c <canIdle_getDeviceId+0x54>
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d9e1      	bls.n	8001420 <canIdle_getDeviceId+0x18>
      }
   }

   return (deviceId);
 800145c:	7bbb      	ldrb	r3, [r7, #14]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000

08001470 <canIdle_FDCanSend>:
   /* Currently, the log message debug of this module does not print out. */
   (void *)msg;
}

static int canIdle_FDCanSend(can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
   FDCAN_TxHeaderTypeDef txHeader = {0};
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f011 fec3 	bl	801320e <memset>
   int ret = OP_NOK;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c

   txHeader.Identifier = msg->id.id;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001494:	60bb      	str	r3, [r7, #8]
   txHeader.IdType = (true == msg->id.isExt) ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	065b      	lsls	r3, r3, #25
 800149c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80014a0:	60fb      	str	r3, [r7, #12]
   txHeader.DataLength = (FDCAN_DLC_BYTES_0 | ((uint32_t)CANIDLE_DLC_OFF(msg->dlc)));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	617b      	str	r3, [r7, #20]
   txHeader.FDFormat = (true == msg->id.isCANFD) ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	03db      	lsls	r3, r3, #15
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	623b      	str	r3, [r7, #32]
   txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
   txHeader.TxFrameType = (true == msg->id.isRemote) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	059b      	lsls	r3, r3, #22
 80014c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c4:	613b      	str	r3, [r7, #16]
   txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24

   if (HAL_OK == HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, (uint8_t *)msg->data))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	1d5a      	adds	r2, r3, #5
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4619      	mov	r1, r3
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <canIdle_FDCanSend+0xa4>)
 80014d6:	f009 f9fd 	bl	800a8d4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d114      	bne.n	800150a <canIdle_FDCanSend+0x9a>
   {
      sprintf(canIdle_msg, "can msg with id 0x%x dlc 0x%d: ", msg->id.id, msg->dlc);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80014e8:	461a      	mov	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	490a      	ldr	r1, [pc, #40]	; (8001518 <canIdle_FDCanSend+0xa8>)
 80014f0:	480a      	ldr	r0, [pc, #40]	; (800151c <canIdle_FDCanSend+0xac>)
 80014f2:	f012 fa91 	bl	8013a18 <siprintf>

      if (NULL != link->init_info.print_debug)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <canIdle_FDCanSend+0x96>
      {
         link->init_info.print_debug(canIdle_msg);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <canIdle_FDCanSend+0xac>)
 8001504:	4798      	blx	r3
      }

      ret = OP_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
   }

   return (ret);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800150c:	4618      	mov	r0, r3
 800150e:	3730      	adds	r7, #48	; 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200020fc 	.word	0x200020fc
 8001518:	08014438 	.word	0x08014438
 800151c:	20000ba8 	.word	0x20000ba8

08001520 <canIdle_N_USData_indication>:

static int canIdle_N_USData_indication(can_iso_tp_link_t_p link,
                                       const uint8_t *payload,
                                       uint32_t size,
                                       CAN_ISO_TP_RESAULT error)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	70fb      	strb	r3, [r7, #3]
   int ret = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

   if (N_TIMEOUT_CR == error)
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d103      	bne.n	8001540 <canIdle_N_USData_indication+0x20>
   {
      canIdle_Module.local.state = CANIDLE_IDLE;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <canIdle_N_USData_indication+0x30>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   }

   return ret;
 8001540:	697b      	ldr	r3, [r7, #20]
}
 8001542:	4618      	mov	r0, r3
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000960 	.word	0x20000960

08001554 <canIdle_N_USData_confirm>:

static int canIdle_N_USData_confirm(can_iso_tp_link_t_p link,
                                    const uint8_t *payload,
                                    uint32_t size,
                                    CAN_ISO_TP_RESAULT error)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	70fb      	strb	r3, [r7, #3]
   int ret = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]

   if (N_TIMEOUT_A == error)
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d103      	bne.n	8001574 <canIdle_N_USData_confirm+0x20>
   {
      canIdle_Module.local.state = CANIDLE_IDLE;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <canIdle_N_USData_confirm+0x30>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   }

   return ret;
 8001574:	697b      	ldr	r3, [r7, #20]
}
 8001576:	4618      	mov	r0, r3
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000960 	.word	0x20000960

08001588 <canIdle_WaitingEvent>:

static tCanIdle_State canIdle_WaitingEvent(tCanIdle_Module *const module)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_IDLE;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
   uint8_t idx = CAN_DEV_ID_INVALID;
 8001594:	2306      	movs	r3, #6
 8001596:	73bb      	strb	r3, [r7, #14]

   if (true == module->local.isNewReq)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d020      	beq.n	80015e4 <canIdle_WaitingEvent+0x5c>
   {
      /* Reset flag. */
      module->local.isNewReq = false;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      module->local.isRecMsg = false;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      module->output.isNewResp = false;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

      /* Verify the can id before module jump to next state. */
      idx = canIdle_getDeviceId (module->input.id);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff21 	bl	8001408 <canIdle_getDeviceId>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73bb      	strb	r3, [r7, #14]
      module->local.isFunction = false;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

      if (CAN_DEV_ID_INVALID != idx)
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	2b06      	cmp	r3, #6
 80015d6:	d005      	beq.n	80015e4 <canIdle_WaitingEvent+0x5c>
      {
         module->local.idx = idx;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7bba      	ldrb	r2, [r7, #14]
 80015dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
         /* Change mode to next state. */
         nextState = CANIDLE_PROCESS_ENTRY;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
      }
   }

   return (nextState);
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <canIdle_ProcessEntry>:

static tCanIdle_State canIdle_ProcessEntry (tCanIdle_Module *const module)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_PROCESS_ENTRY;
 80015f8:	2301      	movs	r3, #1
 80015fa:	75fb      	strb	r3, [r7, #23]
   can_iso_tp_link_t_p link = NULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
   uint8_t idx = module->local.idx;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001606:	73fb      	strb	r3, [r7, #15]
   uint8_t isFunctionId = (uint8_t)module->local.isFunction;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800160e:	73bb      	strb	r3, [r7, #14]

   if (CAN_DEV_ID_INVALID != idx)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d018      	beq.n	8001648 <canIdle_ProcessEntry+0x58>
   {
      /* Get the link and config of device. */
      link = (can_iso_tp_link_t_p)&canIdle_Devices[idx].local;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f44f 7216 	mov.w	r2, #600	; 0x258
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	3338      	adds	r3, #56	; 0x38
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <canIdle_ProcessEntry+0x64>)
 8001624:	4413      	add	r3, r2
 8001626:	3304      	adds	r3, #4
 8001628:	613b      	str	r3, [r7, #16]

      /* Send request.*/
      if (OP_OK != iso_can_tp_N_USData_request (link, isFunctionId, (uint8_t *)module->input.dataReq, module->input.size))
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001632:	7bb9      	ldrb	r1, [r7, #14]
 8001634:	6938      	ldr	r0, [r7, #16]
 8001636:	f001 fda3 	bl	8003180 <iso_can_tp_N_USData_request>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <canIdle_ProcessEntry+0x54>
      {
         /* Go back to Idle state when send request data is failed. */
         nextState = CANIDLE_IDLE;
 8001640:	2300      	movs	r3, #0
 8001642:	75fb      	strb	r3, [r7, #23]
      }

      /* Next state. */
      nextState = CANIDLE_PROCESS;
 8001644:	2302      	movs	r3, #2
 8001646:	75fb      	strb	r3, [r7, #23]
   }

   return (nextState);
 8001648:	7dfb      	ldrb	r3, [r7, #23]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000000 	.word	0x20000000

08001658 <canIdle_Process>:

static tCanIdle_State canIdle_Process (tCanIdle_Module *const module)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_PROCESS;
 8001660:	2302      	movs	r3, #2
 8001662:	73fb      	strb	r3, [r7, #15]
   uint8_t idx = module->local.idx;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800166a:	73bb      	strb	r3, [r7, #14]

   if (CAN_DEV_ID_INVALID != idx)
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d00a      	beq.n	8001688 <canIdle_Process+0x30>
   {
      /* FIXME - Consider add the code to manage the state timeout, device can not send data and receive data from
      Device can on bus after command sent. */

      if (true == module->local.isRecMsg)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <canIdle_Process+0x30>
      {
         /* Update new state. */
         nextState = CANIDLE_PROCESS_POST;
 800167c:	2303      	movs	r3, #3
 800167e:	73fb      	strb	r3, [r7, #15]

         /* Reset flag. */
         module->local.isRecMsg = false;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      }
   }

   return (nextState);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <canIdle_ProcessPost>:

static tCanIdle_State canIdle_ProcessPost(tCanIdle_Module *const module)
{
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = CANIDLE_PROCESS_POST;
 80016a0:	2303      	movs	r3, #3
 80016a2:	75fb      	strb	r3, [r7, #23]
   can_iso_tp_link_t_p link = NULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
   uint8_t idx = module->local.idx;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016ae:	73fb      	strb	r3, [r7, #15]

   /* Update data. */
   if (CAN_DEV_ID_INVALID != idx)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d069      	beq.n	800178a <canIdle_ProcessPost+0xf2>
   {
      /* Get the link and config of device. */
      link = (can_iso_tp_link_t_p)&canIdle_Devices[idx].local;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	3338      	adds	r3, #56	; 0x38
 80016c2:	4a35      	ldr	r2, [pc, #212]	; (8001798 <canIdle_ProcessPost+0x100>)
 80016c4:	4413      	add	r3, r2
 80016c6:	3304      	adds	r3, #4
 80016c8:	613b      	str	r3, [r7, #16]

      if (OP_OK == iso_can_tp_L_Data_indication(link, (struct CAN_msg *)&module->local.canResp))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	338c      	adds	r3, #140	; 0x8c
 80016ce:	4619      	mov	r1, r3
 80016d0:	6938      	ldr	r0, [r7, #16]
 80016d2:	f001 fc9b 	bl	800300c <iso_can_tp_L_Data_indication>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d156      	bne.n	800178a <canIdle_ProcessPost+0xf2>
      {
         iso_can_tp_L_Data_confirm(link, (struct CAN_msg *)&module->local.canResp, N_OK);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	338c      	adds	r3, #140	; 0x8c
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	6938      	ldr	r0, [r7, #16]
 80016e6:	f001 fbcf 	bl	8002e88 <iso_can_tp_L_Data_confirm>

         /* Enter critical section. */
         taskENTER_CRITICAL();
 80016ea:	f011 f913 	bl	8012914 <vPortEnterCritical>

         /* Update data output. */
         memcpy((uint8_t *)module->output.dataResp, (uint8_t *)module->local.canResp.data, dlc2len(module->local.canResp.dlc));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f103 0591 	add.w	r5, r3, #145	; 0x91
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001700:	4618      	mov	r0, r3
 8001702:	f000 faa5 	bl	8001c50 <dlc2len>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4629      	mov	r1, r5
 800170c:	4620      	mov	r0, r4
 800170e:	f011 fd70 	bl	80131f2 <memcpy>
         
         module->output.size = dlc2len(module->local.canResp.dlc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fa99 	bl	8001c50 <dlc2len>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
         module->output.id = canIdle_Devices[idx].deviceId;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <canIdle_ProcessPost+0x100>)
 800172c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

         /* Set flag to identify new data updated. */
         module->output.isNewResp = true;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

         /* Exit critical section. */
         taskEXIT_CRITICAL();
 8001746:	f011 f915 	bl	8012974 <vPortExitCritical>

         /* Call back function. */
         if (NULL != module->dev[idx].funIrq)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8001760:	2b00      	cmp	r3, #0
 8001762:	d012      	beq.n	800178a <canIdle_ProcessPost+0xf2>
         {
            module->dev[idx].funIrq(module->local.dataResp, module->output.size);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	f102 0049 	add.w	r0, r2, #73	; 0x49
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	f892 2114 	ldrb.w	r2, [r2, #276]	; 0x114
 8001786:	4611      	mov	r1, r2
 8001788:	4798      	blx	r3
         }
      }
   }

   /* Back to IDLE state. */
   nextState = CANIDLE_IDLE;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]

   return (nextState);
 800178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	20000000 	.word	0x20000000

0800179c <canIdle_SetAddrTxRxDev>:

void canIdle_SetAddrTxRxDev (tCanIdle_DeviceId id, uint16_t addrTx, uint16_t addrRx)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	460b      	mov	r3, r1
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	807b      	strh	r3, [r7, #2]
   uint8_t idx = canIdle_getDeviceId (id);
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fe29 	bl	8001408 <canIdle_getDeviceId>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

   if (CAN_DEV_ID_INVALID != idx)
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d01d      	beq.n	80017fc <canIdle_SetAddrTxRxDev+0x60>
   {
      canIdle_Devices[idx].config.tx_id.id = addrTx;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <canIdle_SetAddrTxRxDev+0x68>)
 80017ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80017ce:	fb00 f303 	mul.w	r3, r0, r3
 80017d2:	4419      	add	r1, r3
 80017d4:	688b      	ldr	r3, [r1, #8]
 80017d6:	f362 031c 	bfi	r3, r2, #0, #29
 80017da:	608b      	str	r3, [r1, #8]
      canIdle_Devices[idx].config.rx_id.id = addrRx;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <canIdle_SetAddrTxRxDev+0x68>)
 80017e6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80017ea:	fb00 f303 	mul.w	r3, r0, r3
 80017ee:	440b      	add	r3, r1
 80017f0:	f103 0108 	add.w	r1, r3, #8
 80017f4:	684b      	ldr	r3, [r1, #4]
 80017f6:	f362 031c 	bfi	r3, r2, #0, #29
 80017fa:	604b      	str	r3, [r1, #4]
   }
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000000 	.word	0x20000000

08001808 <canIdle_Send>:

bool canIdle_Send (tCanIdle_DeviceId id, const uint8_t *payload, uint8_t size)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
   bool ret = false;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

   if (CANIDLE_IDLE == canIdle_Module.local.state)
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <canIdle_Send+0x58>)
 800181e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001822:	2b00      	cmp	r3, #0
 8001824:	d117      	bne.n	8001856 <canIdle_Send+0x4e>
   {
      /* Enter critical section. */
      taskENTER_CRITICAL();
 8001826:	f011 f875 	bl	8012914 <vPortEnterCritical>

      /* Update the Device id send request. */
      canIdle_Module.input.id = id;
 800182a:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <canIdle_Send+0x58>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
      canIdle_Module.input.size = size;
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <canIdle_Send+0x58>)
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

      /* Copy data to locally data of this module. */
      memcpy((void *)canIdle_Module.input.dataReq, (void *)payload, size);
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	461a      	mov	r2, r3
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <canIdle_Send+0x58>)
 8001842:	f011 fcd6 	bl	80131f2 <memcpy>

      /* Exit critical section. */
      taskEXIT_CRITICAL();
 8001846:	f011 f895 	bl	8012974 <vPortExitCritical>

      /* Setting flag which determine the new data update. */
      canIdle_Module.local.isNewReq = true;
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <canIdle_Send+0x58>)
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      ret = true;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
   }

   return (ret);
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000960 	.word	0x20000960

08001864 <canIdle_SendToAddr>:

bool canIdle_SendToAddr (uint32_t addrTx, const uint8_t * payload, uint8_t size)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b098      	sub	sp, #96	; 0x60
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	71fb      	strb	r3, [r7, #7]
   bool ret = false;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

   struct CAN_msg msg = {
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2248      	movs	r2, #72	; 0x48
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f011 fcc4 	bl	801320e <memset>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f362 031c 	bfi	r3, r2, #0, #29
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189a:	75fb      	strb	r3, [r7, #23]
      .id.id = addrTx,
      .id.isCANFD = true,
      .id.isExt = false,
      .id.isRemote = false,
      .dlc = lenToMinDlc(size),
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f9e7 	bl	8001c74 <lenToMinDlc>
 80018a6:	4603      	mov	r3, r0
   struct CAN_msg msg = {
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	763b      	strb	r3, [r7, #24]
   };

   memcpy((uint8_t *)msg.data, (uint8_t *)payload, size);
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	3305      	adds	r3, #5
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f011 fc9b 	bl	80131f2 <memcpy>

   if (OP_OK == canIdle_FDCanSend (NULL, (struct CAN_msg *)&msg))
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fdd4 	bl	8001470 <canIdle_FDCanSend>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <canIdle_SendToAddr+0x70>
   {
      ret = true;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   }

   return (ret);
 80018d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3760      	adds	r7, #96	; 0x60
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <canIdle_Read>:

bool canIdle_Read (tCanIdle_DeviceId * const id, const uint8_t *payload, uint8_t *size)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
   bool ret = false;
 80018ec:	2300      	movs	r3, #0
 80018ee:	75fb      	strb	r3, [r7, #23]
   uint8_t lenDataRet = 0u;
 80018f0:	2300      	movs	r3, #0
 80018f2:	75bb      	strb	r3, [r7, #22]

   if (true == canIdle_Module.output.isNewResp)
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <canIdle_Read+0x58>)
 80018f6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d017      	beq.n	800192e <canIdle_Read+0x4e>
   {
      lenDataRet = canIdle_Module.output.size;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <canIdle_Read+0x58>)
 8001900:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001904:	75bb      	strb	r3, [r7, #22]

      memcpy((uint8_t *)payload, (uint8_t *)canIdle_Module.output.dataResp, lenDataRet);
 8001906:	7dbb      	ldrb	r3, [r7, #22]
 8001908:	461a      	mov	r2, r3
 800190a:	490c      	ldr	r1, [pc, #48]	; (800193c <canIdle_Read+0x5c>)
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f011 fc70 	bl	80131f2 <memcpy>
      
      *size = lenDataRet;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7dba      	ldrb	r2, [r7, #22]
 8001916:	701a      	strb	r2, [r3, #0]

      canIdle_Module.output.isNewResp = false;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <canIdle_Read+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
      
      *id = canIdle_Module.output.id;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <canIdle_Read+0x58>)
 8001922:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	701a      	strb	r2, [r3, #0]

      ret = true;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
   }

   return ret;
 800192e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000960 	.word	0x20000960
 800193c:	20000a34 	.word	0x20000a34

08001940 <canIdle_ReadAddr>:


bool canIdle_ReadAddr (uint32_t * const id, const uint8_t *payload, uint8_t *size)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
   bool ret = false;
 800194c:	2300      	movs	r3, #0
 800194e:	75fb      	strb	r3, [r7, #23]
   uint8_t lenDataRet = 0u;
 8001950:	2300      	movs	r3, #0
 8001952:	75bb      	strb	r3, [r7, #22]

   if (true == canIdle_Module.local.isRecMsg)
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <canIdle_ReadAddr+0x68>)
 8001956:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01e      	beq.n	800199c <canIdle_ReadAddr+0x5c>
   {
      lenDataRet = dlc2len(canIdle_Module.local.canResp.dlc);
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <canIdle_ReadAddr+0x68>)
 8001960:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f973 	bl	8001c50 <dlc2len>
 800196a:	4603      	mov	r3, r0
 800196c:	75bb      	strb	r3, [r7, #22]

      memcpy((uint8_t *)payload, (uint8_t *)canIdle_Module.local.canResp.data, lenDataRet);
 800196e:	7dbb      	ldrb	r3, [r7, #22]
 8001970:	461a      	mov	r2, r3
 8001972:	490e      	ldr	r1, [pc, #56]	; (80019ac <canIdle_ReadAddr+0x6c>)
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f011 fc3c 	bl	80131f2 <memcpy>

      canIdle_Module.local.isRecMsg = false;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <canIdle_ReadAddr+0x68>)
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

      *id = canIdle_Module.local.canResp.id.id;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <canIdle_ReadAddr+0x68>)
 8001984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001988:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	601a      	str	r2, [r3, #0]
      *size = lenDataRet;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7dba      	ldrb	r2, [r7, #22]
 8001996:	701a      	strb	r2, [r3, #0]

      ret = true;
 8001998:	2301      	movs	r3, #1
 800199a:	75fb      	strb	r3, [r7, #23]
   }

   return ret;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000960 	.word	0x20000960
 80019ac:	200009f1 	.word	0x200009f1

080019b0 <canIdle_Init>:

   return (ret);
}

void canIdle_Init (tCanIdle_Module *const module)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
   uint8_t iter = 0u;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]

   /* Enable the CAN TP layer. */
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e05e      	b.n	8001a80 <canIdle_Init+0xd0>
   {
      if (false != canIdle_Module.dev[iter].isActive)
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <canIdle_Init+0x104>)
 80019c4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	f44f 7116 	mov.w	r1, #600	; 0x258
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d037      	beq.n	8001a4a <canIdle_Init+0x9a>
      {
         canIdle_Module.dev[iter].config.L_Data_request = canIdle_FDCanSend;
 80019da:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <canIdle_Init+0x104>)
 80019dc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <canIdle_Init+0x108>)
 80019ee:	615a      	str	r2, [r3, #20]
         canIdle_Module.dev[iter].config.N_USData_indication = (void *)canIdle_N_USData_indication;
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <canIdle_Init+0x104>)
 80019f2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <canIdle_Init+0x10c>)
 8001a04:	619a      	str	r2, [r3, #24]
         canIdle_Module.dev[iter].config.N_USData_confirm = (void *)canIdle_N_USData_confirm;
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <canIdle_Init+0x104>)
 8001a08:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <canIdle_Init+0x110>)
 8001a1a:	61da      	str	r2, [r3, #28]
         canIdle_Module.dev[iter].config.rx_buff = module->local.dataResp;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <canIdle_Init+0x104>)
 8001a1e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	3249      	adds	r2, #73	; 0x49
 8001a32:	621a      	str	r2, [r3, #32]
         canIdle_Module.dev[iter].config.rx_buff_len = CANIDLE_RX_SIZE;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <canIdle_Init+0x104>)
 8001a36:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
      }

      /* Link configuration of each device on bus can. */
      iso_can_tp_create(&canIdle_Module.dev[iter].local, &canIdle_Module.dev[iter].config);
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <canIdle_Init+0x104>)
 8001a4c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <canIdle_Init+0x104>)
 8001a62:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	f001 f8b9 	bl	8002bec <iso_can_tp_create>
   for (iter = 0u; iter < CAN_DEV_TOTAL; iter++)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d99d      	bls.n	80019c2 <canIdle_Init+0x12>
   }

   /* Active notify when receive new msg. */
   HAL_FDCAN_ActivateNotification (&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2101      	movs	r1, #1
 8001a8a:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <canIdle_Init+0x114>)
 8001a8c:	f009 f918 	bl	800acc0 <HAL_FDCAN_ActivateNotification>

   /* Start FDCAN core. */
   if (HAL_OK == HAL_FDCAN_Start (&hfdcan1))
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <canIdle_Init+0x114>)
 8001a92:	f008 fef7 	bl	800a884 <HAL_FDCAN_Start>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <canIdle_Init+0xfc>
   {
      /* Reset state of module to Idle. */
      module->local.isNewReq = false;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      module->local.state = CANIDLE_IDLE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   }
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000960 	.word	0x20000960
 8001ab8:	08001471 	.word	0x08001471
 8001abc:	08001521 	.word	0x08001521
 8001ac0:	08001555 	.word	0x08001555
 8001ac4:	200020fc 	.word	0x200020fc

08001ac8 <canIdle_MainFunction>:

void canIdle_MainFunction(tCanIdle_Module *const module)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
   tCanIdle_State nextState = module->local.state;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ad6:	73fb      	strb	r3, [r7, #15]

   canIdle_pollEvent(module);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fc51 	bl	8001380 <canIdle_pollEvent>

   switch (module->local.state)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d823      	bhi.n	8001b30 <canIdle_MainFunction+0x68>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <canIdle_MainFunction+0x28>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b0d 	.word	0x08001b0d
 8001af8:	08001b19 	.word	0x08001b19
 8001afc:	08001b25 	.word	0x08001b25
   {
   case CANIDLE_IDLE:
      nextState = canIdle_WaitingEvent(module);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fd41 	bl	8001588 <canIdle_WaitingEvent>
 8001b06:	4603      	mov	r3, r0
 8001b08:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0a:	e012      	b.n	8001b32 <canIdle_MainFunction+0x6a>

   case CANIDLE_PROCESS_ENTRY:
      nextState = canIdle_ProcessEntry(module);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fd6f 	bl	80015f0 <canIdle_ProcessEntry>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
      break;
 8001b16:	e00c      	b.n	8001b32 <canIdle_MainFunction+0x6a>

   case CANIDLE_PROCESS:
      nextState = canIdle_Process(module);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fd9d 	bl	8001658 <canIdle_Process>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]
      break;
 8001b22:	e006      	b.n	8001b32 <canIdle_MainFunction+0x6a>

   case CANIDLE_PROCESS_POST:
      nextState = canIdle_ProcessPost(module);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fdb7 	bl	8001698 <canIdle_ProcessPost>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b2e:	e000      	b.n	8001b32 <canIdle_MainFunction+0x6a>

   default:
      break;
 8001b30:	bf00      	nop
   }

   module->local.state = nextState;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop

08001b44 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b090      	sub	sp, #64	; 0x40
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
   FDCAN_RxHeaderTypeDef rxHeader = {0u};
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2228      	movs	r2, #40	; 0x28
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f011 fb59 	bl	801320e <memset>
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c

   if (FDCAN_IT_RX_FIFO0_NEW_MESSAGE == (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d059      	beq.n	8001c1e <HAL_FDCAN_RxFifo0Callback+0xda>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
   {
      /* Enter critical section. */
      taskENTER_CRITICAL_FROM_ISR();

      /* Get new message from FIFO. */
      if (HAL_OK == HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, (FDCAN_RxHeaderTypeDef *)&rxHeader, (uint8_t *)canIdle_Module.local.canResp.data))
 8001b82:	f107 0208 	add.w	r2, r7, #8
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f008 ffb2 	bl	800aaf4 <HAL_FDCAN_GetRxMessage>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d13d      	bne.n	8001c12 <HAL_FDCAN_RxFifo0Callback+0xce>
      {
         /* Update new data. */
         canIdle_Module.local.canResp.id.id = rxHeader.Identifier;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001b9c:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8001b9e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ba2:	f361 031c 	bfi	r3, r1, #0, #29
 8001ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
         canIdle_Module.local.canResp.id.isCANFD = (FDCAN_FD_CAN == rxHeader.FDFormat) ? true : false;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2d9      	uxtb	r1, r3
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8001bba:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 8001bbe:	f361 1386 	bfi	r3, r1, #6, #1
 8001bc2:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
         canIdle_Module.local.canResp.id.isExt = (FDCAN_EXTENDED_ID == rxHeader.IdType) ? true : false;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2d9      	uxtb	r1, r3
 8001bd4:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8001bd6:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 8001bda:	f361 1345 	bfi	r3, r1, #5, #1
 8001bde:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
         canIdle_Module.local.canResp.id.isRemote = (FDCAN_REMOTE_FRAME == rxHeader.RxFrameType) ? true : false;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2d9      	uxtb	r1, r3
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8001bf2:	f892 308f 	ldrb.w	r3, [r2, #143]	; 0x8f
 8001bf6:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bfa:	f882 308f 	strb.w	r3, [r2, #143]	; 0x8f
         canIdle_Module.local.canResp.dlc = (uint8_t)(rxHeader.DataLength >> 16U);
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8001c06:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

         /* Change the state of module. */
         canIdle_Module.local.isRecMsg = true;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      }

      /* Exit critical section. */
      taskEXIT_CRITICAL_FROM_ISR(xHigherPriorityTaskWoken);
 8001c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c1c:	bf00      	nop
   }
}
 8001c1e:	bf00      	nop
 8001c20:	3740      	adds	r7, #64	; 0x40
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200009f1 	.word	0x200009f1
 8001c2c:	20000960 	.word	0x20000960

08001c30 <canIdleTask>:

// Where are the scan devices?
void canIdleTask(void const *argument)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN canIdleTask */
   canIdle_Init(&canIdle_Module);
 8001c38:	4804      	ldr	r0, [pc, #16]	; (8001c4c <canIdleTask+0x1c>)
 8001c3a:	f7ff feb9 	bl	80019b0 <canIdle_Init>

   /* Infinite loop */
   for (;;)
   {
      /* Run main function of canIdle. */
      canIdle_MainFunction(&canIdle_Module);
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <canIdleTask+0x1c>)
 8001c40:	f7ff ff42 	bl	8001ac8 <canIdle_MainFunction>
      /* Delay 1 msec.*/
      osDelay(5);
 8001c44:	2005      	movs	r0, #5
 8001c46:	f00e fb5d 	bl	8010304 <osDelay>
      canIdle_MainFunction(&canIdle_Module);
 8001c4a:	e7f8      	b.n	8001c3e <canIdleTask+0xe>
 8001c4c:	20000960 	.word	0x20000960

08001c50 <dlc2len>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

inline uint8_t dlc2len(uint8_t dlc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
   return dlc_len_table[dlc & 0xf];
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <dlc2len+0x20>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	08014d24 	.word	0x08014d24

08001c74 <lenToMinDlc>:

inline int lenToMinDlc(uint16_t len)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
   int dlc;
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e00a      	b.n	8001c9a <lenToMinDlc+0x26>
   {
      if (len <= dlc_len_table[dlc])
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <lenToMinDlc+0x40>)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d906      	bls.n	8001ca2 <lenToMinDlc+0x2e>
   for (dlc = 0; dlc <= sizeof(dlc_len_table) / sizeof(dlc_len_table[0]); dlc++)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d9f1      	bls.n	8001c84 <lenToMinDlc+0x10>
 8001ca0:	e000      	b.n	8001ca4 <lenToMinDlc+0x30>
         break;
 8001ca2:	bf00      	nop
   }
   return dlc;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	08014d24 	.word	0x08014d24

08001cb8 <printf_debug_msg>:

static void printf_debug_msg(struct can_iso_tp_init_t *link, char *msg)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
   if (NULL != link->print_debug)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <printf_debug_msg+0x1a>
   {
      link->print_debug(msg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	6838      	ldr	r0, [r7, #0]
 8001cd0:	4798      	blx	r3
   }
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <event_manage_block_init>:


//--------------task mange module----------------
static int event_manage_block_init(struct event_mange_t *event)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   mcu_lock_init(&event->lock);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 fb3c 	bl	8003362 <mcu_lock_init>
   if (!QueueInit(&event->fifo, event->fifo_data, sizeof(event->fifo_data) / sizeof(event->fifo_data[0])))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f103 0010 	add.w	r0, r3, #16
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f001 faae 	bl	8003258 <QueueInit>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <event_manage_block_init+0x2e>
   {
      return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d06:	e000      	b.n	8001d0a <event_manage_block_init+0x30>
   }
   return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <report_event_to_manage_block>:

static int report_event_to_manage_block(struct event_mange_t *task, void *par_with_handle)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
   int res = OP_NOK;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]

   // Push events into FIFO queues
   if (QueueOperateOk != QueueIn(&task->fifo, (ElemType)par_with_handle))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3310      	adds	r3, #16
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fabf 	bl	80032aa <QueueIn>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d122      	bne.n	8001d78 <report_event_to_manage_block+0x66>
   {
      // can not call printf_debug_msg here, return OP_NOK
   }
   else
   {
      if (mcu_lock_try_lock(&task->lock))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 fb21 	bl	800337c <mcu_lock_try_lock>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d019      	beq.n	8001d74 <report_event_to_manage_block+0x62>
            struct
            {
               event_handle_t handle;
            } *par;
            // Retrieve the latest event record from the FIFO queue
            if (QueueOperateOk != QueueOut(&task->fifo, (ElemType *)&par))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3310      	adds	r3, #16
 8001d44:	f107 0208 	add.w	r2, r7, #8
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fadb 	bl	8003306 <QueueOut>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d004      	beq.n	8001d60 <report_event_to_manage_block+0x4e>
               {
                  par->handle((void *)par);
               }
            }
         } while (1 == 1);
         mcu_lock_unlock(&task->lock);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 fb26 	bl	80033aa <mcu_lock_unlock>
 8001d5e:	e009      	b.n	8001d74 <report_event_to_manage_block+0x62>
               if (par->handle)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0eb      	beq.n	8001d40 <report_event_to_manage_block+0x2e>
                  par->handle((void *)par);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4798      	blx	r3
         {
 8001d72:	e7e5      	b.n	8001d40 <report_event_to_manage_block+0x2e>
      }
      res = OP_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
   }
   return res;
 8001d78:	68fb      	ldr	r3, [r7, #12]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <tx_event_cf_frame>:

//---------------control logic----------------
static int tx_event_cf_frame(can_iso_tp_link_t_p link)
{
 8001d82:	b5b0      	push	{r4, r5, r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   if (link->tx_record.status == tx_cf_wait_tx)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	f040 80e3 	bne.w	8001f5c <tx_event_cf_frame+0x1da>
   {
      int tx_frame = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
      if (link->tx_record.rx_Stmin != 0)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00c      	beq.n	8001dbe <tx_event_cf_frame+0x3c>
      {
         if ((link->current_time_ms - link->tx_record.last_msg_time_ms) < link->tx_record.rx_Stmin)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d201      	bcs.n	8001dbe <tx_event_cf_frame+0x3c>
         {
            tx_frame = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
         }
      }
      if (0 != tx_frame)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80cb 	beq.w	8001f5c <tx_event_cf_frame+0x1da>
      {
         uint32_t txLen = link->tx_record.current_size - link->tx_record.current_tx_index;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	60bb      	str	r3, [r7, #8]
         if (txLen > (uint32_t)(dlc2len(link->init_info.TX_DLC) - 1))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff37 	bl	8001c50 <dlc2len>
 8001de2:	4603      	mov	r3, r0
 8001de4:	3b01      	subs	r3, #1
 8001de6:	461a      	mov	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d908      	bls.n	8001e00 <tx_event_cf_frame+0x7e>
         {
            txLen = (dlc2len(link->init_info.TX_DLC) - 1);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff2b 	bl	8001c50 <dlc2len>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
         }
         if (txLen == 0)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d114      	bne.n	8001e30 <tx_event_cf_frame+0xae>
         {
            link->tx_record.status = tx_idle;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            if (link->init_info.N_USData_confirm)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a2 	beq.w	8001f5c <tx_event_cf_frame+0x1da>
            {
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699c      	ldr	r4, [r3, #24]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	47a0      	blx	r4
 8001e2e:	e095      	b.n	8001f5c <tx_event_cf_frame+0x1da>
            }
         }
         else
         {
            link->tx_record.last_msg.id = link->init_info.tx_id;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6852      	ldr	r2, [r2, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
            link->tx_record.last_msg.data[0] = 0x20 | (link->tx_record.current_tx_SN & 0xf);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	f043 0320 	orr.w	r3, r3, #32
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            memcpy(&link->tx_record.last_msg.data[1], &link->tx_record.current_playload[link->tx_record.current_tx_index], txLen);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	4413      	add	r3, r2
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f011 f9c1 	bl	80131f2 <memcpy>
            if (dlc2len(link->init_info.TX_DLC) > (1 + txLen))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff feea 	bl	8001c50 <dlc2len>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3301      	adds	r3, #1
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d92f      	bls.n	8001ee8 <tx_event_cf_frame+0x166>
            {
               memset(&link->tx_record.last_msg.data[1 + txLen], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 1 - txLen);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	3340      	adds	r3, #64	; 0x40
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	1d5c      	adds	r4, r3, #5
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fed4 	bl	8001c50 <dlc2len>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f011 f9a9 	bl	801320e <memset>
               link->tx_record.last_msg.dlc = lenToMinDlc(txLen + 1);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fed5 	bl	8001c74 <lenToMinDlc>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
               if (link->tx_record.last_msg.dlc < 8)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d80a      	bhi.n	8001ef4 <tx_event_cf_frame+0x172>
                  link->tx_record.last_msg.dlc = 8;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee6:	e005      	b.n	8001ef4 <tx_event_cf_frame+0x172>
            }
            else
            {
               link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }
            link->tx_record.current_tx_index += txLen;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            link->tx_record.status = tx_cf_wait_tx;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2206      	movs	r2, #6
 8001f08:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            link->tx_record.last_msg_time_ms = link->current_time_ms;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	3240      	adds	r2, #64	; 0x40
 8001f1e:	4611      	mov	r1, r2
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d114      	bne.n	8001f54 <tx_event_cf_frame+0x1d2>
            {
               link->tx_record.rx_BS_tx++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
               link->tx_record.current_tx_SN++;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
               link->tx_record.status = tx_cf_wait_confirm;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8001f52:	e003      	b.n	8001f5c <tx_event_cf_frame+0x1da>
            }
            else
            {
               link->tx_record.status = tx_cf_wait_tx_retry;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2207      	movs	r2, #7
 8001f58:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
         }
      }
   }
   return 0;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}

08001f66 <tx_event_poll>:

static int tx_event_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 8001f66:	b590      	push	{r4, r7, lr}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]

   if (link->tx_record.status != tx_idle)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d078      	beq.n	800206c <tx_event_poll+0x106>
   {
      // Check whether the message is sent out of time
      if ((user_ms - link->tx_record.last_msg_time_ms) > link->init_info.N_As)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d924      	bls.n	8001fd6 <tx_event_poll+0x70>
      {
         if (link->init_info.N_USData_confirm)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <tx_event_poll+0x66>
         {
            if (link->tx_record.status == tx_wait_fc)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d10b      	bne.n	8001fb6 <tx_event_poll+0x50>
            {
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_BS);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699c      	ldr	r4, [r3, #24]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001fae:	2302      	movs	r3, #2
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	47a0      	blx	r4
 8001fb4:	e00a      	b.n	8001fcc <tx_event_poll+0x66>
            }
            else
            {
               link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_TIMEOUT_A);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699c      	ldr	r4, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	47a0      	blx	r4
            }
         }
         link->tx_record.status = tx_idle;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8001fd4:	e04a      	b.n	800206c <tx_event_poll+0x106>
      }
      else if (link->tx_record.status == tx_sf_wait_tx)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10e      	bne.n	8001ffe <tx_event_poll+0x98>
      {
         // If the last driver failed to send, the request is resubmitted
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	3240      	adds	r2, #64	; 0x40
 8001fe8:	4611      	mov	r1, r2
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d13b      	bne.n	800206c <tx_event_poll+0x106>
         {
            link->tx_record.status = tx_sf_wait_confirm;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8001ffc:	e036      	b.n	800206c <tx_event_poll+0x106>
         }
      }
      else if (link->tx_record.status == tx_ff_wait_tx)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002004:	2b03      	cmp	r3, #3
 8002006:	d10e      	bne.n	8002026 <tx_event_poll+0xc0>
      {
         // If the last driver failed to send, the request is resubmitted
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	3240      	adds	r2, #64	; 0x40
 8002010:	4611      	mov	r1, r2
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d127      	bne.n	800206c <tx_event_poll+0x106>
         {
            link->tx_record.status = tx_ff_wait_confirm;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2204      	movs	r2, #4
 8002020:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8002024:	e022      	b.n	800206c <tx_event_poll+0x106>
         }
      }
      else if (link->tx_record.status == tx_cf_wait_tx_retry)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800202c:	2b07      	cmp	r3, #7
 800202e:	d11d      	bne.n	800206c <tx_event_poll+0x106>
      {
         // If the last driver failed to send, the request is resubmitted
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	3240      	adds	r2, #64	; 0x40
 8002038:	4611      	mov	r1, r2
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d113      	bne.n	800206c <tx_event_poll+0x106>
         {
            link->tx_record.rx_BS_tx++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
            link->tx_record.current_tx_SN++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800205a:	3301      	adds	r3, #1
 800205c:	b2da      	uxtb	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
            link->tx_record.status = tx_cf_wait_confirm;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2208      	movs	r2, #8
 8002068:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      else
      {
         // do nothing
      }
   }
   tx_event_cf_frame(link);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fe88 	bl	8001d82 <tx_event_cf_frame>
   return 0;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}

0800207c <tx_event_L_Data_Confirm>:

static int tx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
   if (link->tx_record.status == tx_sf_wait_confirm)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800208e:	2b02      	cmp	r3, #2
 8002090:	d123      	bne.n	80020da <tx_event_L_Data_Confirm+0x5e>
   {
      if (link->init_info.N_USData_confirm)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01a      	beq.n	80020d0 <tx_event_L_Data_Confirm+0x54>
      {
         if (0 == error)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10b      	bne.n	80020ba <tx_event_L_Data_Confirm+0x3e>
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_OK);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699c      	ldr	r4, [r3, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020b2:	2300      	movs	r3, #0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	47a0      	blx	r4
 80020b8:	e00a      	b.n	80020d0 <tx_event_L_Data_Confirm+0x54>
         }
         else
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_ERROR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699c      	ldr	r4, [r3, #24]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020ca:	2309      	movs	r3, #9
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	47a0      	blx	r4
         }
      }
      link->tx_record.status = tx_idle;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80020d8:	e056      	b.n	8002188 <tx_event_L_Data_Confirm+0x10c>
   }
   else if (link->tx_record.status == tx_ff_wait_confirm)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d127      	bne.n	8002134 <tx_event_L_Data_Confirm+0xb8>
   {
      if (link->tx_record.current_size > 0xfff)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	d30c      	bcc.n	800210a <tx_event_L_Data_Confirm+0x8e>
      {
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 6;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fdaa 	bl	8001c50 <dlc2len>
 80020fc:	4603      	mov	r3, r0
 80020fe:	3b06      	subs	r3, #6
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002108:	e00b      	b.n	8002122 <tx_event_L_Data_Confirm+0xa6>
      }
      else
      {
         link->tx_record.current_tx_index = dlc2len(link->init_info.TX_DLC) - 2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd9d 	bl	8001c50 <dlc2len>
 8002116:	4603      	mov	r3, r0
 8002118:	3b02      	subs	r3, #2
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
      link->tx_record.current_tx_SN = 1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      link->tx_record.status = tx_wait_fc;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2205      	movs	r2, #5
 800212e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8002132:	e029      	b.n	8002188 <tx_event_L_Data_Confirm+0x10c>
   }
   else if (link->tx_record.status == tx_cf_wait_confirm)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800213a:	2b08      	cmp	r3, #8
 800213c:	d124      	bne.n	8002188 <tx_event_L_Data_Confirm+0x10c>
   {
      if (link->tx_record.rx_BS != 0)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <tx_event_L_Data_Confirm+0xf4>
      {
         if ((link->tx_record.rx_BS == link->tx_record.rx_BS_tx) && (link->tx_record.current_size != link->tx_record.current_tx_index))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8002154:	429a      	cmp	r2, r3
 8002156:	d10b      	bne.n	8002170 <tx_event_L_Data_Confirm+0xf4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002164:	429a      	cmp	r2, r3
 8002166:	d003      	beq.n	8002170 <tx_event_L_Data_Confirm+0xf4>
         {
            link->tx_record.status = tx_wait_fc;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2205      	movs	r2, #5
 800216c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         }
      }
      if (link->tx_record.status == tx_cf_wait_confirm)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002176:	2b08      	cmp	r3, #8
 8002178:	d103      	bne.n	8002182 <tx_event_L_Data_Confirm+0x106>
      {
         link->tx_record.status = tx_cf_wait_tx;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2206      	movs	r2, #6
 800217e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      }
      tx_event_cf_frame(link);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fdfd 	bl	8001d82 <tx_event_cf_frame>
   }
   return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
	...

08002194 <tx_event_N_USData_Request>:

static int tx_event_N_USData_Request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	460b      	mov	r3, r1
 80021a2:	72fb      	strb	r3, [r7, #11]
   unsigned int i;
   uint8_t single_frame_max_len = 7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	74fb      	strb	r3, [r7, #19]
   if (link->init_info.TX_DLC > 8)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d908      	bls.n	80021c4 <tx_event_N_USData_Request+0x30>
   {
      single_frame_max_len = dlc2len(link->init_info.TX_DLC) - 2;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fd49 	bl	8001c50 <dlc2len>
 80021be:	4603      	mov	r3, r0
 80021c0:	3b02      	subs	r3, #2
 80021c2:	74fb      	strb	r3, [r7, #19]
   }

   if (link->tx_record.status == tx_idle)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 8110 	bne.w	80023f0 <tx_event_N_USData_Request+0x25c>
   {
      if (size <= single_frame_max_len)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f200 808b 	bhi.w	80022f0 <tx_event_N_USData_Request+0x15c>
      {
         // single frame
         if (isFunction == 0)
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <tx_event_N_USData_Request+0x56>
         {
            link->tx_record.last_msg.id = link->init_info.tx_id;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	6852      	ldr	r2, [r2, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
 80021e8:	e003      	b.n	80021f2 <tx_event_N_USData_Request+0x5e>
         }
         else
         {
            link->tx_record.last_msg.id = link->init_info.funtion_id;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	68d2      	ldr	r2, [r2, #12]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
         }

         if (size <= 7)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	d829      	bhi.n	800224c <tx_event_N_USData_Request+0xb8>
         {
            for (i = 0; i < size; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00c      	b.n	8002218 <tx_event_N_USData_Request+0x84>
            {
               link->tx_record.last_msg.data[i] = payload[i];
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4413      	add	r3, r2
 8002204:	7819      	ldrb	r1, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4413      	add	r3, r2
 800220c:	3345      	adds	r3, #69	; 0x45
 800220e:	460a      	mov	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < size; i++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d3ee      	bcc.n	80021fe <tx_event_N_USData_Request+0x6a>
            }
            for (; i < single_frame_max_len; i++)
 8002220:	e00b      	b.n	800223a <tx_event_N_USData_Request+0xa6>
            {
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4413      	add	r3, r2
 800222e:	3345      	adds	r3, #69	; 0x45
 8002230:	460a      	mov	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
            for (; i < single_frame_max_len; i++)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	429a      	cmp	r2, r3
 8002240:	d3ef      	bcc.n	8002222 <tx_event_N_USData_Request+0x8e>
            }
            link->tx_record.last_msg.dlc = 8;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2208      	movs	r2, #8
 8002246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224a:	e030      	b.n	80022ae <tx_event_N_USData_Request+0x11a>
         }
         else
         {
            for (i = 0; i < size; i++)
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e00c      	b.n	800226c <tx_event_N_USData_Request+0xd8>
            {
               link->tx_record.last_msg.data[i] = payload[i];
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	4413      	add	r3, r2
 8002258:	7819      	ldrb	r1, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4413      	add	r3, r2
 8002260:	3345      	adds	r3, #69	; 0x45
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < size; i++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d3ee      	bcc.n	8002252 <tx_event_N_USData_Request+0xbe>
            }
            for (; i < single_frame_max_len; i++)
 8002274:	e00b      	b.n	800228e <tx_event_N_USData_Request+0xfa>
            {
               link->tx_record.last_msg.data[i] = link->init_info.frame_pad;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4413      	add	r3, r2
 8002282:	3345      	adds	r3, #69	; 0x45
 8002284:	460a      	mov	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
            for (; i < single_frame_max_len; i++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	429a      	cmp	r2, r3
 8002294:	d3ef      	bcc.n	8002276 <tx_event_N_USData_Request+0xe2>
            }
            link->tx_record.last_msg.dlc = lenToMinDlc(size + 2);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	3302      	adds	r3, #2
 800229c:	b29b      	uxth	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fce8 	bl	8001c74 <lenToMinDlc>
 80022a4:	4603      	mov	r3, r0
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
         }
         link->tx_record.status = tx_sf_wait_tx;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         link->tx_record.current_playload = payload;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         link->tx_record.current_size = size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	3240      	adds	r2, #64	; 0x40
 80022d8:	4611      	mov	r1, r2
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	4798      	blx	r3
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 8095 	bne.w	8002410 <tx_event_N_USData_Request+0x27c>
         {
            link->tx_record.status = tx_sf_wait_confirm;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80022ee:	e08f      	b.n	8002410 <tx_event_N_USData_Request+0x27c>
         }
      }
      else
      {
         // multi frame
         link->tx_record.N_WFT_cnt = 0;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
         link->tx_record.last_msg.id = link->init_info.tx_id;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	6852      	ldr	r2, [r2, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
         if (size <= 0xfff)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	d21e      	bcs.n	8002346 <tx_event_N_USData_Request+0x1b2>
         {
            link->tx_record.last_msg.data[0] = 0x10 | ((uint8_t)(size >> 8));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f043 0310 	orr.w	r3, r3, #16
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            link->tx_record.last_msg.data[1] = (uint8_t)(size & 0xff);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            memcpy(&link->tx_record.last_msg.data[2], payload, dlc2len(link->init_info.TX_DLC) - 2);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f103 0447 	add.w	r4, r3, #71	; 0x47
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc8d 	bl	8001c50 <dlc2len>
 8002336:	4603      	mov	r3, r0
 8002338:	3b02      	subs	r3, #2
 800233a:	461a      	mov	r2, r3
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4620      	mov	r0, r4
 8002340:	f010 ff57 	bl	80131f2 <memcpy>
 8002344:	e02e      	b.n	80023a4 <tx_event_N_USData_Request+0x210>
         }
         else
         {
            link->tx_record.last_msg.data[0] = 0x10;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2210      	movs	r2, #16
 800234a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            link->tx_record.last_msg.data[1] = 0;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            link->tx_record.last_msg.data[2] = (uint8_t)(size >> 24);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	0e1b      	lsrs	r3, r3, #24
 800235a:	b2da      	uxtb	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            link->tx_record.last_msg.data[3] = (uint8_t)(size >> 16);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            link->tx_record.last_msg.data[4] = (uint8_t)(size >> 8);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            link->tx_record.last_msg.data[5] = (uint8_t)(size);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            memcpy(&link->tx_record.last_msg.data[6], payload, dlc2len(link->init_info.TX_DLC) - 6);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f103 044b 	add.w	r4, r3, #75	; 0x4b
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fc5d 	bl	8001c50 <dlc2len>
 8002396:	4603      	mov	r3, r0
 8002398:	3b06      	subs	r3, #6
 800239a:	461a      	mov	r2, r3
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4620      	mov	r0, r4
 80023a0:	f010 ff27 	bl	80131f2 <memcpy>
         }
         link->tx_record.last_msg.dlc = link->init_info.TX_DLC;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
         link->tx_record.status = tx_ff_wait_tx;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2203      	movs	r2, #3
 80023b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         link->tx_record.last_msg_time_ms = link->current_time_ms;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         link->tx_record.current_playload = payload;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         link->tx_record.current_size = size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         if (0 == link->init_info.L_Data_request(link, &link->tx_record.last_msg))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	3240      	adds	r2, #64	; 0x40
 80023da:	4611      	mov	r1, r2
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	4798      	blx	r3
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d114      	bne.n	8002410 <tx_event_N_USData_Request+0x27c>
         {
            link->tx_record.status = tx_ff_wait_confirm;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2204      	movs	r2, #4
 80023ea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80023ee:	e00f      	b.n	8002410 <tx_event_N_USData_Request+0x27c>
         }
      }
   }
   else
   {
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when last request is not done\n");
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	490a      	ldr	r1, [pc, #40]	; (800241c <tx_event_N_USData_Request+0x288>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fc5f 	bl	8001cb8 <printf_debug_msg>
      if (link->init_info.N_USData_confirm)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <tx_event_N_USData_Request+0x27c>
      {
         link->init_info.N_USData_confirm(link, payload, size, N_ERROR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699c      	ldr	r4, [r3, #24]
 8002406:	2309      	movs	r3, #9
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	47a0      	blx	r4
      }
   }
   return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	bf00      	nop
 800241c:	08014458 	.word	0x08014458

08002420 <tx_event_L_Data_indication>:

static int tx_event_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *rx_msg)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
   if (link->tx_record.status == tx_wait_fc)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002430:	2b05      	cmp	r3, #5
 8002432:	d17f      	bne.n	8002534 <tx_event_L_Data_indication+0x114>
   {
      if (rx_msg->data[0] != 0x31)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	795b      	ldrb	r3, [r3, #5]
 8002438:	2b31      	cmp	r3, #49	; 0x31
 800243a:	d003      	beq.n	8002444 <tx_event_L_Data_indication+0x24>
      {
         link->tx_record.N_WFT_cnt = 0;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      }
      if (rx_msg->data[0] == 0x30)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	795b      	ldrb	r3, [r3, #5]
 8002448:	2b30      	cmp	r3, #48	; 0x30
 800244a:	d126      	bne.n	800249a <tx_event_L_Data_indication+0x7a>
      {
         link->tx_record.status = tx_cf_wait_tx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2206      	movs	r2, #6
 8002450:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         link->tx_record.rx_BS = rx_msg->data[1];
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	799a      	ldrb	r2, [r3, #6]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
         link->tx_record.rx_BS_tx = 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
         link->tx_record.rx_Stmin = rx_msg->data[2];
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	79da      	ldrb	r2, [r3, #7]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
         if (link->tx_record.rx_Stmin > 0x7f)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8002476:	b25b      	sxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	da03      	bge.n	8002484 <tx_event_L_Data_indication+0x64>
         {
            link->tx_record.rx_Stmin = 1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
         }
         link->tx_record.last_msg_time_ms = link->current_time_ms - link->tx_record.rx_Stmin - 1;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002498:	e04c      	b.n	8002534 <tx_event_L_Data_indication+0x114>
      }
      else if (rx_msg->data[0] == 0x32)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	795b      	ldrb	r3, [r3, #5]
 800249e:	2b32      	cmp	r3, #50	; 0x32
 80024a0:	d113      	bne.n	80024ca <tx_event_L_Data_indication+0xaa>
      {
         link->tx_record.status = tx_idle;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
         if (link->init_info.N_USData_confirm)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d040      	beq.n	8002534 <tx_event_L_Data_indication+0x114>
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_BUFFER_OVFLW);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699c      	ldr	r4, [r3, #24]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024c2:	2308      	movs	r3, #8
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	47a0      	blx	r4
 80024c8:	e034      	b.n	8002534 <tx_event_L_Data_indication+0x114>
         }
      }
      else if (rx_msg->data[0] == 0x31)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	795b      	ldrb	r3, [r3, #5]
 80024ce:	2b31      	cmp	r3, #49	; 0x31
 80024d0:	d11d      	bne.n	800250e <tx_event_L_Data_indication+0xee>
      {
         if (0 != link->init_info.N_WFTmax)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02b      	beq.n	8002534 <tx_event_L_Data_indication+0x114>
         {
            link->tx_record.N_WFT_cnt++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            if (link->init_info.N_WFTmax <= link->tx_record.N_WFT_cnt)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d81b      	bhi.n	8002534 <tx_event_L_Data_indication+0x114>
            {
               link->tx_record.N_WFT_cnt = 0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
               link->tx_record.status = tx_idle;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800250c:	e012      	b.n	8002534 <tx_event_L_Data_indication+0x114>
            }
         }
      }
      else
      {
         if (link->init_info.N_USData_confirm)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <tx_event_L_Data_indication+0x10c>
         {
            link->init_info.N_USData_confirm(link, link->tx_record.current_playload, link->tx_record.current_size, N_INVALID_FS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699c      	ldr	r4, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002526:	2305      	movs	r3, #5
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	47a0      	blx	r4
         }
         link->tx_record.status = tx_idle;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
      }
   }
   tx_event_cf_frame(link);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fc24 	bl	8001d82 <tx_event_cf_frame>
   return 0;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <rx_event_handle_poll>:

static int rx_event_handle_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
   if (link->rx_record.status == rx_wait_cf)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002554:	2b03      	cmp	r3, #3
 8002556:	d11a      	bne.n	800258e <rx_event_handle_poll+0x4a>
   {
      // Check whether the message is sent out of time
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Cr)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8002566:	4293      	cmp	r3, r2
 8002568:	d911      	bls.n	800258e <rx_event_handle_poll+0x4a>
      {
         if (link->init_info.N_USData_indication)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <rx_event_handle_poll+0x42>
         {
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_CR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695c      	ldr	r4, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69d9      	ldr	r1, [r3, #28]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002580:	2303      	movs	r3, #3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	47a0      	blx	r4
         }
         link->rx_record.status = rx_idle;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   if ((link->rx_record.status == rx_tx_fc_wait_confirm) || (link->rx_record.status == rx_tx_fc))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002594:	2b02      	cmp	r3, #2
 8002596:	d004      	beq.n	80025a2 <rx_event_handle_poll+0x5e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d11a      	bne.n	80025d8 <rx_event_handle_poll+0x94>
   {
      // Check whether the message is sent out of time
      if ((user_ms - link->rx_record.last_msg_time_ms) > link->init_info.N_Ar)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d911      	bls.n	80025d8 <rx_event_handle_poll+0x94>
      {
         if (link->init_info.N_USData_indication)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <rx_event_handle_poll+0x8c>
         {
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_TIMEOUT_A);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695c      	ldr	r4, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69d9      	ldr	r1, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80025ca:	2301      	movs	r3, #1
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	47a0      	blx	r4
         }
         link->rx_record.status = rx_idle;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10f      	bne.n	8002602 <rx_event_handle_poll+0xbe>
   {
      // If the last driver failed to send, the request is resubmitted
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 80025ec:	4611      	mov	r1, r2
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d118      	bne.n	800262a <rx_event_handle_poll+0xe6>
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8002600:	e013      	b.n	800262a <rx_event_handle_poll+0xe6>
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002608:	2b04      	cmp	r3, #4
 800260a:	d10e      	bne.n	800262a <rx_event_handle_poll+0xe6>
   {
      // If the last driver failed to send, the request is resubmitted
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 8002616:	4611      	mov	r1, r2
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <rx_event_handle_poll+0xe6>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2205      	movs	r2, #5
 8002626:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}

08002634 <rx_event_L_Data_Confirm>:

static int rx_event_L_Data_Confirm(can_iso_tp_link_t_p link, int8_t error)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
   if (link->rx_record.status == rx_tx_fc_wait_confirm)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002646:	2b02      	cmp	r3, #2
 8002648:	d104      	bne.n	8002654 <rx_event_L_Data_Confirm+0x20>
   {
      link->rx_record.status = rx_wait_cf;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8002652:	e008      	b.n	8002666 <rx_event_L_Data_Confirm+0x32>
   }
   else if (link->rx_record.status == rx_tx_fc_overrun_wait_confirm)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800265a:	2b05      	cmp	r3, #5
 800265c:	d103      	bne.n	8002666 <rx_event_L_Data_Confirm+0x32>
   {
      link->rx_record.status = rx_idle;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
   }
   return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <rx_event_L_Data_indication>:

static int rx_event_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *rx_msg)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
   if ((rx_msg->data[0] & 0xf0) == 0)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	795b      	ldrb	r3, [r3, #5]
 8002682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d16e      	bne.n	8002768 <rx_event_L_Data_indication+0xf4>
   {
      if (rx_msg->data[0] != 0)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	795b      	ldrb	r3, [r3, #5]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03b      	beq.n	800270a <rx_event_L_Data_indication+0x96>
      {
         if ((rx_msg->dlc <= 8) && (rx_msg->data[0] <= 7))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	791b      	ldrb	r3, [r3, #4]
 8002696:	2b08      	cmp	r3, #8
 8002698:	f200 817a 	bhi.w	8002990 <rx_event_L_Data_indication+0x31c>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	795b      	ldrb	r3, [r3, #5]
 80026a0:	2b07      	cmp	r3, #7
 80026a2:	f200 8175 	bhi.w	8002990 <rx_event_L_Data_indication+0x31c>
         {
            uint8_t len = rx_msg->data[0];
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	795b      	ldrb	r3, [r3, #5]
 80026aa:	737b      	strb	r3, [r7, #13]
            uint8_t rx_len = dlc2len(rx_msg->dlc);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	791b      	ldrb	r3, [r3, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff facd 	bl	8001c50 <dlc2len>
 80026b6:	4603      	mov	r3, r0
 80026b8:	733b      	strb	r3, [r7, #12]
            if (rx_len >= (1 + len))
 80026ba:	7b7a      	ldrb	r2, [r7, #13]
 80026bc:	7b3b      	ldrb	r3, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	f080 8166 	bcs.w	8002990 <rx_event_L_Data_indication+0x31c>
            {
               if (link->init_info.N_USData_indication)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8161 	beq.w	8002990 <rx_event_L_Data_indication+0x31c>
               {
                  if (link->rx_record.status != rx_idle)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <rx_event_L_Data_indication+0x78>
                  {
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695c      	ldr	r4, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69d9      	ldr	r1, [r3, #28]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026e6:	2306      	movs	r3, #6
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	47a0      	blx	r4
                  }
                  link->rx_record.status = rx_idle;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                  link->init_info.N_USData_indication(link, &rx_msg->data[1], rx_msg->data[0], N_OK);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695c      	ldr	r4, [r3, #20]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1d99      	adds	r1, r3, #6
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	795b      	ldrb	r3, [r3, #5]
 8002700:	461a      	mov	r2, r3
 8002702:	2300      	movs	r3, #0
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	47a0      	blx	r4
 8002708:	e142      	b.n	8002990 <rx_event_L_Data_indication+0x31c>
            }
         }
      }
      else
      {
         if (rx_msg->dlc > 8)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	791b      	ldrb	r3, [r3, #4]
 800270e:	2b08      	cmp	r3, #8
 8002710:	f240 813e 	bls.w	8002990 <rx_event_L_Data_indication+0x31c>
         {
            uint8_t len = rx_msg->data[1];
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	799b      	ldrb	r3, [r3, #6]
 8002718:	73fb      	strb	r3, [r7, #15]
            if (len > 0)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8137 	beq.w	8002990 <rx_event_L_Data_indication+0x31c>
            {
               uint8_t rx_len = dlc2len(rx_msg->dlc);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	791b      	ldrb	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fa92 	bl	8001c50 <dlc2len>
 800272c:	4603      	mov	r3, r0
 800272e:	73bb      	strb	r3, [r7, #14]
               if (rx_len >= (2 + len))
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	429a      	cmp	r2, r3
 8002738:	f280 812a 	bge.w	8002990 <rx_event_L_Data_indication+0x31c>
               {
                  /* according 15765-2-2016  table13, ignore frames that SF_DL does not fit int valid range*/
                  if (lenToMinDlc(len + 2) == rx_msg->dlc)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	b29b      	uxth	r3, r3
 8002740:	3302      	adds	r3, #2
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fa95 	bl	8001c74 <lenToMinDlc>
 800274a:	4602      	mov	r2, r0
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	791b      	ldrb	r3, [r3, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 811d 	bne.w	8002990 <rx_event_L_Data_indication+0x31c>
                  {
                     link->init_info.N_USData_indication(link, &rx_msg->data[2], len, N_OK);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695c      	ldr	r4, [r3, #20]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	1dd9      	adds	r1, r3, #7
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	2300      	movs	r3, #0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	47a0      	blx	r4
 8002766:	e113      	b.n	8002990 <rx_event_L_Data_indication+0x31c>
               }
            }
         }
      }
   }
   else if ((rx_msg->data[0] & 0xf0) == 0x10)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	2b10      	cmp	r3, #16
 8002772:	d167      	bne.n	8002844 <rx_event_L_Data_indication+0x1d0>
   {
      uint8_t rx_index_offset;
      if (link->rx_record.status != rx_idle)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <rx_event_L_Data_indication+0x11e>
      {
         link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_UNEXP_PDU);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695c      	ldr	r4, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69d9      	ldr	r1, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800278c:	2306      	movs	r3, #6
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	47a0      	blx	r4
      }
      // rx ff and send fc
      link->rx_record.rx_len = (rx_msg->data[0] & 0xf) * 256 + rx_msg->data[1];
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	795b      	ldrb	r3, [r3, #5]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	7992      	ldrb	r2, [r2, #6]
 80027a0:	4413      	add	r3, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
      if (0 == link->rx_record.rx_len)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <rx_event_L_Data_indication+0x168>
      {
         link->rx_record.rx_len = (((uint32_t)rx_msg->data[2]) << 24) + (((uint32_t)rx_msg->data[3]) << 16) + (((uint32_t)rx_msg->data[4]) << 8) + (((uint32_t)rx_msg->data[5]));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	79db      	ldrb	r3, [r3, #7]
 80027b8:	061a      	lsls	r2, r3, #24
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7a1b      	ldrb	r3, [r3, #8]
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	441a      	add	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	7a5b      	ldrb	r3, [r3, #9]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	4413      	add	r3, r2
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	7a92      	ldrb	r2, [r2, #10]
 80027ce:	441a      	add	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
         rx_index_offset = 6;
 80027d6:	2306      	movs	r3, #6
 80027d8:	75fb      	strb	r3, [r7, #23]
 80027da:	e001      	b.n	80027e0 <rx_event_L_Data_indication+0x16c>
      }
      else
      {
         rx_index_offset = 2;
 80027dc:	2302      	movs	r3, #2
 80027de:	75fb      	strb	r3, [r7, #23]
      }
      if (link->rx_record.rx_len <= link->init_info.rx_buff_len)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d825      	bhi.n	800283a <rx_event_L_Data_indication+0x1c6>
      {
         link->rx_record.rx_index = dlc2len(rx_msg->dlc) - rx_index_offset;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	791b      	ldrb	r3, [r3, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fa2c 	bl	8001c50 <dlc2len>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	461a      	mov	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
         memcpy(link->init_info.rx_buff, &rx_msg->data[rx_index_offset], link->rx_record.rx_index);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69d8      	ldr	r0, [r3, #28]
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	4413      	add	r3, r2
 8002812:	1d59      	adds	r1, r3, #5
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800281a:	461a      	mov	r2, r3
 800281c:	f010 fce9 	bl	80131f2 <memcpy>
         link->rx_record.rx_SN = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
         link->rx_record.tx_BS_cnt = 0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
         link->rx_record.status = rx_tx_fc;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8002838:	e0aa      	b.n	8002990 <rx_event_L_Data_indication+0x31c>
      }
      else
      {
         link->rx_record.status = rx_tx_fc_overrun;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8002842:	e0a5      	b.n	8002990 <rx_event_L_Data_indication+0x31c>
      }
   }
   else if ((rx_msg->data[0] & 0xf0) == 0x20)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	795b      	ldrb	r3, [r3, #5]
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	2b20      	cmp	r3, #32
 800284e:	f040 809f 	bne.w	8002990 <rx_event_L_Data_indication+0x31c>
   {
      // rx cf
      if (link->rx_record.status == rx_wait_cf)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002858:	2b03      	cmp	r3, #3
 800285a:	f040 8099 	bne.w	8002990 <rx_event_L_Data_indication+0x31c>
      {
         uint32_t rx_len = link->rx_record.rx_len - link->rx_record.rx_index;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	613b      	str	r3, [r7, #16]
         if (rx_len > (uint32_t)(dlc2len(rx_msg->dlc) - 1))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f9ec 	bl	8001c50 <dlc2len>
 8002878:	4603      	mov	r3, r0
 800287a:	3b01      	subs	r3, #1
 800287c:	461a      	mov	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4293      	cmp	r3, r2
 8002882:	d907      	bls.n	8002894 <rx_event_L_Data_indication+0x220>
         {
            rx_len = (dlc2len(rx_msg->dlc) - 1);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f9e1 	bl	8001c50 <dlc2len>
 800288e:	4603      	mov	r3, r0
 8002890:	3b01      	subs	r3, #1
 8002892:	613b      	str	r3, [r7, #16]
         }
         link->rx_record.rx_SN++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800289a:	3301      	adds	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
         link->rx_record.last_msg_time_ms = link->current_time_ms;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
         if ((link->rx_record.rx_SN & 0xf) == (rx_msg->data[0] & 0xf))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	795b      	ldrb	r3, [r3, #5]
 80028b8:	4053      	eors	r3, r2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d157      	bne.n	8002974 <rx_event_L_Data_indication+0x300>
         {
            memcpy(&link->init_info.rx_buff[link->rx_record.rx_index], &rx_msg->data[1], rx_len);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80028ce:	18d0      	adds	r0, r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3306      	adds	r3, #6
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4619      	mov	r1, r3
 80028d8:	f010 fc8b 	bl	80131f2 <memcpy>
            link->rx_record.rx_index += rx_len;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	441a      	add	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
            if (link->rx_record.status != rx_idle)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d04c      	beq.n	8002990 <rx_event_L_Data_indication+0x31c>
            {
               if (link->rx_record.rx_index >= link->rx_record.rx_len)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002902:	429a      	cmp	r2, r3
 8002904:	d312      	bcc.n	800292c <rx_event_L_Data_indication+0x2b8>
               {
                  if (link->init_info.N_USData_indication)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <rx_event_L_Data_indication+0x2ae>
                  {
                     link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_OK);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695c      	ldr	r4, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69d9      	ldr	r1, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800291c:	2300      	movs	r3, #0
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	47a0      	blx	r4
                  }
                  link->rx_record.status = rx_idle;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 800292a:	e031      	b.n	8002990 <rx_event_L_Data_indication+0x31c>
               }
               else
               {
                  link->rx_record.tx_BS_cnt++;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8002932:	3301      	adds	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
                  if (link->init_info.FC_BS != 0)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002942:	2b00      	cmp	r3, #0
 8002944:	d024      	beq.n	8002990 <rx_event_L_Data_indication+0x31c>
                  {
                     if ((link->rx_record.tx_BS_cnt % link->init_info.FC_BS) == 0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8002952:	fbb3 f1f2 	udiv	r1, r3, r2
 8002956:	fb01 f202 	mul.w	r2, r1, r2
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <rx_event_L_Data_indication+0x31c>
                     {
                        link->rx_record.status = rx_tx_fc;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                        link->rx_record.tx_BS_cnt = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8002972:	e00d      	b.n	8002990 <rx_event_L_Data_indication+0x31c>
               }
            }
         }
         else
         {
            link->init_info.N_USData_indication(link, link->init_info.rx_buff, link->rx_record.rx_len, N_WRONG_SN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695c      	ldr	r4, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69d9      	ldr	r1, [r3, #28]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002982:	2304      	movs	r3, #4
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	47a0      	blx	r4
            link->rx_record.status = rx_idle;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
         }
      }
   }
   if (link->rx_record.status == rx_tx_fc)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002996:	2b01      	cmp	r3, #1
 8002998:	d143      	bne.n	8002a22 <rx_event_L_Data_indication+0x3ae>
   {
      link->rx_record.last_msg.id = link->init_info.tx_id;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6852      	ldr	r2, [r2, #4]
 80029a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x30;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2230      	movs	r2, #48	; 0x30
 80029a8:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = link->init_info.FC_BS;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = link->init_info.STmin;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029d0:	461d      	mov	r5, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f939 	bl	8001c50 <dlc2len>
 80029de:	4603      	mov	r3, r0
 80029e0:	3b03      	subs	r3, #3
 80029e2:	461a      	mov	r2, r3
 80029e4:	4629      	mov	r1, r5
 80029e6:	4620      	mov	r0, r4
 80029e8:	f010 fc11 	bl	801320e <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d148      	bne.n	8002aaa <rx_event_L_Data_indication+0x436>
      {
         link->rx_record.status = rx_tx_fc_wait_confirm;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8002a20:	e043      	b.n	8002aaa <rx_event_L_Data_indication+0x436>
      }
   }
   else if (link->rx_record.status == rx_tx_fc_overrun)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d13e      	bne.n	8002aaa <rx_event_L_Data_indication+0x436>
   {
      link->rx_record.last_msg.id = link->init_info.tx_id;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6852      	ldr	r2, [r2, #4]
 8002a32:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      link->rx_record.last_msg.data[0] = 0x32;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2232      	movs	r2, #50	; 0x32
 8002a3a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      link->rx_record.last_msg.data[1] = 0;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      link->rx_record.last_msg.data[2] = 0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      memset(&link->rx_record.last_msg.data[3], link->init_info.frame_pad, dlc2len(link->init_info.TX_DLC) - 3);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f8f4 	bl	8001c50 <dlc2len>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	3b03      	subs	r3, #3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4620      	mov	r0, r4
 8002a72:	f010 fbcc 	bl	801320e <memset>
      link->rx_record.last_msg.dlc = link->init_info.TX_DLC;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
      link->rx_record.last_msg_time_ms = link->current_time_ms;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      if (0 == link->init_info.L_Data_request(link, &link->rx_record.last_msg))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 8002a96:	4611      	mov	r1, r2
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <rx_event_L_Data_indication+0x436>
      {
         link->rx_record.status = rx_tx_fc_overrun_wait_confirm;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
      }
   }
   return 0;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdb0      	pop	{r4, r5, r7, pc}

08002ab4 <tx_event_poll_handle>:

static void tx_event_poll_handle(void *par_src)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
   tx_event_poll(par->link, par->user_ms);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f7ff fa4b 	bl	8001f66 <tx_event_poll>
   par->handle = (event_handle_t)0;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <tx_event_L_Data_Confirm_handle>:

static void tx_event_L_Data_Confirm_handle(void *par_src)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
   int8_t error = par->error;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	7a1b      	ldrb	r3, [r3, #8]
 8002aee:	72fb      	strb	r3, [r7, #11]
   par->handle = (event_handle_t)0;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
   tx_event_L_Data_Confirm(par->link, par->error);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7ff faba 	bl	800207c <tx_event_L_Data_Confirm>
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <tx_event_N_USData_Request_handle>:

static void tx_event_N_USData_Request_handle(void *par_src)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
   struct N_USData_request_par_t *par = (struct N_USData_request_par_t *)par_src;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
   tx_event_N_USData_Request(par->link, par->isFunction, par->payload, par->size);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6858      	ldr	r0, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	7a19      	ldrb	r1, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f7ff fb32 	bl	8002194 <tx_event_N_USData_Request>
   par->handle = (event_handle_t)0;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <tx_event_L_Data_indication_handle>:

static void tx_event_L_Data_indication_handle(void *par_src)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
   tx_event_L_Data_indication(par->link, &par->rx_msg);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3308      	adds	r3, #8
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7ff fc63 	bl	8002420 <tx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <rx_event_poll_handle>:

static void rx_event_poll_handle(void *par_src)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
   struct time_poll_par_t *par = (struct time_poll_par_t *)par_src;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60fb      	str	r3, [r7, #12]
   rx_event_handle_poll(par->link, par->user_ms);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f7ff fce0 	bl	8002544 <rx_event_handle_poll>
   par->handle = (event_handle_t)0;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <rx_event_L_Data_Confirm_handle>:

static void rx_event_L_Data_Confirm_handle(void *par_src)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   struct L_Data_confirm_par_t *par = (struct L_Data_confirm_par_t *)par_src;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
   int8_t error = par->error;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	7a1b      	ldrb	r3, [r3, #8]
 8002ba2:	72fb      	strb	r3, [r7, #11]
   par->handle = (event_handle_t)0;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
   rx_event_L_Data_Confirm(par->link, error);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fd3d 	bl	8002634 <rx_event_L_Data_Confirm>
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <rx_event_L_Data_indication_handle>:

static void rx_event_L_Data_indication_handle(void *par_src)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   struct L_Data_indication_par_t *par = (struct L_Data_indication_par_t *)par_src;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
   rx_event_L_Data_indication(par->link, &par->rx_msg);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f7ff fd4b 	bl	8002674 <rx_event_L_Data_indication>
   par->handle = (event_handle_t)0;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <iso_can_tp_create>:

//---------------------call interface------------------------
int iso_can_tp_create(can_iso_tp_link_t_p link, struct can_iso_tp_init_t *init)
{
 8002bec:	b5b0      	push	{r4, r5, r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
   if ((struct can_iso_tp_init_t *)0 == init)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <iso_can_tp_create+0x14>
   {
      return OP_NOK;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0bc      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   if ((can_iso_tp_link_t_p)0 == link)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <iso_can_tp_create+0x1e>
   {
      return OP_NOK;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0b7      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   if ((uint8_t *)0 == init->rx_buff)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <iso_can_tp_create+0x32>
   {
      printf_debug_msg(init, MODULE_PRINT "null rx_buff\n");
 8002c12:	495c      	ldr	r1, [pc, #368]	; (8002d84 <iso_can_tp_create+0x198>)
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f7ff f84f 	bl	8001cb8 <printf_debug_msg>
      return OP_NOK;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0ad      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   if (init->rx_buff_len < 8)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d805      	bhi.n	8002c32 <iso_can_tp_create+0x46>
   {
      printf_debug_msg(init, MODULE_PRINT "rx_buff_len should not less than 8\n");
 8002c26:	4958      	ldr	r1, [pc, #352]	; (8002d88 <iso_can_tp_create+0x19c>)
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f7ff f845 	bl	8001cb8 <printf_debug_msg>
      return OP_NOK;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0a3      	b.n	8002d7a <iso_can_tp_create+0x18e>
//   if (memcmp(&init->rx_id, &init->tx_id, sizeof(init->tx_id)) == 0)
//   {
//      printf_debug_msg(init, MODULE_PRINT "rx_id should not = tx_id\n");
//      return OP_NOK;
//   }
   if (memcmp(&init->funtion_id, &init->tx_id, sizeof(init->tx_id)) == 0)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f103 000c 	add.w	r0, r3, #12
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f010 fac7 	bl	80131d2 <memcmp>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <iso_can_tp_create+0x6a>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = tx_id\n");
 8002c4a:	4950      	ldr	r1, [pc, #320]	; (8002d8c <iso_can_tp_create+0x1a0>)
 8002c4c:	6838      	ldr	r0, [r7, #0]
 8002c4e:	f7ff f833 	bl	8001cb8 <printf_debug_msg>
      return OP_NOK;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e091      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   if (memcmp(&init->funtion_id, &init->rx_id, sizeof(init->tx_id)) == 0)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f103 000c 	add.w	r0, r3, #12
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	2204      	movs	r2, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	f010 fab5 	bl	80131d2 <memcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <iso_can_tp_create+0x8e>
   {
      printf_debug_msg(init, MODULE_PRINT "function_id should not = rx_id\n");
 8002c6e:	4948      	ldr	r1, [pc, #288]	; (8002d90 <iso_can_tp_create+0x1a4>)
 8002c70:	6838      	ldr	r0, [r7, #0]
 8002c72:	f7ff f821 	bl	8001cb8 <printf_debug_msg>
      return OP_NOK;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   if (init->tx_id.isRemote != 0)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	79db      	ldrb	r3, [r3, #7]
 8002c7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <iso_can_tp_create+0xae>
   {
      printf_debug_msg(init, MODULE_PRINT "tx frame should not be remote frame\n");
 8002c88:	4942      	ldr	r1, [pc, #264]	; (8002d94 <iso_can_tp_create+0x1a8>)
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	f7ff f814 	bl	8001cb8 <printf_debug_msg>
      init->tx_id.isRemote = 0;
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	79d3      	ldrb	r3, [r2, #7]
 8002c94:	f36f 13c7 	bfc	r3, #7, #1
 8002c98:	71d3      	strb	r3, [r2, #7]
   }
   if (init->funtion_id.isRemote != 0)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	7bdb      	ldrb	r3, [r3, #15]
 8002c9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <iso_can_tp_create+0xce>
   {
      printf_debug_msg(init, MODULE_PRINT "function frame should not be remote frame\n");
 8002ca8:	493b      	ldr	r1, [pc, #236]	; (8002d98 <iso_can_tp_create+0x1ac>)
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	f7ff f804 	bl	8001cb8 <printf_debug_msg>
      init->funtion_id.isRemote = 0;
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	7bd3      	ldrb	r3, [r2, #15]
 8002cb4:	f36f 13c7 	bfc	r3, #7, #1
 8002cb8:	73d3      	strb	r3, [r2, #15]
   }
   if (init->rx_id.isRemote != 0)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	7adb      	ldrb	r3, [r3, #11]
 8002cbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <iso_can_tp_create+0xee>
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame should not be remote frame\n");
 8002cc8:	4934      	ldr	r1, [pc, #208]	; (8002d9c <iso_can_tp_create+0x1b0>)
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	f7fe fff4 	bl	8001cb8 <printf_debug_msg>
      init->rx_id.isRemote = 0;
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	7ad3      	ldrb	r3, [r2, #11]
 8002cd4:	f36f 13c7 	bfc	r3, #7, #1
 8002cd8:	72d3      	strb	r3, [r2, #11]
   }
#ifdef SUPPORT_CAN_FD
   if (init->TX_DLC < 8)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002ce0:	2b07      	cmp	r3, #7
 8002ce2:	d807      	bhi.n	8002cf4 <iso_can_tp_create+0x108>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not less than 8\n");
 8002ce4:	492e      	ldr	r1, [pc, #184]	; (8002da0 <iso_can_tp_create+0x1b4>)
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	f7fe ffe6 	bl	8001cb8 <printf_debug_msg>
      init->TX_DLC = 8;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   }
   if (init->TX_DLC > 0xf)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	d907      	bls.n	8002d0e <iso_can_tp_create+0x122>
   {
      printf_debug_msg(init, MODULE_PRINT "TX_DLC can not more than 0xf\n");
 8002cfe:	4929      	ldr	r1, [pc, #164]	; (8002da4 <iso_can_tp_create+0x1b8>)
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f7fe ffd9 	bl	8001cb8 <printf_debug_msg>
      init->TX_DLC = 0xf;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	220f      	movs	r2, #15
 8002d0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   {
      printf_debug_msg(init, MODULE_PRINT "rx frame can not have can-fd frame, compile with maro SUPPORT_CAN_FD if you need can-fd support\n");
      return OP_NOK;
   }
#endif
   memset(link, 0, sizeof(struct can_iso_tp_link_t));
 8002d0e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8002d12:	2100      	movs	r1, #0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f010 fa7a 	bl	801320e <memset>
   link->init_info = *init;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4614      	mov	r4, r2
 8002d20:	461d      	mov	r5, r3
 8002d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d32:	e884 0003 	stmia.w	r4, {r0, r1}
   if (0 != event_manage_block_init(&link->rx_events.event_manage))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe ffcc 	bl	8001cda <event_manage_block_init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <iso_can_tp_create+0x168>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create rx_events manage block\n");
 8002d48:	4917      	ldr	r1, [pc, #92]	; (8002da8 <iso_can_tp_create+0x1bc>)
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f7fe ffb4 	bl	8001cb8 <printf_debug_msg>
      return OP_NOK;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e012      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   if (0 != event_manage_block_init(&link->tx_events.event_manage))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe ffbd 	bl	8001cda <event_manage_block_init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <iso_can_tp_create+0x186>
   {
      printf_debug_msg(init, MODULE_PRINT "can not create tx_events manage block\n");
 8002d66:	4911      	ldr	r1, [pc, #68]	; (8002dac <iso_can_tp_create+0x1c0>)
 8002d68:	6838      	ldr	r0, [r7, #0]
 8002d6a:	f7fe ffa5 	bl	8001cb8 <printf_debug_msg>
      return OP_NOK;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e003      	b.n	8002d7a <iso_can_tp_create+0x18e>
   }
   SET_INIT_DONE_FLAG(link);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <iso_can_tp_create+0x1c4>)
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
   return OP_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}
 8002d82:	bf00      	nop
 8002d84:	0801449c 	.word	0x0801449c
 8002d88:	080144b8 	.word	0x080144b8
 8002d8c:	080144e8 	.word	0x080144e8
 8002d90:	08014514 	.word	0x08014514
 8002d94:	08014540 	.word	0x08014540
 8002d98:	08014574 	.word	0x08014574
 8002d9c:	080145ac 	.word	0x080145ac
 8002da0:	080145e0 	.word	0x080145e0
 8002da4:	08014608 	.word	0x08014608
 8002da8:	08014634 	.word	0x08014634
 8002dac:	08014668 	.word	0x08014668
 8002db0:	74185295 	.word	0x74185295

08002db4 <iso_can_tp_poll>:

void iso_can_tp_poll(can_iso_tp_link_t_p link, unsigned int user_ms)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
   if (!CHECK_INIT_DONE_FLAG(link))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <iso_can_tp_poll+0xc0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d150      	bne.n	8002e6a <iso_can_tp_poll+0xb6>
   {
      return;
   }
   // Update internal timestamp
   link->current_time_ms = user_ms;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
   MCU_LOCK_ENTER_CRITICAL;
 8002dce:	f00f fda1 	bl	8012914 <vPortEnterCritical>
   if (link->rx_events.time_poll_par.handle == (event_handle_t)0)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d118      	bne.n	8002e0e <iso_can_tp_poll+0x5a>
   {
      link->rx_events.time_poll_par.handle = rx_event_poll_handle;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <iso_can_tp_poll+0xc4>)
 8002de0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
      MCU_LOCK_EXIT_CRITICAL;
 8002de4:	f00f fdc6 	bl	8012974 <vPortExitCritical>
      link->rx_events.time_poll_par.link = link;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
      link->rx_events.time_poll_par.user_ms = user_ms;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
      report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.time_poll_par);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fe ff83 	bl	8001d12 <report_event_to_manage_block>
 8002e0c:	e006      	b.n	8002e1c <iso_can_tp_poll+0x68>
   }
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
 8002e0e:	f00f fdb1 	bl	8012974 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new rx evnent when last is not done.\n");
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4919      	ldr	r1, [pc, #100]	; (8002e7c <iso_can_tp_poll+0xc8>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe ff4e 	bl	8001cb8 <printf_debug_msg>
   }

   MCU_LOCK_ENTER_CRITICAL;
 8002e1c:	f00f fd7a 	bl	8012914 <vPortEnterCritical>
   if (link->tx_events.time_poll_par.handle == (event_handle_t)0)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d117      	bne.n	8002e5a <iso_can_tp_poll+0xa6>
   {
      link->tx_events.time_poll_par.handle = tx_event_poll_handle;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <iso_can_tp_poll+0xcc>)
 8002e2e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
      MCU_LOCK_EXIT_CRITICAL;
 8002e32:	f00f fd9f 	bl	8012974 <vPortExitCritical>
      link->tx_events.time_poll_par.link = link;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      link->tx_events.time_poll_par.user_ms = user_ms;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
      report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.time_poll_par);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	33fc      	adds	r3, #252	; 0xfc
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f7fe ff5d 	bl	8001d12 <report_event_to_manage_block>
 8002e58:	e008      	b.n	8002e6c <iso_can_tp_poll+0xb8>
   }
   else
   {
      MCU_LOCK_EXIT_CRITICAL;
 8002e5a:	f00f fd8b 	bl	8012974 <vPortExitCritical>
      printf_debug_msg(&link->init_info, "iso_can_tp_poll cannot insert new tx evnent when last is not done.\n");
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4908      	ldr	r1, [pc, #32]	; (8002e84 <iso_can_tp_poll+0xd0>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe ff28 	bl	8001cb8 <printf_debug_msg>
 8002e68:	e000      	b.n	8002e6c <iso_can_tp_poll+0xb8>
      return;
 8002e6a:	bf00      	nop
   }
}
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	74185295 	.word	0x74185295
 8002e78:	08002b69 	.word	0x08002b69
 8002e7c:	0801469c 	.word	0x0801469c
 8002e80:	08002ab5 	.word	0x08002ab5
 8002e84:	080146e0 	.word	0x080146e0

08002e88 <iso_can_tp_L_Data_confirm>:

int iso_can_tp_L_Data_confirm(can_iso_tp_link_t_p link, const struct CAN_msg *msg, int8_t error)
{
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
   int res = OP_NOK;
 8002e96:	2301      	movs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
   if ((can_iso_tp_link_t_p)0 == link)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <iso_can_tp_L_Data_confirm+0x1c>
   {
      return OP_NOK;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0a5      	b.n	8002ff0 <iso_can_tp_L_Data_confirm+0x168>
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4a53      	ldr	r2, [pc, #332]	; (8002ff8 <iso_can_tp_L_Data_confirm+0x170>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d001      	beq.n	8002eb2 <iso_can_tp_L_Data_confirm+0x2a>
   {
      return OP_NOK;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e09e      	b.n	8002ff0 <iso_can_tp_L_Data_confirm+0x168>
   }
   if (msg != (const struct CAN_msg *)0)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 809a 	beq.w	8002fee <iso_can_tp_L_Data_confirm+0x166>
   {
      // RX task only focuses on sending completed flow control messages, other messages regardless, TX task does not care about sending completed flow control messages
      if ((msg->data[0] & 0xf0) == 0x30)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	795b      	ldrb	r3, [r3, #5]
 8002ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec2:	2b30      	cmp	r3, #48	; 0x30
 8002ec4:	d155      	bne.n	8002f72 <iso_can_tp_L_Data_confirm+0xea>
      {
         if ((msg->id.isExt == link->rx_record.last_msg.id.isExt) 
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	78db      	ldrb	r3, [r3, #3]
 8002eca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8002ed6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 8086 	bne.w	8002fee <iso_can_tp_L_Data_confirm+0x166>
             && (msg->id.id == link->rx_record.last_msg.id.id) 
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ef0:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d17a      	bne.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
             && (0 == memcmp(msg->data, link->rx_record.last_msg.data, dlc2len(link->rx_record.last_msg.dlc))))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1d5c      	adds	r4, r3, #5
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f203 154d 	addw	r5, r3, #333	; 0x14d
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fea1 	bl	8001c50 <dlc2len>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	4629      	mov	r1, r5
 8002f14:	4620      	mov	r0, r4
 8002f16:	f010 f95c 	bl	80131d2 <memcmp>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d166      	bne.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
         {
            MCU_LOCK_ENTER_CRITICAL;
 8002f20:	f00f fcf8 	bl	8012914 <vPortEnterCritical>
            if (link->rx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d119      	bne.n	8002f62 <iso_can_tp_L_Data_confirm+0xda>
            {
               link->rx_events.L_Data_confirm_par.handle = rx_event_L_Data_Confirm_handle;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a32      	ldr	r2, [pc, #200]	; (8002ffc <iso_can_tp_L_Data_confirm+0x174>)
 8002f32:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
               MCU_LOCK_EXIT_CRITICAL;
 8002f36:	f00f fd1d 	bl	8012974 <vPortExitCritical>
               link->rx_events.L_Data_confirm_par.link = link;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
               link->rx_events.L_Data_confirm_par.error = error;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_confirm_par);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fe feda 	bl	8001d12 <report_event_to_manage_block>
 8002f5e:	6178      	str	r0, [r7, #20]
 8002f60:	e045      	b.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8002f62:	f00f fd07 	bl	8012974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new rx evnent when last is not done.\n");
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4925      	ldr	r1, [pc, #148]	; (8003000 <iso_can_tp_L_Data_confirm+0x178>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fea4 	bl	8001cb8 <printf_debug_msg>
 8002f70:	e03d      	b.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
            }
         }
      }
      else
      {
         if ((msg->id.isExt == link->tx_record.last_msg.id.isExt) 
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	78db      	ldrb	r3, [r3, #3]
 8002f76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d130      	bne.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
             && (msg->id.id == link->tx_record.last_msg.id.id))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d126      	bne.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
         {
            MCU_LOCK_ENTER_CRITICAL;
 8002fa0:	f00f fcb8 	bl	8012914 <vPortEnterCritical>
            if (link->tx_events.L_Data_confirm_par.handle == (event_handle_t)0)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d118      	bne.n	8002fe0 <iso_can_tp_L_Data_confirm+0x158>
            {
               link->tx_events.L_Data_confirm_par.handle = tx_event_L_Data_Confirm_handle;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <iso_can_tp_L_Data_confirm+0x17c>)
 8002fb2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
               MCU_LOCK_EXIT_CRITICAL;
 8002fb6:	f00f fcdd 	bl	8012974 <vPortExitCritical>
               link->tx_events.L_Data_confirm_par.link = link;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
               link->tx_events.L_Data_confirm_par.error = error;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	79fa      	ldrb	r2, [r7, #7]
 8002fc6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_confirm_par);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	33f0      	adds	r3, #240	; 0xf0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f7fe fe9b 	bl	8001d12 <report_event_to_manage_block>
 8002fdc:	6178      	str	r0, [r7, #20]
 8002fde:	e006      	b.n	8002fee <iso_can_tp_L_Data_confirm+0x166>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8002fe0:	f00f fcc8 	bl	8012974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_confirm cannot insert new tx event when last is not done.\n");
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <iso_can_tp_L_Data_confirm+0x180>)
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fe65 	bl	8001cb8 <printf_debug_msg>
   }
   else
   {
      // no need to print info
   }
   return res;
 8002fee:	697b      	ldr	r3, [r7, #20]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff8:	74185295 	.word	0x74185295
 8002ffc:	08002b93 	.word	0x08002b93
 8003000:	08014724 	.word	0x08014724
 8003004:	08002adf 	.word	0x08002adf
 8003008:	08014768 	.word	0x08014768

0800300c <iso_can_tp_L_Data_indication>:

int iso_can_tp_L_Data_indication(can_iso_tp_link_t_p link, const struct CAN_msg *msg)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
   int res = OP_NOK;
 8003016:	2301      	movs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
   if ((can_iso_tp_link_t_p)0 == link)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <iso_can_tp_L_Data_indication+0x18>
   {
      return OP_NOK;
 8003020:	2301      	movs	r3, #1
 8003022:	e09f      	b.n	8003164 <iso_can_tp_L_Data_indication+0x158>
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <iso_can_tp_L_Data_indication+0x160>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d001      	beq.n	8003032 <iso_can_tp_L_Data_indication+0x26>
   {
      return OP_NOK;
 800302e:	2301      	movs	r3, #1
 8003030:	e098      	b.n	8003164 <iso_can_tp_L_Data_indication+0x158>
   }
   if (msg)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8094 	beq.w	8003162 <iso_can_tp_L_Data_indication+0x156>
   {
      // ignore remote frames
      if (msg->id.isRemote != 0)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	78db      	ldrb	r3, [r3, #3]
 800303e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <iso_can_tp_L_Data_indication+0x40>
      {
         return OP_NOK;
 8003048:	2301      	movs	r3, #1
 800304a:	e08b      	b.n	8003164 <iso_can_tp_L_Data_indication+0x158>
      {
         printf_debug_msg(&link->init_info, "L_Data_indication cannot handle CANFD frame when SUPPORT_CAN_FD is not defined.\n");
         return OP_NOK;
      }
#endif
      if (((msg->id.isExt == link->init_info.rx_id.isExt) && (msg->id.id == link->init_info.rx_id.id)) 
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003054:	b2da      	uxtb	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7adb      	ldrb	r3, [r3, #11]
 800305a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	429a      	cmp	r2, r3
 8003062:	d109      	bne.n	8003078 <iso_can_tp_L_Data_indication+0x6c>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 021c 	ubfx	r2, r3, #0, #29
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8003074:	429a      	cmp	r2, r3
 8003076:	d015      	beq.n	80030a4 <iso_can_tp_L_Data_indication+0x98>
          || ((msg->id.isExt == link->init_info.funtion_id.isExt) && (msg->id.id == link->init_info.funtion_id.id)))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	78db      	ldrb	r3, [r3, #3]
 800307c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7bdb      	ldrb	r3, [r3, #15]
 8003086:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	429a      	cmp	r2, r3
 800308e:	d168      	bne.n	8003162 <iso_can_tp_L_Data_indication+0x156>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3c3 021c 	ubfx	r2, r3, #0, #29
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d15e      	bne.n	8003162 <iso_can_tp_L_Data_indication+0x156>
      {
         // TX task only pays attention to receiving flow control message, other receive message can be ignored, RX task no matter receiving flow control message
         if ((msg->data[0] & 0xf0) == 0x30)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	795b      	ldrb	r3, [r3, #5]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ac:	2b30      	cmp	r3, #48	; 0x30
 80030ae:	d12b      	bne.n	8003108 <iso_can_tp_L_Data_indication+0xfc>
         {
            MCU_LOCK_ENTER_CRITICAL;
 80030b0:	f00f fc30 	bl	8012914 <vPortEnterCritical>
            if (link->tx_events.L_Data_indication_par.handle == (event_handle_t)0)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11c      	bne.n	80030f8 <iso_can_tp_L_Data_indication+0xec>
            {
               link->tx_events.L_Data_indication_par.handle = tx_event_L_Data_indication_handle;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <iso_can_tp_L_Data_indication+0x164>)
 80030c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
               MCU_LOCK_EXIT_CRITICAL;
 80030c6:	f00f fc55 	bl	8012974 <vPortExitCritical>
               link->tx_events.L_Data_indication_par.link = link;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
               link->tx_events.L_Data_indication_par.rx_msg = *msg;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	33a8      	adds	r3, #168	; 0xa8
 80030d8:	4611      	mov	r1, r2
 80030da:	2248      	movs	r2, #72	; 0x48
 80030dc:	4618      	mov	r0, r3
 80030de:	f010 f888 	bl	80131f2 <memcpy>
               res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.L_Data_indication_par);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	33a0      	adds	r3, #160	; 0xa0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7fe fe0f 	bl	8001d12 <report_event_to_manage_block>
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	e034      	b.n	8003162 <iso_can_tp_L_Data_indication+0x156>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 80030f8:	f00f fc3c 	bl	8012974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new tx event when last is not done.\n");
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	491d      	ldr	r1, [pc, #116]	; (8003174 <iso_can_tp_L_Data_indication+0x168>)
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe fdd9 	bl	8001cb8 <printf_debug_msg>
 8003106:	e02c      	b.n	8003162 <iso_can_tp_L_Data_indication+0x156>
            }
         }
         else
         {
            MCU_LOCK_ENTER_CRITICAL;
 8003108:	f00f fc04 	bl	8012914 <vPortEnterCritical>
            if (link->rx_events.L_Data_indication_par.handle == (event_handle_t)0)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11e      	bne.n	8003154 <iso_can_tp_L_Data_indication+0x148>
            {
               link->rx_events.L_Data_indication_par.handle = rx_event_L_Data_indication_handle;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <iso_can_tp_L_Data_indication+0x16c>)
 800311a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
               MCU_LOCK_EXIT_CRITICAL;
 800311e:	f00f fc29 	bl	8012974 <vPortExitCritical>
               link->rx_events.L_Data_indication_par.link = link;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
               link->rx_events.L_Data_indication_par.rx_msg = *msg;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8003132:	4611      	mov	r1, r2
 8003134:	2248      	movs	r2, #72	; 0x48
 8003136:	4618      	mov	r0, r3
 8003138:	f010 f85b 	bl	80131f2 <memcpy>
               res = report_event_to_manage_block(&link->rx_events.event_manage, &link->rx_events.L_Data_indication_par);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fe fde1 	bl	8001d12 <report_event_to_manage_block>
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	e006      	b.n	8003162 <iso_can_tp_L_Data_indication+0x156>
            }
            else
            {
               MCU_LOCK_EXIT_CRITICAL;
 8003154:	f00f fc0e 	bl	8012974 <vPortExitCritical>
               printf_debug_msg(&link->init_info, "L_Data_indication cannot insert new rx event when last is not done.\n");
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <iso_can_tp_L_Data_indication+0x170>)
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fdab 	bl	8001cb8 <printf_debug_msg>
            }
         }
      }
   }
   return res;
 8003162:	68fb      	ldr	r3, [r7, #12]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	74185295 	.word	0x74185295
 8003170:	08002b3f 	.word	0x08002b3f
 8003174:	080147ac 	.word	0x080147ac
 8003178:	08002bc3 	.word	0x08002bc3
 800317c:	080147f4 	.word	0x080147f4

08003180 <iso_can_tp_N_USData_request>:

int iso_can_tp_N_USData_request(can_iso_tp_link_t_p link, uint8_t isFunction, const uint8_t payload[], uint32_t size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	460b      	mov	r3, r1
 800318e:	72fb      	strb	r3, [r7, #11]
   int res = OP_NOK;
 8003190:	2301      	movs	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
   
   if ((can_iso_tp_link_t_p)0 == link)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <iso_can_tp_N_USData_request+0x1e>
   {
      return OP_NOK;
 800319a:	2301      	movs	r3, #1
 800319c:	e04d      	b.n	800323a <iso_can_tp_N_USData_request+0xba>
   }
   if (!CHECK_INIT_DONE_FLAG(link))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	4a28      	ldr	r2, [pc, #160]	; (8003244 <iso_can_tp_N_USData_request+0xc4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d001      	beq.n	80031ac <iso_can_tp_N_USData_request+0x2c>
   {
      return OP_NOK;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e046      	b.n	800323a <iso_can_tp_N_USData_request+0xba>
   }
   if ((const uint8_t *)0 == payload)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <iso_can_tp_N_USData_request+0x42>
   {
      res = OP_NOK;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
      printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when payload == (const uint8_t*)0\n");
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4923      	ldr	r1, [pc, #140]	; (8003248 <iso_can_tp_N_USData_request+0xc8>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fd7c 	bl	8001cb8 <printf_debug_msg>
 80031c0:	e03a      	b.n	8003238 <iso_can_tp_N_USData_request+0xb8>
   }
   else
   {
      if (0 == size)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <iso_can_tp_N_USData_request+0x58>
      {
         res = OP_NOK;
 80031c8:	2301      	movs	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
         printf_debug_msg(&link->init_info, MODULE_PRINT "can not tx diag request when size == 0\n");
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	491f      	ldr	r1, [pc, #124]	; (800324c <iso_can_tp_N_USData_request+0xcc>)
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fd71 	bl	8001cb8 <printf_debug_msg>
 80031d6:	e02f      	b.n	8003238 <iso_can_tp_N_USData_request+0xb8>
      }
      else
      {
         MCU_LOCK_ENTER_CRITICAL;
 80031d8:	f00f fb9c 	bl	8012914 <vPortEnterCritical>
         if (link->tx_events.N_USData_request_par.handle == (event_handle_t)0)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d121      	bne.n	800322a <iso_can_tp_N_USData_request+0xaa>
         {
            link->tx_events.N_USData_request_par.handle = tx_event_N_USData_Request_handle;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <iso_can_tp_N_USData_request+0xd0>)
 80031ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MCU_LOCK_EXIT_CRITICAL;
 80031ee:	f00f fbc1 	bl	8012974 <vPortExitCritical>
            link->tx_events.N_USData_request_par.link = link;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            link->tx_events.N_USData_request_par.isFunction = isFunction;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	7afa      	ldrb	r2, [r7, #11]
 80031fe:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            link->tx_events.N_USData_request_par.payload = payload;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            link->tx_events.N_USData_request_par.size = size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            res = report_event_to_manage_block(&link->tx_events.event_manage, &link->tx_events.N_USData_request_par);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7fe fd76 	bl	8001d12 <report_event_to_manage_block>
 8003226:	6178      	str	r0, [r7, #20]
 8003228:	e006      	b.n	8003238 <iso_can_tp_N_USData_request+0xb8>
         }
         else
         {
            MCU_LOCK_EXIT_CRITICAL;
 800322a:	f00f fba3 	bl	8012974 <vPortExitCritical>
            printf_debug_msg(&link->init_info, "N_USData_request cannot insert new tx event when last is not done.\n");
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4908      	ldr	r1, [pc, #32]	; (8003254 <iso_can_tp_N_USData_request+0xd4>)
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fd40 	bl	8001cb8 <printf_debug_msg>
         }
      }
   }
   return res;
 8003238:	697b      	ldr	r3, [r7, #20]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	74185295 	.word	0x74185295
 8003248:	0801483c 	.word	0x0801483c
 800324c:	08014884 	.word	0x08014884
 8003250:	08002b11 	.word	0x08002b11
 8003254:	080148b8 	.word	0x080148b8

08003258 <QueueInit>:
#include "can_iso_tp_mcu_lock.h"

/*Queue Init*/
uint8_t
QueueInit(struct FifoQueue *Queue, ElemType *dat, uint16_t queue_size)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
   uint8_t ret = (0 == 1);
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
   Queue->queue_size = queue_size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	809a      	strh	r2, [r3, #4]
   Queue->dat = dat;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	601a      	str	r2, [r3, #0]
   if ((Queue->dat != (ElemType *)0) && (Queue->queue_size != 0))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <QueueInit+0x44>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	889b      	ldrh	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <QueueInit+0x44>
   {
      Queue->front = 0;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	80da      	strh	r2, [r3, #6]
      Queue->rear = 0;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	811a      	strh	r2, [r3, #8]
      ;
      Queue->count = 0;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	815a      	strh	r2, [r3, #10]
      ret = (1 == 1);
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
   }
   return ret;
 800329c:	7dfb      	ldrb	r3, [r7, #23]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <QueueIn>:

/* Queue In */
uint8_t
QueueIn(register struct FifoQueue *Queue, ElemType sdat)
{
 80032aa:	b590      	push	{r4, r7, lr}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4604      	mov	r4, r0
 80032b2:	6079      	str	r1, [r7, #4]
   MCU_LOCK_ENTER_CRITICAL;
 80032b4:	f00f fb2e 	bl	8012914 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == Queue->queue_size))
 80032b8:	88e2      	ldrh	r2, [r4, #6]
 80032ba:	8923      	ldrh	r3, [r4, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <QueueIn+0x26>
 80032c0:	8962      	ldrh	r2, [r4, #10]
 80032c2:	88a3      	ldrh	r3, [r4, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d103      	bne.n	80032d0 <QueueIn+0x26>
   {
      MCU_LOCK_EXIT_CRITICAL;
 80032c8:	f00f fb54 	bl	8012974 <vPortExitCritical>
      return QueueFull;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e016      	b.n	80032fe <QueueIn+0x54>
   }
   else
   {
      Queue->dat[Queue->rear] = sdat;
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	8923      	ldrh	r3, [r4, #8]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
      Queue->rear = (Queue->rear + 1) % Queue->queue_size;
 80032dc:	8923      	ldrh	r3, [r4, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	88a2      	ldrh	r2, [r4, #4]
 80032e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80032e6:	fb01 f202 	mul.w	r2, r1, r2
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	8123      	strh	r3, [r4, #8]
      Queue->count = Queue->count + 1;
 80032f0:	8963      	ldrh	r3, [r4, #10]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 80032f8:	f00f fb3c 	bl	8012974 <vPortExitCritical>
      return QueueOperateOk;
 80032fc:	2302      	movs	r3, #2
   }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bd90      	pop	{r4, r7, pc}

08003306 <QueueOut>:

/* Queue Out*/
uint8_t
QueueOut(register struct FifoQueue *Queue, ElemType *sdat)
{
 8003306:	b590      	push	{r4, r7, lr}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	4604      	mov	r4, r0
 800330e:	6079      	str	r1, [r7, #4]
   MCU_LOCK_ENTER_CRITICAL;
 8003310:	f00f fb00 	bl	8012914 <vPortEnterCritical>
   if ((Queue->front == Queue->rear) && (Queue->count == 0))
 8003314:	88e2      	ldrh	r2, [r4, #6]
 8003316:	8923      	ldrh	r3, [r4, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d106      	bne.n	800332a <QueueOut+0x24>
 800331c:	8963      	ldrh	r3, [r4, #10]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <QueueOut+0x24>
   {
      MCU_LOCK_EXIT_CRITICAL;
 8003322:	f00f fb27 	bl	8012974 <vPortExitCritical>
      return QueueEmpty;
 8003326:	2301      	movs	r3, #1
 8003328:	e017      	b.n	800335a <QueueOut+0x54>
   }
   else
   {
      *sdat = Queue->dat[Queue->front];
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	88e3      	ldrh	r3, [r4, #6]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
      Queue->front = (Queue->front + 1) % Queue->queue_size;
 8003338:	88e3      	ldrh	r3, [r4, #6]
 800333a:	3301      	adds	r3, #1
 800333c:	88a2      	ldrh	r2, [r4, #4]
 800333e:	fb93 f1f2 	sdiv	r1, r3, r2
 8003342:	fb01 f202 	mul.w	r2, r1, r2
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	80e3      	strh	r3, [r4, #6]
      Queue->count = Queue->count - 1;
 800334c:	8963      	ldrh	r3, [r4, #10]
 800334e:	3b01      	subs	r3, #1
 8003350:	b29b      	uxth	r3, r3
 8003352:	8163      	strh	r3, [r4, #10]
      MCU_LOCK_EXIT_CRITICAL;
 8003354:	f00f fb0e 	bl	8012974 <vPortExitCritical>
      return QueueOperateOk;
 8003358:	2302      	movs	r3, #2
   }
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}

08003362 <mcu_lock_init>:
#include <stdint.h>
#include "can_iso_tp_mcu_lock.h"

void mcu_lock_init(mcu_lock_t *lock)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
   *lock = 0;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <mcu_lock_try_lock>:

unsigned int mcu_lock_try_lock(register mcu_lock_t *lock)
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4604      	mov	r4, r0
   register volatile cpu_status_t cpu_sr;
   register unsigned int ret = (0 == 1);
 8003384:	2500      	movs	r5, #0
   if (0 == *lock)
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <mcu_lock_try_lock+0x24>
   {
      MCU_LOCK_ENTER_CRITICAL;
 800338c:	f00f fac2 	bl	8012914 <vPortEnterCritical>
      if (0 == *lock)
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <mcu_lock_try_lock+0x20>
      {
         *lock = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	6023      	str	r3, [r4, #0]
         ret = (1 == 1);
 800339a:	2501      	movs	r5, #1
      }
      MCU_LOCK_EXIT_CRITICAL;
 800339c:	f00f faea 	bl	8012974 <vPortExitCritical>
   }
   return ret;
 80033a0:	462b      	mov	r3, r5
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bdb0      	pop	{r4, r5, r7, pc}

080033aa <mcu_lock_unlock>:

void mcu_lock_unlock(mcu_lock_t *lock)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
      {
         *lock = false;
      }
      MCU_LOCK_EXIT_CRITICAL;
   }*/
   *lock = 0;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <lan9252_cmd_read>:
#include "lan9252.h"
#include "spiDma.h"

static void lan9252_cmd_read(uint16_t address)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
   uint8_t command[4] = {0u};
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_FAST_READ;
 80033d2:	230b      	movs	r3, #11
 80033d4:	733b      	strb	r3, [r7, #12]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	b29b      	uxth	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	737b      	strb	r3, [r7, #13]
   command[2] = (uint8_t)(address & 0xFF);
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	73bb      	strb	r3, [r7, #14]
   command[3] = (uint8_t)(0x01);
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]

   /* Send the command to Lan9252. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	2204      	movs	r2, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4803      	ldr	r0, [pc, #12]	; (8003400 <lan9252_cmd_read+0x3c>)
 80033f4:	f005 fa54 	bl	80088a0 <SpiDma_write>
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000a9c 	.word	0x20000a9c

08003404 <lan9252_cmd_write>:

static void lan9252_cmd_write(uint16_t address)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
   uint8_t command[3] = {0u};
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <lan9252_cmd_write+0x40>)
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	81bb      	strh	r3, [r7, #12]
 8003414:	2300      	movs	r3, #0
 8003416:	73bb      	strb	r3, [r7, #14]

   /* Prepare the data structure contains read command. */
   command[0] = (uint8_t)LAN9252_ESC_CMD_SERIAL_WRITE;
 8003418:	2302      	movs	r3, #2
 800341a:	733b      	strb	r3, [r7, #12]
   command[1] = (uint8_t)((address >> 8u) & 0xFF);
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	b29b      	uxth	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	737b      	strb	r3, [r7, #13]
   command[2] = (uint8_t)(address & 0xFF);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	73bb      	strb	r3, [r7, #14]

   /* Send the command to tmc slave. */
   SpiDma_write(&spiDmaModule, (uint8_t *)&command[0], sizeof(command));
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2203      	movs	r2, #3
 8003432:	4619      	mov	r1, r3
 8003434:	4804      	ldr	r0, [pc, #16]	; (8003448 <lan9252_cmd_write+0x44>)
 8003436:	f005 fa33 	bl	80088a0 <SpiDma_write>
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	080148fc 	.word	0x080148fc
 8003448:	20000a9c 	.word	0x20000a9c

0800344c <lan9252_Init>:

void lan9252_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
   /* Initialize the SPI DMA module. */
   SpiDma_Init(&spiDmaModule);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <lan9252_Init+0x10>)
 8003452:	f005 f9d7 	bl	8008804 <SpiDma_Init>

   /* Verify the connection with Lan9252. */

   /* Reset all register status of lan9252. */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000a9c 	.word	0x20000a9c

08003460 <lan9252_read_data>:
{
   SpiDma_Deinit(&spiDmaModule);
}

void lan9252_read_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	803b      	strh	r3, [r7, #0]
   uint8_t iter = 0u;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
   uint8_t *tx_dummy_arr = pvPortMalloc(len);
 8003474:	883b      	ldrh	r3, [r7, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f00f fb6e 	bl	8012b58 <pvPortMalloc>
 800347c:	60b8      	str	r0, [r7, #8]

   /* Prepare the tx data dummy. */
   for (iter = 0U; iter < len; iter++)
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	e007      	b.n	8003494 <lan9252_read_data+0x34>
   {
      tx_dummy_arr[iter] = 0xFFu;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4413      	add	r3, r2
 800348a:	22ff      	movs	r2, #255	; 0xff
 800348c:	701a      	strb	r2, [r3, #0]
   for (iter = 0U; iter < len; iter++)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3301      	adds	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	b29b      	uxth	r3, r3
 8003498:	883a      	ldrh	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d8f2      	bhi.n	8003484 <lan9252_read_data+0x24>
   }

   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 800349e:	2101      	movs	r1, #1
 80034a0:	480b      	ldr	r0, [pc, #44]	; (80034d0 <lan9252_read_data+0x70>)
 80034a2:	f005 f9db 	bl	800885c <SpiDma_CsPinChangeState>

   /* Send Read command to address. */
   lan9252_cmd_read(address);
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff8b 	bl	80033c4 <lan9252_cmd_read>

   /* Read data. */
   SpiDma_read(&spiDmaModule, data_ptr, tx_dummy_arr, len);
 80034ae:	883b      	ldrh	r3, [r7, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <lan9252_read_data+0x70>)
 80034b6:	f005 fa3d 	bl	8008934 <SpiDma_read>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 80034ba:	2100      	movs	r1, #0
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <lan9252_read_data+0x70>)
 80034be:	f005 f9cd 	bl	800885c <SpiDma_CsPinChangeState>

   /* Clear the data. */
   vPortFree(tx_dummy_arr);
 80034c2:	68b8      	ldr	r0, [r7, #8]
 80034c4:	f00f fc14 	bl	8012cf0 <vPortFree>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000a9c 	.word	0x20000a9c

080034d4 <lan9252_read_32>:

   return ret;
}

uint32_t lan9252_read_32(uint16_t address)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
   uint32_t ret = 0u;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
   uint8_t buffer[4] = {0u};
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]

   lan9252_read_data(buffer, address, sizeof(buffer));
 80034e6:	88f9      	ldrh	r1, [r7, #6]
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	2204      	movs	r2, #4
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ffb6 	bl	8003460 <lan9252_read_data>

   ret = (((uint32_t)buffer[3] << 24u) |
 80034f4:	7afb      	ldrb	r3, [r7, #11]
 80034f6:	061a      	lsls	r2, r3, #24
          ((uint32_t)buffer[2] << 16u) |
 80034f8:	7abb      	ldrb	r3, [r7, #10]
 80034fa:	041b      	lsls	r3, r3, #16
   ret = (((uint32_t)buffer[3] << 24u) |
 80034fc:	431a      	orrs	r2, r3
          ((uint32_t)buffer[1] << 8u) |
 80034fe:	7a7b      	ldrb	r3, [r7, #9]
 8003500:	021b      	lsls	r3, r3, #8
          ((uint32_t)buffer[2] << 16u) |
 8003502:	4313      	orrs	r3, r2
          ((uint32_t)buffer[0] << 0u));
 8003504:	7a3a      	ldrb	r2, [r7, #8]
   ret = (((uint32_t)buffer[3] << 24u) |
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

   return ret;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <lan9252_write_data>:

void lan9252_write_data(uint8_t *data_ptr, uint16_t address, uint16_t len)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	803b      	strh	r3, [r7, #0]
   /* Change the CS pin to active state. */
   SpiDma_CsPinChangeState(&spiDmaModule, true);
 8003524:	2101      	movs	r1, #1
 8003526:	480a      	ldr	r0, [pc, #40]	; (8003550 <lan9252_write_data+0x3c>)
 8003528:	f005 f998 	bl	800885c <SpiDma_CsPinChangeState>

   /* Send request write. */
   lan9252_cmd_write(address);
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff68 	bl	8003404 <lan9252_cmd_write>

   /* Send data to lan9252. */
   SpiDma_write (&spiDmaModule, data_ptr, len);
 8003534:	883b      	ldrh	r3, [r7, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <lan9252_write_data+0x3c>)
 800353c:	f005 f9b0 	bl	80088a0 <SpiDma_write>

   /* Change the CS pin to inactive state. */
   SpiDma_CsPinChangeState(&spiDmaModule, false);
 8003540:	2100      	movs	r1, #0
 8003542:	4803      	ldr	r0, [pc, #12]	; (8003550 <lan9252_write_data+0x3c>)
 8003544:	f005 f98a 	bl	800885c <SpiDma_CsPinChangeState>
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000a9c 	.word	0x20000a9c

08003554 <lan9252_write_32>:

   lan9252_write_data (data, address, 2);
}

void lan9252_write_32 (uint16_t address, uint32_t value)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	80fb      	strh	r3, [r7, #6]
   uint8_t data[4] = {0u};
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]

   data[0] = (uint8_t)(value & 0xFF);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	733b      	strb	r3, [r7, #12]
   data[1] = (uint8_t)((value >> 8u) & 0xFF);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	b2db      	uxtb	r3, r3
 8003570:	737b      	strb	r3, [r7, #13]
   data[2] = (uint8_t)((value >> 16u) & 0xFF);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b2db      	uxtb	r3, r3
 8003578:	73bb      	strb	r3, [r7, #14]
   data[3] = (uint8_t)((value >> 24u) & 0xFF);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	0e1b      	lsrs	r3, r3, #24
 800357e:	b2db      	uxtb	r3, r3
 8003580:	73fb      	strb	r3, [r7, #15]

   lan9252_write_data (data, address, 4u);
 8003582:	88f9      	ldrh	r1, [r7, #6]
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2204      	movs	r2, #4
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ffc2 	bl	8003514 <lan9252_write_data>
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <md80_UpdateCommandFrame>:
      return (0);
   }
}

static void md80_UpdateCommandFrame(tMd80_Device *const me)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
   switch (me->local.mode)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d859      	bhi.n	800365e <md80_UpdateCommandFrame+0xc6>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <md80_UpdateCommandFrame+0x18>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035c5 	.word	0x080035c5
 80035b4:	08003601 	.word	0x08003601
 80035b8:	0800363d 	.word	0x0800363d
 80035bc:	0800365f 	.word	0x0800365f
 80035c0:	080035df 	.word	0x080035df
   {
   case MD80_IDLE:
      me->local.command.toMd80.length = 2u;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
      me->local.command.toMd80.data[0] = MD80_FRAME_GET_INFO;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2205      	movs	r2, #5
 80035d0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
      me->local.command.toMd80.data[1] = 0x00;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
      break;
 80035dc:	e040      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>

   case MD80_IMPEDANCE:
      if (true == me->config.isRegularsAdjust)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <md80_UpdateCommandFrame+0x60>
      {
         /* Pack ImpedanceFrame */
         md80_PackImpedanceFrame(me);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 faab 	bl	8003b44 <md80_PackImpedanceFrame>

         /* Reset flag. */
         me->config.isRegularsAdjust = false;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      else
      {
         /* Pack Motion Target Frame */
         md80_PackMotionTargetsFrame(me);
      }
      break;
 80035f6:	e033      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>
         md80_PackMotionTargetsFrame(me);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fb51 	bl	8003ca0 <md80_PackMotionTargetsFrame>
      break;
 80035fe:	e02f      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>

   case MD80_POSITION_PID:
      if (true == me->config.isRegularsAdjust)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <md80_UpdateCommandFrame+0x82>
      {
         /* Pack PositionFrame */
         md80_PackPositionFrame(me);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fad4 	bl	8003bb8 <md80_PackPositionFrame>

         /* Reset flag. */
         me->config.isRegularsAdjust = false;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      else
      {
         /* packMotionTargetsFrame */
         md80_PackMotionTargetsFrame(me);
      }
      break;
 8003618:	e022      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>
      else if (true == me->config.isVelocityRegulatorAdjust)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <md80_UpdateCommandFrame+0x9c>
         md80_PackVelocityFrame(me);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb01 	bl	8003c2c <md80_PackVelocityFrame>
         me->config.isVelocityRegulatorAdjust = false;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      break;
 8003632:	e015      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>
         md80_PackMotionTargetsFrame(me);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb33 	bl	8003ca0 <md80_PackMotionTargetsFrame>
      break;
 800363a:	e011      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>

   case MD80_VELOCITY_PID:
      if (true == me->config.isVelocityRegulatorAdjust)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <md80_UpdateCommandFrame+0xbe>
      {
         /* packVelocityFrame */
         md80_PackVelocityFrame(me);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 faf0 	bl	8003c2c <md80_PackVelocityFrame>

         /* Reset flag. */
         me->config.isVelocityRegulatorAdjust = false;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      else
      {
         /* packMotionTargetsFrame */
         md80_PackMotionTargetsFrame(me);
      }
      break;
 8003654:	e004      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>
         md80_PackMotionTargetsFrame(me);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb22 	bl	8003ca0 <md80_PackMotionTargetsFrame>
      break;
 800365c:	e000      	b.n	8003660 <md80_UpdateCommandFrame+0xc8>

   default:
      break;
 800365e:	bf00      	nop
   }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <md80_Transmit>:

static bool md80_Transmit(tMd80_Device *const me, uint32_t timeout)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
   bool ret = false;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
   uint32_t timeoutTemp = timeout;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	60bb      	str	r3, [r7, #8]

   do
   {
      ret = canIdle_Send(me->config.canId, me->local.command.toMd80.data, me->local.command.toMd80.length);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7818      	ldrb	r0, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 71d5 	add.w	r1, r3, #426	; 0x1aa
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 800368a:	461a      	mov	r2, r3
 800368c:	f7fe f8bc 	bl	8001808 <canIdle_Send>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]

      if (ret)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d108      	bne.n	80036ac <md80_Transmit+0x44>
      {
         break;
      }
      osDelay(1);
 800369a:	2001      	movs	r0, #1
 800369c:	f00c fe32 	bl	8010304 <osDelay>

   } while (timeoutTemp--);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	60ba      	str	r2, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e7      	bne.n	800367a <md80_Transmit+0x12>
 80036aa:	e000      	b.n	80036ae <md80_Transmit+0x46>
         break;
 80036ac:	bf00      	nop

   if (true == ret)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d029      	beq.n	8003708 <md80_Transmit+0xa0>
   {
      timeoutTemp = timeout;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	60bb      	str	r3, [r7, #8]

      while (timeoutTemp--)
 80036b8:	e021      	b.n	80036fe <md80_Transmit+0x96>
      {
         if (true == canIdle_Read(&me->local.response.canId, me->local.response.fromMd80.data, (uint8_t *)&me->local.response.fromMd80.length))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 70e5 	add.w	r0, r3, #458	; 0x1ca
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 71e6 	add.w	r1, r3, #460	; 0x1cc
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 13cb 	addw	r3, r3, #459	; 0x1cb
 80036cc:	461a      	mov	r2, r3
 80036ce:	f7fe f907 	bl	80018e0 <canIdle_Read>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <md80_Transmit+0x8c>
         {
            ret = (me->local.response.canId == me->config.canId) ? true : false;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
            if (ret)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <md80_Transmit+0x90>
            {
               break;
 80036f2:	e009      	b.n	8003708 <md80_Transmit+0xa0>
            }
         }
         else
         {
            ret = false;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
         }
         osDelay(1);
 80036f8:	2001      	movs	r0, #1
 80036fa:	f00c fe03 	bl	8010304 <osDelay>
      while (timeoutTemp--)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	1e5a      	subs	r2, r3, #1
 8003702:	60ba      	str	r2, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1d8      	bne.n	80036ba <md80_Transmit+0x52>
      }
   }

   return ret;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <md80_Init>:

void md80_Init(tMd80_Device *const me)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]

}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <md80_UpdateRespondeData>:
{

}

void md80_UpdateRespondeData(tMd80_Device *const me, tMd80_ResponseFrame *const respFrame)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
   if ((me->config.canId != respFrame->canId) || (respFrame->fromMd80.data[0] != MD80_RESPONSE_DEFAULT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d128      	bne.n	800378e <md80_UpdateRespondeData+0x68>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	789b      	ldrb	r3, [r3, #2]
 8003740:	2ba0      	cmp	r3, #160	; 0xa0
 8003742:	d124      	bne.n	800378e <md80_UpdateRespondeData+0x68>
   {
      return;
   }

   me->output.errorVector = *(uint16_t *)&respFrame->fromMd80.data[1];
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3303      	adds	r3, #3
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   me->output.temperature = respFrame->fromMd80.data[3];
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	795a      	ldrb	r2, [r3, #5]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   me->output.position = *(float *)&respFrame->fromMd80.data[4];
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	3306      	adds	r3, #6
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
   me->output.velocity = *(float *)&respFrame->fromMd80.data[8];
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	330a      	adds	r3, #10
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58
   me->output.torque = *(float *)&respFrame->fromMd80.data[12];
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	330e      	adds	r3, #14
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	65da      	str	r2, [r3, #92]	; 0x5c
   me->output.encoderPosition = *(float *)&respFrame->fromMd80.data[16];
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3312      	adds	r3, #18
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	661a      	str	r2, [r3, #96]	; 0x60
   me->output.encoderVelocity = *(float *)&respFrame->fromMd80.data[20];
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3316      	adds	r3, #22
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	665a      	str	r2, [r3, #100]	; 0x64
 800378c:	e000      	b.n	8003790 <md80_UpdateRespondeData+0x6a>
      return;
 800378e:	bf00      	nop
}
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <md80_ConfigBlink>:

bool md80_ConfigBlink(tMd80_Device *const me)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
   bool ret = false;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
   me->local.command.toMd80.data[0] = MD80_FRAME_FLASH_LED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9

   if (true == md80_Transmit(me, 500))
 80037be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff50 	bl	8003668 <md80_Transmit>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <md80_ConfigBlink+0x38>
   {
      ret = true;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
   }

   return ret;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <md80_SetEncoderZero>:

bool md80_SetEncoderZero(tMd80_Device *const me)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
   bool ret = false;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]

   me->local.command.toMd80.data[0] = MD80_FRAME_ZERO_ENCODER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   me->local.command.toMd80.length = 2u;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9

   if (true == md80_Transmit(me, 50))
 8003800:	2132      	movs	r1, #50	; 0x32
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ff30 	bl	8003668 <md80_Transmit>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00f      	beq.n	800382e <md80_SetEncoderZero+0x52>
   {
      /* Set target position to 0.0f to avoid jerk at startup */
      md80_SendMotionCommand(me, 0.0f, 0.0f, 0.0f);
 800380e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8003838 <md80_SetEncoderZero+0x5c>
 8003812:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003838 <md80_SetEncoderZero+0x5c>
 8003816:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003838 <md80_SetEncoderZero+0x5c>
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f80e 	bl	800383c <md80_SendMotionCommand>

      /* Set target position. */
      md80_SetTargetPosition(me, 0.0f);
 8003820:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003838 <md80_SetEncoderZero+0x5c>
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f960 	bl	8003aea <md80_SetTargetPosition>

      ret = true;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
   }

   return (ret);
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	00000000 	.word	0x00000000

0800383c <md80_SendMotionCommand>:

void md80_SendMotionCommand(tMd80_Device *const me, float pos, float vel, float torque)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	ed87 0a02 	vstr	s0, [r7, #8]
 8003848:	edc7 0a01 	vstr	s1, [r7, #4]
 800384c:	ed87 1a00 	vstr	s2, [r7]
   me->local.command.toMd80.length = 16U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2210      	movs	r2, #16
 8003854:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2214      	movs	r2, #20
 800385c:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = vel;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = pos;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = torque;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	601a      	str	r2, [r3, #0]

   if (true == md80_Transmit(me, 100))
 8003886:	2164      	movs	r1, #100	; 0x64
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff feed 	bl	8003668 <md80_Transmit>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <md80_SendMotionCommand+0x66>
   {
      md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 800389a:	4619      	mov	r1, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff ff42 	bl	8003726 <md80_UpdateRespondeData>
   }
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <md80_SetCurrentLimit>:

bool md80_SetCurrentLimit(tMd80_Device *const me, float currentLimit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	ed87 0a00 	vstr	s0, [r7]
   bool ret = false;
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]

   if (MD80_DRIVER_MAXCURRENT < currentLimit)
 80038bc:	edd7 7a00 	vldr	s15, [r7]
 80038c0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800393c <md80_SetCurrentLimit+0x90>
 80038c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	dd02      	ble.n	80038d4 <md80_SetCurrentLimit+0x28>
   {
      currentLimit = MD80_DRIVER_MAXCURRENT;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <md80_SetCurrentLimit+0x94>)
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	e00b      	b.n	80038ec <md80_SetCurrentLimit+0x40>
   }
   else if (MD80_DRIVER_MINCURRENT > currentLimit)
 80038d4:	edd7 7a00 	vldr	s15, [r7]
 80038d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	d502      	bpl.n	80038ec <md80_SetCurrentLimit+0x40>
   {
      currentLimit = MD80_DRIVER_MINCURRENT;
 80038e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038ea:	603b      	str	r3, [r7, #0]
   }

   me->local.command.toMd80.data[0] = MD80_FRAME_BASE_CONFIG;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2204      	movs	r2, #4
 80038f0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   me->local.command.toMd80.length = 6u;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2206      	movs	r2, #6
 8003900:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
   *(float *)&me->local.command.toMd80.data[2] = currentLimit;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	601a      	str	r2, [r3, #0]

   if (true == md80_Transmit(me, 50))
 800390e:	2132      	movs	r1, #50	; 0x32
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fea9 	bl	8003668 <md80_Transmit>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <md80_SetCurrentLimit+0x84>
   {
      if (MD80_FRAME_BASE_CONFIG == me->local.response.fromMd80.data[0])
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003922:	2b04      	cmp	r3, #4
 8003924:	d104      	bne.n	8003930 <md80_SetCurrentLimit+0x84>
      {
         me->config.currentMax = currentLimit;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	60da      	str	r2, [r3, #12]
         ret = true;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
   }

   return (ret);
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	42200000 	.word	0x42200000
 8003940:	42200000 	.word	0x42200000

08003944 <md80_ControlMd80Mode>:

bool md80_ControlMd80Mode(tMd80_Device *const me, tMd80_Mode mode)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
   bool ret = false;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

   me->local.command.toMd80.data[0] = MD80_FRAME_CONTROL_SELECT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)mode;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2203      	movs	r2, #3
 8003970:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9

   if (true == md80_Transmit(me, 50))
 8003974:	2132      	movs	r1, #50	; 0x32
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe76 	bl	8003668 <md80_Transmit>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <md80_ControlMd80Mode+0x4a>
   {
      me->local.mode = mode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
      ret = true;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
   }

   return ret;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <md80_ControlMd80Enable>:

bool md80_ControlMd80Enable(tMd80_Device *const me, bool enable)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
   bool ret = false;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]

   me->local.command.toMd80.data[0] = MD80_FRAME_MOTOR_ENABLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   me->local.command.toMd80.data[2] = (uint8_t)enable;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
   me->local.command.toMd80.length = 3u;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2203      	movs	r2, #3
 80039c4:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9

   if (true == md80_Transmit(me, 50))
 80039c8:	2132      	movs	r1, #50	; 0x32
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fe4c 	bl	8003668 <md80_Transmit>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <md80_ControlMd80Enable+0x4a>
   {
      me->local.isEnabled = true;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
      ret = true;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
   }

   return ret;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <md80_MainFunction>:

void md80_MainFunction(tMd80_Device *const me)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
   if ((true == me->config.isMd80Detected) && (true == me->local.isEnabled))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d015      	beq.n	8003a2a <md80_MainFunction+0x3e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <md80_MainFunction+0x3e>
   {
      md80_UpdateCommandFrame(me);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff fdc5 	bl	8003598 <md80_UpdateCommandFrame>

      if (true == md80_Transmit(me, 100))
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fe29 	bl	8003668 <md80_Transmit>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <md80_MainFunction+0x3e>
      {
         md80_UpdateRespondeData(me, (tMd80_ResponseFrame *)&me->local.response);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 73e5 	add.w	r3, r3, #458	; 0x1ca
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fe7e 	bl	8003726 <md80_UpdateRespondeData>
      }
   }
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <md80_SetPositionControllerParams>:
void md80_SetPositionControllerParams(tMd80_Device *const me,
                                      float kp,
                                      float ki,
                                      float kd,
                                      float iWindup)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6178      	str	r0, [r7, #20]
 8003a3a:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a3e:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a42:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a46:	edc7 1a01 	vstr	s3, [r7, #4]
   me->config.isRegularsAdjust = true;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   me->config.positionController.kp = kp;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	621a      	str	r2, [r3, #32]
   me->config.positionController.ki = ki;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
   me->config.positionController.kd = kd;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
   me->config.positionController.i_windup = iWindup;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <md80_SetVelocityControllerParams>:
void md80_SetVelocityControllerParams(tMd80_Device *const me,
                                      float kp,
                                      float ki,
                                      float kd,
                                      float iWindup)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6178      	str	r0, [r7, #20]
 8003a7e:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a82:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a86:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a8a:	edc7 1a01 	vstr	s3, [r7, #4]
   me->config.velocityController.kp = kp;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	611a      	str	r2, [r3, #16]
   me->config.velocityController.ki = ki;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	615a      	str	r2, [r3, #20]
   me->config.velocityController.kd = kd;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	619a      	str	r2, [r3, #24]
   me->config.velocityController.i_windup = iWindup;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	61da      	str	r2, [r3, #28]
   me->config.isVelocityRegulatorAdjust = true;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <md80_SetImpedanceControllerParams>:

void md80_SetImpedanceControllerParams(tMd80_Device *const me, float kp, float kd)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ac6:	edc7 0a01 	vstr	s1, [r7, #4]
   me->config.impedanceController.kp = kp;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
   me->config.impedanceController.kd = kd;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34
   me->config.isRegularsAdjust = true;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <md80_SetTargetPosition>:
   me->config.velocityMax = maxVelocity;
   me->config.isVelocityAdjust = true;
}

void md80_SetTargetPosition(tMd80_Device *const me, float pos)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	ed87 0a00 	vstr	s0, [r7]
   me->input.position = pos;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <md80_SetTargetVelocity>:

void md80_SetTargetVelocity(tMd80_Device *const me, float vel)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	ed87 0a00 	vstr	s0, [r7]
   me->input.velocity = vel;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <md80_SetTorque>:

void md80_SetTorque(tMd80_Device *const me, float torque)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	ed87 0a00 	vstr	s0, [r7]
   me->input.torque = torque;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <md80_PackImpedanceFrame>:
void md80_ConfigCanBaudrate(tMd80_Device *const me, tMd80_Baudrate canBaudrate)
{
}

void md80_PackImpedanceFrame(tMd80_Device *const me)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 32u;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_IMP_CONTROL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2212      	movs	r2, #18
 8003b58:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.impedanceController.kp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b6e:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = me->config.impedanceController.kd;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b7a:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = me->input.position;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b86:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[14] = me->input.velocity;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b92:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[18] = me->input.torque;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b9e:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[22] = me->config.torqueMax;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6852      	ldr	r2, [r2, #4]
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <md80_PackPositionFrame>:

void md80_PackPositionFrame(tMd80_Device *const me)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 32;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_POS_CONTROL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2210      	movs	r2, #16
 8003bcc:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.positionController.kp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6a12      	ldr	r2, [r2, #32]
 8003be2:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = me->config.positionController.ki;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = me->config.positionController.kd;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bfa:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[14] = me->config.positionController.i_windup;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c06:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[18] = me->config.velocityMax;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6892      	ldr	r2, [r2, #8]
 8003c12:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[22] = me->input.position;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c1e:	601a      	str	r2, [r3, #0]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <md80_PackVelocityFrame>:

void md80_PackVelocityFrame(tMd80_Device *const me)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 32;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_VEL_CONTROL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2211      	movs	r2, #17
 8003c40:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   *(float *)&me->local.command.toMd80.data[2] = me->config.velocityController.kp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6912      	ldr	r2, [r2, #16]
 8003c56:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[6] = me->config.velocityController.ki;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6952      	ldr	r2, [r2, #20]
 8003c62:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[10] = me->config.velocityController.kd;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6992      	ldr	r2, [r2, #24]
 8003c6e:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[14] = me->config.velocityController.i_windup;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	69d2      	ldr	r2, [r2, #28]
 8003c7a:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[18] = me->config.torqueMax;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6852      	ldr	r2, [r2, #4]
 8003c86:	601a      	str	r2, [r3, #0]
   *(float *)&me->local.command.toMd80.data[22] = me->input.velocity;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c92:	601a      	str	r2, [r3, #0]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <md80_PackMotionTargetsFrame>:
void md80_PackMotionTargetsFrame(tMd80_Device *const me)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
   me->local.command.toMd80.length = 24;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2218      	movs	r2, #24
 8003cac:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
   me->local.command.toMd80.data[0] = MD80_FRAME_SET_MOTION_TARGETS;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2214      	movs	r2, #20
 8003cb4:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
   me->local.command.toMd80.data[1] = 0x00;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
   memcpy((uint8_t *)&me->local.command.toMd80.data[2], (uint8_t *)&me->input.velocity, sizeof(float));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	324c      	adds	r2, #76	; 0x4c
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[6], (uint8_t *)&me->input.position, sizeof(float));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	3248      	adds	r2, #72	; 0x48
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[10], (uint8_t *)&me->input.torque, sizeof(float));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	3250      	adds	r2, #80	; 0x50
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[14], (uint8_t *)&me->config.torqueMax, sizeof(float));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	3204      	adds	r2, #4
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	601a      	str	r2, [r3, #0]
   memcpy((uint8_t *)&me->local.command.toMd80.data[18], (uint8_t *)&me->config.velocityMax, sizeof(float));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	3208      	adds	r2, #8
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60ba      	str	r2, [r7, #8]
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	81fb      	strh	r3, [r7, #14]
 8003d22:	460b      	mov	r3, r1
 8003d24:	737b      	strb	r3, [r7, #13]
   if (IS_RXPDO (index) ||
 8003d26:	89fb      	ldrh	r3, [r7, #14]
 8003d28:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8003d2c:	d303      	bcc.n	8003d36 <ESC_download_pre_objecthandler+0x22>
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003d34:	d311      	bcc.n	8003d5a <ESC_download_pre_objecthandler+0x46>
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8003d3c:	d303      	bcc.n	8003d46 <ESC_download_pre_objecthandler+0x32>
       IS_TXPDO (index) ||
 8003d3e:	89fb      	ldrh	r3, [r7, #14]
 8003d40:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003d44:	d309      	bcc.n	8003d5a <ESC_download_pre_objecthandler+0x46>
 8003d46:	89fb      	ldrh	r3, [r7, #14]
 8003d48:	f641 4212 	movw	r2, #7186	; 0x1c12
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <ESC_download_pre_objecthandler+0x46>
       index == RX_PDO_OBJIDX ||
 8003d50:	89fb      	ldrh	r3, [r7, #14]
 8003d52:	f641 4213 	movw	r2, #7187	; 0x1c13
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d112      	bne.n	8003d80 <ESC_download_pre_objecthandler+0x6c>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
 8003d5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	0bdb      	lsrs	r3, r3, #15
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	75fb      	strb	r3, [r7, #23]
      if (subindex > minSub && COE_maxSub (index) != 0)
 8003d66:	7b7a      	ldrb	r2, [r7, #13]
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d908      	bls.n	8003d80 <ESC_download_pre_objecthandler+0x6c>
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f004 f995 	bl	80080a0 <COE_maxSub>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <ESC_download_pre_objecthandler+0x6c>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <ESC_download_pre_objecthandler+0x94>)
 8003d7e:	e00f      	b.n	8003da0 <ESC_download_pre_objecthandler+0x8c>
      }
   }

   if (ESCvar.pre_object_download_hook)
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <ESC_download_pre_objecthandler+0x98>)
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <ESC_download_pre_objecthandler+0x8a>
   {
      return (ESCvar.pre_object_download_hook) (index,
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <ESC_download_pre_objecthandler+0x98>)
 8003d8a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8003d8c:	7b79      	ldrb	r1, [r7, #13]
 8003d8e:	89f8      	ldrh	r0, [r7, #14]
 8003d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	47a0      	blx	r4
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	e000      	b.n	8003da0 <ESC_download_pre_objecthandler+0x8c>
            data,
            size,
            flags);
   }

   return 0;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}
 8003da8:	06010003 	.word	0x06010003
 8003dac:	2000154c 	.word	0x2000154c

08003db0 <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	717b      	strb	r3, [r7, #5]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <ESC_download_post_objecthandler+0x34>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <ESC_download_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <ESC_download_post_objecthandler+0x34>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	7979      	ldrb	r1, [r7, #5]
 8003dd2:	88f8      	ldrh	r0, [r7, #6]
 8003dd4:	4798      	blx	r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	e000      	b.n	8003ddc <ESC_download_post_objecthandler+0x2c>
   }

   return 0;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	2000154c 	.word	0x2000154c

08003de8 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	4603      	mov	r3, r0
 8003df4:	81fb      	strh	r3, [r7, #14]
 8003df6:	460b      	mov	r3, r1
 8003df8:	737b      	strb	r3, [r7, #13]
   if (ESCvar.pre_object_upload_hook != NULL)
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <ESC_upload_pre_objecthandler+0x3c>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <ESC_upload_pre_objecthandler+0x30>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <ESC_upload_pre_objecthandler+0x3c>)
 8003e04:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003e06:	7b79      	ldrb	r1, [r7, #13]
 8003e08:	89f8      	ldrh	r0, [r7, #14]
 8003e0a:	8c3b      	ldrh	r3, [r7, #32]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	47a0      	blx	r4
 8003e14:	4603      	mov	r3, r0
 8003e16:	e000      	b.n	8003e1a <ESC_upload_pre_objecthandler+0x32>
            data,
            size,
            flags);
   }

   return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd90      	pop	{r4, r7, pc}
 8003e22:	bf00      	nop
 8003e24:	2000154c 	.word	0x2000154c

08003e28 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
 8003e32:	460b      	mov	r3, r1
 8003e34:	717b      	strb	r3, [r7, #5]
 8003e36:	4613      	mov	r3, r2
 8003e38:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_upload_hook != NULL)
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <ESC_upload_post_objecthandler+0x34>)
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <ESC_upload_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <ESC_upload_post_objecthandler+0x34>)
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	7979      	ldrb	r1, [r7, #5]
 8003e4a:	88f8      	ldrh	r0, [r7, #6]
 8003e4c:	4798      	blx	r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	e000      	b.n	8003e54 <ESC_upload_post_objecthandler+0x2c>
   }

   return 0;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	2000154c 	.word	0x2000154c

08003e60 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <APP_safeoutput+0x18>)
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <APP_safeoutput+0x12>
   {
      (ESCvar.safeoutput_override)();
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <APP_safeoutput+0x18>)
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	4798      	blx	r3
   }
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000154c 	.word	0x2000154c

08003e7c <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <TXPDO_update+0x3c>)
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <TXPDO_update+0x3c>)
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 8003e8e:	e010      	b.n	8003eb2 <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <TXPDO_update+0x3c>)
 8003e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <TXPDO_update+0x40>)
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4809      	ldr	r0, [pc, #36]	; (8003ec0 <TXPDO_update+0x44>)
 8003e9c:	f004 f840 	bl	8007f20 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <TXPDO_update+0x3c>)
 8003ea2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4905      	ldr	r1, [pc, #20]	; (8003ec0 <TXPDO_update+0x44>)
 8003eaa:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003eae:	f004 fbe9 	bl	8008684 <ESC_write>
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000154c 	.word	0x2000154c
 8003ebc:	200013cc 	.word	0x200013cc
 8003ec0:	20001e40 	.word	0x20001e40

08003ec4 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <RXPDO_update+0x3c>)
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <RXPDO_update+0x3c>)
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 8003ed6:	e010      	b.n	8003efa <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <RXPDO_update+0x3c>)
 8003eda:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4908      	ldr	r1, [pc, #32]	; (8003f04 <RXPDO_update+0x40>)
 8003ee2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003ee6:	f004 fb6b 	bl	80085c0 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <RXPDO_update+0x3c>)
 8003eec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ef0:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <RXPDO_update+0x44>)
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4803      	ldr	r0, [pc, #12]	; (8003f04 <RXPDO_update+0x40>)
 8003ef6:	f004 f875 	bl	8007fe4 <COE_pdoUnpack>
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000154c 	.word	0x2000154c
 8003f04:	20001c40 	.word	0x20001c40
 8003f08:	200012ac 	.word	0x200012ac

08003f0c <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	dd46      	ble.n	8003fae <DIG_process+0xa2>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <DIG_process+0x154>)
 8003f22:	f3bf 8f5b 	dmb	ish
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3bf 8f5b 	dmb	ish
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dd0c      	ble.n	8003f4a <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <DIG_process+0x154>)
 8003f32:	f3bf 8f5b 	dmb	ish
 8003f36:	e853 2f00 	ldrex	r2, [r3]
 8003f3a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003f3e:	e843 2100 	strex	r1, r2, [r3]
 8003f42:	2900      	cmp	r1, #0
 8003f44:	d1f7      	bne.n	8003f36 <DIG_process+0x2a>
 8003f46:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8003f4a:	4b45      	ldr	r3, [pc, #276]	; (8004060 <DIG_process+0x154>)
 8003f4c:	f3bf 8f5b 	dmb	ish
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3bf 8f5b 	dmb	ish
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	dc14      	bgt.n	8003f84 <DIG_process+0x78>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8003f5a:	4b42      	ldr	r3, [pc, #264]	; (8004064 <DIG_process+0x158>)
 8003f5c:	f3bf 8f5b 	dmb	ish
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	f3bf 8f5b 	dmb	ish
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dd09      	ble.n	8003f84 <DIG_process+0x78>
           (ESCvar.ESC_SM2_sml > 0))
 8003f70:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <DIG_process+0x15c>)
 8003f72:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <DIG_process+0x78>
      {
         DPRINT("DIG_process watchdog expired\n");
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 8003f7a:	211b      	movs	r1, #27
 8003f7c:	2014      	movs	r0, #20
 8003f7e:	f000 f919 	bl	80041b4 <ESC_ALstatusgotoerror>
 8003f82:	e014      	b.n	8003fae <DIG_process+0xa2>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 8003f84:	4b37      	ldr	r3, [pc, #220]	; (8004064 <DIG_process+0x158>)
 8003f86:	f3bf 8f5b 	dmb	ish
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f3bf 8f5b 	dmb	ish
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <DIG_process+0xa2>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8003f9a:	4b33      	ldr	r3, [pc, #204]	; (8004068 <DIG_process+0x15c>)
 8003f9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <DIG_process+0x154>)
 8003fa4:	f3bf 8f5b 	dmb	ish
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dd30      	ble.n	800401a <DIG_process+0x10e>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <DIG_process+0x158>)
 8003fba:	f3bf 8f5b 	dmb	ish
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f3bf 8f5b 	dmb	ish
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dd15      	ble.n	8003ffa <DIG_process+0xee>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <DIG_process+0x15c>)
 8003fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <DIG_process+0xee>
      {
         RXPDO_update();
 8003fdc:	f7ff ff72 	bl	8003ec4 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <DIG_process+0x15c>)
 8003fe2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <DIG_process+0x154>)
 8003fea:	f3bf 8f5b 	dmb	ish
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 8003ff4:	f004 fd47 	bl	8008a86 <cb_set_outputs>
 8003ff8:	e00f      	b.n	800401a <DIG_process+0x10e>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <DIG_process+0x15c>)
 8003ffc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <DIG_process+0x10e>
      {
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8004008:	4b17      	ldr	r3, [pc, #92]	; (8004068 <DIG_process+0x15c>)
 800400a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800400e:	461a      	mov	r2, r3
 8004010:	4916      	ldr	r1, [pc, #88]	; (800406c <DIG_process+0x160>)
 8004012:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8004016:	f004 fad3 	bl	80085c0 <ESC_read>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	dd06      	ble.n	8004032 <DIG_process+0x126>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <DIG_process+0x15c>)
 8004026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <DIG_process+0x126>
      {
         (ESCvar.application_hook)();
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <DIG_process+0x15c>)
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	dd0c      	ble.n	8004056 <DIG_process+0x14a>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <DIG_process+0x158>)
 800403e:	f3bf 8f5b 	dmb	ish
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f3bf 8f5b 	dmb	ish
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <DIG_process+0x14a>
      {
         /* Update inputs */
         cb_get_inputs();
 800404e:	f004 fd13 	bl	8008a78 <cb_get_inputs>
         TXPDO_update();
 8004052:	f7ff ff13 	bl	8003e7c <TXPDO_update>
      }
   }
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20001c38 	.word	0x20001c38
 8004064:	20001635 	.word	0x20001635
 8004068:	2000154c 	.word	0x2000154c
 800406c:	20001c40 	.word	0x20001c40

08004070 <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8004074:	2204      	movs	r2, #4
 8004076:	4910      	ldr	r1, [pc, #64]	; (80040b8 <ecat_slv_poll+0x48>)
 8004078:	f44f 6011 	mov.w	r0, #2320	; 0x910
 800407c:	f004 faa0 	bl	80085c0 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <ecat_slv_poll+0x4c>)
 8004082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004086:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <ecat_slv_poll+0x4c>)
 8004088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

   /* Check the state machine */
   ESC_state();
 800408c:	f001 f880 	bl	8005190 <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 8004090:	f000 ff70 	bl	8004f74 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8004094:	f000 fc9a 	bl	80049cc <ESC_mbxprocess>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <ecat_slv_poll+0x36>
   {
      ESC_coeprocess();
 800409e:	f003 fae5 	bl	800766c <ESC_coeprocess>
      ESC_foeprocess();
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 80040a2:	f000 fdcb 	bl	8004c3c <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <ecat_slv_poll+0x4c>)
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <ecat_slv_poll+0x44>
   {
      (ESCvar.esc_hw_eep_handler)();
 80040ae:	4b03      	ldr	r3, [pc, #12]	; (80040bc <ecat_slv_poll+0x4c>)
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	4798      	blx	r3
   }
}
 80040b4:	bf00      	nop
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	2000162c 	.word	0x2000162c
 80040bc:	2000154c 	.word	0x2000154c

080040c0 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 80040c4:	f7ff ffd4 	bl	8004070 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 80040c8:	200f      	movs	r0, #15
 80040ca:	f7ff ff1f 	bl	8003f0c <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a16      	ldr	r2, [pc, #88]	; (800413c <ecat_slv_init+0x68>)
 80040e2:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 fabd 	bl	8005664 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f004 fb2c 	bl	8008748 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 80040f0:	e00b      	b.n	800410a <ecat_slv_init+0x36>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 80040f2:	2202      	movs	r2, #2
 80040f4:	4912      	ldr	r1, [pc, #72]	; (8004140 <ecat_slv_init+0x6c>)
 80040f6:	f44f 7088 	mov.w	r0, #272	; 0x110
 80040fa:	f004 fa61 	bl	80085c0 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <ecat_slv_init+0x70>)
 8004100:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <ecat_slv_init+0x70>)
 8004106:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <ecat_slv_init+0x70>)
 800410c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ec      	beq.n	80040f2 <ecat_slv_init+0x1e>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8004118:	2001      	movs	r0, #1
 800411a:	f000 f82f 	bl	800417c <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 800411e:	2000      	movs	r0, #0
 8004120:	f000 f812 	bl	8004148 <ESC_ALerror>
   ESC_stopmbx ();
 8004124:	f000 fa9a 	bl	800465c <ESC_stopmbx>
   ESC_stopinput ();
 8004128:	f000 fec6 	bl	8004eb8 <ESC_stopinput>
   ESC_stopoutput ();
 800412c:	f000 ff0a 	bl	8004f44 <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 8004130:	f003 fe8a 	bl	8007e48 <COE_initDefaultValues>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20001c38 	.word	0x20001c38
 8004140:	200015d2 	.word	0x200015d2
 8004144:	2000154c 	.word	0x2000154c

08004148 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <ESC_ALerror+0x30>)
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   dummy = htoes (errornumber);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800415e:	f107 030e 	add.w	r3, r7, #14
 8004162:	2202      	movs	r2, #2
 8004164:	4619      	mov	r1, r3
 8004166:	f44f 709a 	mov.w	r0, #308	; 0x134
 800416a:	f004 fa8b 	bl	8008684 <ESC_write>
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	2000154c 	.word	0x2000154c

0800417c <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <ESC_ALstatus+0x34>)
 800418c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
   dummy = htoes ((uint16_t) status);
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	b29b      	uxth	r3, r3
 8004194:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 8004196:	f107 030e 	add.w	r3, r7, #14
 800419a:	2202      	movs	r2, #2
 800419c:	4619      	mov	r1, r3
 800419e:	f44f 7098 	mov.w	r0, #304	; 0x130
 80041a2:	f004 fa6f 	bl	8008684 <ESC_write>
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000154c 	.word	0x2000154c

080041b4 <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	460a      	mov	r2, r1
 80041be:	71fb      	strb	r3, [r7, #7]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d145      	bne.n	800425a <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 80041ce:	4b25      	ldr	r3, [pc, #148]	; (8004264 <ESC_ALstatusgotoerror+0xb0>)
 80041d0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	73bb      	strb	r3, [r7, #14]
   an = as;
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	b25a      	sxtb	r2, r3
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	4313      	orrs	r3, r2
 80041f4:	b25b      	sxtb	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <ESC_ALstatusgotoerror+0xb0>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <ESC_ALstatusgotoerror+0xb0>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f107 010f 	add.w	r1, r7, #15
 800420a:	f107 020e 	add.w	r2, r7, #14
 800420e:	4610      	mov	r0, r2
 8004210:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <ESC_ALstatusgotoerror+0xb4>)
 8004214:	f3bf 8f5b 	dmb	ish
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	f3bf 8f5b 	dmb	ish
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	dd01      	ble.n	800422c <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 8004228:	f000 fe8c 	bl	8004f44 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 800422c:	88bb      	ldrh	r3, [r7, #4]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff8a 	bl	8004148 <ESC_ALerror>
   ESC_ALstatus(status);
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ffa0 	bl	800417c <ESC_ALstatus>
   an = status;
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <ESC_ALstatusgotoerror+0xb0>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <ESC_ALstatusgotoerror+0xb0>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f107 010f 	add.w	r1, r7, #15
 8004250:	f107 020e 	add.w	r2, r7, #14
 8004254:	4610      	mov	r0, r2
 8004256:	4798      	blx	r3
 8004258:	e000      	b.n	800425c <ESC_ALstatusgotoerror+0xa8>
      return;
 800425a:	bf00      	nop
   }
}
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000154c 	.word	0x2000154c
 8004268:	20001635 	.word	0x20001635

0800426c <ESC_ALeventmaskwrite>:
/** Write ALeventMask register 0x204.
 *
 * @param[in] n   = AL Event Mask
 */
void ESC_ALeventmaskwrite (uint32_t mask)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
   uint32_t aleventmask;
   aleventmask = htoel(mask);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60fb      	str	r3, [r7, #12]
   ESC_write (ESCREG_ALEVENTMASK, &aleventmask, sizeof(aleventmask));
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	2204      	movs	r2, #4
 800427e:	4619      	mov	r1, r3
 8004280:	f44f 7001 	mov.w	r0, #516	; 0x204
 8004284:	f004 f9fe 	bl	8008684 <ESC_write>
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	b29b      	uxth	r3, r3
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f603 0306 	addw	r3, r3, #2054	; 0x806
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f107 010f 	add.w	r1, r7, #15
 80042ac:	2201      	movs	r2, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 f986 	bl	80085c0 <ESC_read>
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	3317      	adds	r3, #23
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <ESC_SMstatus+0x3c>)
 80042ce:	4413      	add	r3, r2
 80042d0:	3304      	adds	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f603 0305 	addw	r3, r3, #2053	; 0x805
 80042e0:	b298      	uxth	r0, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3305      	adds	r3, #5
 80042e6:	2201      	movs	r2, #1
 80042e8:	4619      	mov	r1, r3
 80042ea:	f004 f969 	bl	80085c0 <ESC_read>
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000154c 	.word	0x2000154c

080042fc <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	3317      	adds	r3, #23
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <ESC_SMwritepdi+0x3c>)
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	b29b      	uxth	r3, r3
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	b29b      	uxth	r3, r3
 800431c:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8004320:	b298      	uxth	r0, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3307      	adds	r3, #7
 8004326:	2201      	movs	r2, #1
 8004328:	4619      	mov	r1, r3
 800432a:	f004 f9ab 	bl	8008684 <ESC_write>
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2000154c 	.word	0x2000154c

0800433c <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	3317      	adds	r3, #23
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <ESC_SMenable+0x38>)
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	79db      	ldrb	r3, [r3, #7]
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ffc9 	bl	80042fc <ESC_SMwritepdi>
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000154c 	.word	0x2000154c

08004378 <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	3317      	adds	r3, #23
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <ESC_SMdisable+0x38>)
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	79db      	ldrb	r3, [r3, #7]
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ffab 	bl	80042fc <ESC_SMwritepdi>
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	2000154c 	.word	0x2000154c

080043b4 <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 80043b8:	2202      	movs	r2, #2
 80043ba:	4906      	ldr	r1, [pc, #24]	; (80043d4 <ESC_address+0x20>)
 80043bc:	2010      	movs	r0, #16
 80043be:	f004 f8ff 	bl	80085c0 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <ESC_address+0x24>)
 80043c4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <ESC_address+0x24>)
 80043ca:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200015d4 	.word	0x200015d4
 80043d8:	2000154c 	.word	0x2000154c

080043dc <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 80043e2:	1dfb      	adds	r3, r7, #7
 80043e4:	2201      	movs	r2, #1
 80043e6:	4619      	mov	r1, r3
 80043e8:	f640 1081 	movw	r0, #2433	; 0x981
 80043ec:	f004 f8e8 	bl	80085c0 <ESC_read>
   return activation;
 80043f0:	79fb      	ldrb	r3, [r7, #7]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 8004406:	f7ff ffe9 	bl	80043dc <ESC_SYNCactivation>
 800440a:	4603      	mov	r3, r0
 800440c:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 800440e:	797b      	ldrb	r3, [r7, #5]
 8004410:	f003 0309 	and.w	r3, r3, #9
 8004414:	2b00      	cmp	r3, #0
 8004416:	dd0b      	ble.n	8004430 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 8004418:	2330      	movs	r3, #48	; 0x30
 800441a:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <ESC_checkDC+0x50>)
 800441e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <ESC_checkDC+0x50>)
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	4798      	blx	r3
 800442a:	4603      	mov	r3, r0
 800442c:	80fb      	strh	r3, [r7, #6]
 800442e:	e007      	b.n	8004440 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <ESC_checkDC+0x50>)
 8004432:	2200      	movs	r2, #0
 8004434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      ESCvar.synccounter = 0;
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <ESC_checkDC+0x50>)
 800443a:	2200      	movs	r2, #0
 800443c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
   }

   return ret;
 8004440:	88fb      	ldrh	r3, [r7, #6]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000154c 	.word	0x2000154c

08004450 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 800445a:	2208      	movs	r2, #8
 800445c:	4934      	ldr	r1, [pc, #208]	; (8004530 <ESC_checkmbx+0xe0>)
 800445e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004462:	f004 f8ad 	bl	80085c0 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8004466:	2208      	movs	r2, #8
 8004468:	4932      	ldr	r1, [pc, #200]	; (8004534 <ESC_checkmbx+0xe4>)
 800446a:	f640 0008 	movw	r0, #2056	; 0x808
 800446e:	f004 f8a7 	bl	80085c0 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <ESC_checkmbx+0xe0>)
 8004474:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29a      	uxth	r2, r3
 800447c:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <ESC_checkmbx+0xe8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d116      	bne.n	80044b4 <ESC_checkmbx+0x64>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	885b      	ldrh	r3, [r3, #2]
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <ESC_checkmbx+0xe8>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	885b      	ldrh	r3, [r3, #2]
 8004492:	429a      	cmp	r2, r3
 8004494:	d10e      	bne.n	80044b4 <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	791a      	ldrb	r2, [r3, #4]
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <ESC_checkmbx+0xe8>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	799b      	ldrb	r3, [r3, #6]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <ESC_checkmbx+0x64>
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <ESC_checkmbx+0xe8>)
 80044a6:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <ESC_checkmbx+0xe8>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 80044bc:	2000      	movs	r0, #0
 80044be:	f7ff ff5b 	bl	8004378 <ESC_SMdisable>
      ESC_SMdisable (1);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f7ff ff58 	bl	8004378 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 80044c8:	2311      	movs	r3, #17
 80044ca:	e02d      	b.n	8004528 <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <ESC_checkmbx+0xe4>)
 80044ce:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	4b18      	ldr	r3, [pc, #96]	; (8004538 <ESC_checkmbx+0xe8>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d116      	bne.n	800450e <ESC_checkmbx+0xbe>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	885b      	ldrh	r3, [r3, #2]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	4b14      	ldr	r3, [pc, #80]	; (8004538 <ESC_checkmbx+0xe8>)
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	885b      	ldrh	r3, [r3, #2]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d10e      	bne.n	800450e <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	791a      	ldrb	r2, [r3, #4]
 80044f4:	4b10      	ldr	r3, [pc, #64]	; (8004538 <ESC_checkmbx+0xe8>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	799b      	ldrb	r3, [r3, #6]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d107      	bne.n	800450e <ESC_checkmbx+0xbe>
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <ESC_checkmbx+0xe8>)
 8004500:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <ESC_checkmbx+0xe8>)
 8004510:	2202      	movs	r2, #2
 8004512:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      ESC_SMdisable (0);
 8004516:	2000      	movs	r0, #0
 8004518:	f7ff ff2e 	bl	8004378 <ESC_SMdisable>
      ESC_SMdisable (1);
 800451c:	2001      	movs	r0, #1
 800451e:	f7ff ff2b 	bl	8004378 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 8004522:	2311      	movs	r3, #17
 8004524:	e000      	b.n	8004528 <ESC_checkmbx+0xd8>
   }
   return state;
 8004526:	79fb      	ldrb	r3, [r7, #7]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20001608 	.word	0x20001608
 8004534:	20001610 	.word	0x20001610
 8004538:	2000154c 	.word	0x2000154c

0800453c <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <ESC_startmbx+0x84>)
 8004548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800454c:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <ESC_startmbx+0x84>)
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <ESC_startmbx+0x88>)
 8004552:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <ESC_startmbx+0x84>)
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <ESC_startmbx+0x8c>)
 8004558:	675a      	str	r2, [r3, #116]	; 0x74


   ESC_SMenable (0);
 800455a:	2000      	movs	r0, #0
 800455c:	f7ff feee 	bl	800433c <ESC_SMenable>
   ESC_SMenable (1);
 8004560:	2001      	movs	r0, #1
 8004562:	f7ff feeb 	bl	800433c <ESC_SMenable>
   ESC_SMstatus (0);
 8004566:	2000      	movs	r0, #0
 8004568:	f7ff fea8 	bl	80042bc <ESC_SMstatus>
   ESC_SMstatus (1);
 800456c:	2001      	movs	r0, #1
 800456e:	f7ff fea5 	bl	80042bc <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff6b 	bl	8004450 <ESC_checkmbx>
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <ESC_startmbx+0x5c>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8004588:	2016      	movs	r0, #22
 800458a:	f7ff fddd 	bl	8004148 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <ESC_startmbx+0x84>)
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004596:	e00d      	b.n	80045b4 <ESC_startmbx+0x78>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <ESC_startmbx+0x84>)
 800459a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800459e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <ESC_startmbx+0x84>)
 80045a8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <ESC_startmbx+0x84>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 80045b4:	79fb      	ldrb	r3, [r7, #7]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2000154c 	.word	0x2000154c
 80045c4:	20001550 	.word	0x20001550
 80045c8:	20001558 	.word	0x20001558

080045cc <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 80045d6:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <ESC_startmbxboot+0x84>)
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	66da      	str	r2, [r3, #108]	; 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <ESC_startmbxboot+0x84>)
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <ESC_startmbxboot+0x88>)
 80045e2:	671a      	str	r2, [r3, #112]	; 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 80045e4:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <ESC_startmbxboot+0x84>)
 80045e6:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <ESC_startmbxboot+0x8c>)
 80045e8:	675a      	str	r2, [r3, #116]	; 0x74

   ESC_SMenable (0);
 80045ea:	2000      	movs	r0, #0
 80045ec:	f7ff fea6 	bl	800433c <ESC_SMenable>
   ESC_SMenable (1);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7ff fea3 	bl	800433c <ESC_SMenable>
   ESC_SMstatus (0);
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7ff fe60 	bl	80042bc <ESC_SMstatus>
   ESC_SMstatus (1);
 80045fc:	2001      	movs	r0, #1
 80045fe:	f7ff fe5d 	bl	80042bc <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ff23 	bl	8004450 <ESC_checkmbx>
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <ESC_startmbxboot+0x5c>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 8004618:	2015      	movs	r0, #21
 800461a:	f7ff fd95 	bl	8004148 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <ESC_startmbxboot+0x84>)
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004626:	e00d      	b.n	8004644 <ESC_startmbxboot+0x78>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8004628:	4b09      	ldr	r3, [pc, #36]	; (8004650 <ESC_startmbxboot+0x84>)
 800462a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800462e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <ESC_startmbxboot+0x84>)
 8004638:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      ESCvar.MBXrun = 1;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <ESC_startmbxboot+0x84>)
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   }
   return state;
 8004644:	79fb      	ldrb	r3, [r7, #7]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000154c 	.word	0x2000154c
 8004654:	20001560 	.word	0x20001560
 8004658:	20001568 	.word	0x20001568

0800465c <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 8004662:	4b27      	ldr	r3, [pc, #156]	; (8004700 <ESC_stopmbx+0xa4>)
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   ESC_SMdisable (0);
 800466a:	2000      	movs	r0, #0
 800466c:	f7ff fe84 	bl	8004378 <ESC_SMdisable>
   ESC_SMdisable (1);
 8004670:	2001      	movs	r0, #1
 8004672:	f7ff fe81 	bl	8004378 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8004676:	2300      	movs	r3, #0
 8004678:	71fb      	strb	r3, [r7, #7]
 800467a:	e006      	b.n	800468a <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	4a21      	ldr	r2, [pc, #132]	; (8004704 <ESC_stopmbx+0xa8>)
 8004680:	2100      	movs	r1, #0
 8004682:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	3301      	adds	r3, #1
 8004688:	71fb      	strb	r3, [r7, #7]
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d9f5      	bls.n	800467c <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <ESC_stopmbx+0xa4>)
 8004692:	2200      	movs	r2, #0
 8004694:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   ESCvar.mbxbackup = 0;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <ESC_stopmbx+0xa4>)
 800469a:	2200      	movs	r2, #0
 800469c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
   ESCvar.xoe = 0;
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <ESC_stopmbx+0xa4>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxfree = 1;
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <ESC_stopmbx+0xa4>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   ESCvar.toggle = 0;
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <ESC_stopmbx+0xa4>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   ESCvar.mbxincnt = 0;
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <ESC_stopmbx+0xa4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
   ESCvar.segmented = 0;
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <ESC_stopmbx+0xa4>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
   ESCvar.frags = 0;
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <ESC_stopmbx+0xa4>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   ESCvar.fragsleft = 0;
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <ESC_stopmbx+0xa4>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   ESCvar.txcue = 0;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <ESC_stopmbx+0xa4>)
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   ESCvar.index = 0;
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <ESC_stopmbx+0xa4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ESCvar.subindex = 0;
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <ESC_stopmbx+0xa4>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
   ESCvar.flags = 0;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <ESC_stopmbx+0xa4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2000154c 	.word	0x2000154c
 8004704:	200012a8 	.word	0x200012a8

08004708 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 800470e:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <ESC_readmbx+0x80>)
 8004710:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 8004712:	4b1e      	ldr	r3, [pc, #120]	; (800478c <ESC_readmbx+0x84>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	2206      	movs	r2, #6
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 ff4f 	bl	80085c0 <ESC_read>
   length = etohs (MB->header.length);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 800472a:	887b      	ldrh	r3, [r7, #2]
 800472c:	461a      	mov	r2, r3
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <ESC_readmbx+0x84>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	885b      	ldrh	r3, [r3, #2]
 8004734:	3b06      	subs	r3, #6
 8004736:	429a      	cmp	r2, r3
 8004738:	d905      	bls.n	8004746 <ESC_readmbx+0x3e>
   {
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <ESC_readmbx+0x84>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	885b      	ldrh	r3, [r3, #2]
 8004740:	3b06      	subs	r3, #6
 8004742:	b29b      	uxth	r3, r3
 8004744:	807b      	strh	r3, [r7, #2]
   }
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <ESC_readmbx+0x84>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	3306      	adds	r3, #6
 800474e:	b298      	uxth	r0, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3306      	adds	r3, #6
 8004754:	887a      	ldrh	r2, [r7, #2]
 8004756:	4619      	mov	r1, r3
 8004758:	f003 ff32 	bl	80085c0 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	3306      	adds	r3, #6
 8004760:	4a0a      	ldr	r2, [pc, #40]	; (800478c <ESC_readmbx+0x84>)
 8004762:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004764:	8852      	ldrh	r2, [r2, #2]
 8004766:	4293      	cmp	r3, r2
 8004768:	d207      	bcs.n	800477a <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <ESC_readmbx+0x84>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	1cb9      	adds	r1, r7, #2
 8004772:	2201      	movs	r2, #1
 8004774:	4618      	mov	r0, r3
 8004776:	f003 ff23 	bl	80085c0 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <ESC_readmbx+0x88>)
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000ca8 	.word	0x20000ca8
 800478c:	2000154c 	.word	0x2000154c
 8004790:	200012a8 	.word	0x200012a8

08004794 <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <ESC_writembx+0x88>)
 80047a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <ESC_writembx+0x8c>)
 80047aa:	4413      	add	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	4313      	orrs	r3, r2
 80047bc:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 80047be:	8afa      	ldrh	r2, [r7, #22]
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <ESC_writembx+0x88>)
 80047c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c4:	885b      	ldrh	r3, [r3, #2]
 80047c6:	3b06      	subs	r3, #6
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d904      	bls.n	80047d6 <ESC_writembx+0x42>
   {
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <ESC_writembx+0x88>)
 80047ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d0:	885b      	ldrh	r3, [r3, #2]
 80047d2:	3b06      	subs	r3, #6
 80047d4:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 80047d6:	4b11      	ldr	r3, [pc, #68]	; (800481c <ESC_writembx+0x88>)
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	8818      	ldrh	r0, [r3, #0]
 80047dc:	8afb      	ldrh	r3, [r7, #22]
 80047de:	3306      	adds	r3, #6
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6939      	ldr	r1, [r7, #16]
 80047e6:	f003 ff4d 	bl	8008684 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 80047ea:	8afb      	ldrh	r3, [r7, #22]
 80047ec:	3306      	adds	r3, #6
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <ESC_writembx+0x88>)
 80047f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047f2:	8852      	ldrh	r2, [r2, #2]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d208      	bcs.n	800480a <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <ESC_writembx+0x88>)
 80047fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fc:	889b      	ldrh	r3, [r3, #4]
 80047fe:	f107 010f 	add.w	r1, r7, #15
 8004802:	2201      	movs	r2, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f003 ff3d 	bl	8008684 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <ESC_writembx+0x88>)
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8004812:	bf00      	nop
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000154c 	.word	0x2000154c
 8004820:	20000ca8 	.word	0x20000ca8

08004824 <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <ESC_ackmbxread+0x2c>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	1df9      	adds	r1, r7, #7
 8004836:	2201      	movs	r2, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f003 ff23 	bl	8008684 <ESC_write>
   ESCvar.mbxfree = 1;
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <ESC_ackmbxread+0x2c>)
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000154c 	.word	0x2000154c

08004854 <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 800485a:	2302      	movs	r3, #2
 800485c:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 800485e:	e002      	b.n	8004866 <ESC_claimbuffer+0x12>
   {
      n--;
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	3b01      	subs	r3, #1
 8004864:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <ESC_claimbuffer+0x22>
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	4a2b      	ldr	r2, [pc, #172]	; (800491c <ESC_claimbuffer+0xc8>)
 8004870:	5cd3      	ldrb	r3, [r2, r3]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f4      	bne.n	8004860 <ESC_claimbuffer+0xc>
   }
   if (n)
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d047      	beq.n	800490c <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	4a27      	ldr	r2, [pc, #156]	; (800491c <ESC_claimbuffer+0xc8>)
 8004880:	2102      	movs	r1, #2
 8004882:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	4a26      	ldr	r2, [pc, #152]	; (8004920 <ESC_claimbuffer+0xcc>)
 8004888:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	4a25      	ldr	r2, [pc, #148]	; (8004924 <ESC_claimbuffer+0xd0>)
 8004890:	4413      	add	r3, r2
 8004892:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 8004894:	4b22      	ldr	r3, [pc, #136]	; (8004920 <ESC_claimbuffer+0xcc>)
 8004896:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800489a:	3301      	adds	r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048a6:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048b2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      if (ESCvar.mbxcnt == 0)
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048b8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
      }
      MBh->address = htoes (0x0000);      // destination is master
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	709a      	strb	r2, [r3, #2]
 80048ce:	2200      	movs	r2, #0
 80048d0:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	7913      	ldrb	r3, [r2, #4]
 80048d6:	f36f 0305 	bfc	r3, #0, #6
 80048da:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	7913      	ldrb	r3, [r2, #4]
 80048e0:	f36f 1387 	bfc	r3, #6, #2
 80048e4:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 80048e6:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048e8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	b2d9      	uxtb	r1, r3
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	7953      	ldrb	r3, [r2, #5]
 80048f6:	f361 1307 	bfi	r3, r1, #4, #4
 80048fa:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <ESC_claimbuffer+0xcc>)
 80048fe:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8004902:	3301      	adds	r3, #1
 8004904:	b2da      	uxtb	r2, r3
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <ESC_claimbuffer+0xcc>)
 8004908:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
   }
   return n;
 800490c:	79fb      	ldrb	r3, [r7, #7]
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	200012a8 	.word	0x200012a8
 8004920:	2000154c 	.word	0x2000154c
 8004924:	20000ca8 	.word	0x20000ca8

08004928 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 800492e:	2302      	movs	r3, #2
 8004930:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 8004932:	e002      	b.n	800493a <ESC_outreqbuffer+0x12>
   {
      n--;
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	3b01      	subs	r3, #1
 8004938:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d004      	beq.n	800494a <ESC_outreqbuffer+0x22>
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <ESC_outreqbuffer+0x30>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d1f4      	bne.n	8004934 <ESC_outreqbuffer+0xc>
   }
   return n;
 800494a:	79fb      	ldrb	r3, [r7, #7]
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	200012a8 	.word	0x200012a8

0800495c <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 8004966:	f7ff ff75 	bl	8004854 <ESC_claimbuffer>
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d021      	beq.n	80049b8 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <MBX_error+0x64>)
 8004978:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <MBX_error+0x68>)
 8004980:	4413      	add	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	f042 0204 	orr.w	r2, r2, #4
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	7953      	ldrb	r3, [r2, #5]
 8004996:	f36f 0303 	bfc	r3, #0, #4
 800499a:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	719a      	strb	r2, [r3, #6]
 80049a6:	2200      	movs	r2, #0
 80049a8:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <MBX_error+0x6c>)
 80049b4:	2103      	movs	r1, #3
 80049b6:	54d1      	strb	r1, [r2, r3]
   }
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	2000154c 	.word	0x2000154c
 80049c4:	20000ca8 	.word	0x20000ca8
 80049c8:	200012a8 	.word	0x200012a8

080049cc <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 80049d6:	4b96      	ldr	r3, [pc, #600]	; (8004c30 <ESC_mbxprocess+0x264>)
 80049d8:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 80049da:	4b96      	ldr	r3, [pc, #600]	; (8004c34 <ESC_mbxprocess+0x268>)
 80049dc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e11f      	b.n	8004c28 <ESC_mbxprocess+0x25c>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 80049e8:	4b92      	ldr	r3, [pc, #584]	; (8004c34 <ESC_mbxprocess+0x268>)
 80049ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <ESC_mbxprocess+0x36>
   {
      ESC_SMstatus (0);
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7ff fc60 	bl	80042bc <ESC_SMstatus>
      ESC_SMstatus (1);
 80049fc:	2001      	movs	r0, #1
 80049fe:	f7ff fc5d 	bl	80042bc <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 8004a02:	4b8c      	ldr	r3, [pc, #560]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a04:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03c      	beq.n	8004a86 <ESC_mbxprocess+0xba>
 8004a0c:	4b89      	ldr	r3, [pc, #548]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d035      	beq.n	8004a86 <ESC_mbxprocess+0xba>
   {
      ESC_ackmbxread ();
 8004a1a:	f7ff ff03 	bl	8004824 <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 8004a1e:	4b85      	ldr	r3, [pc, #532]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a20:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <ESC_mbxprocess+0x6a>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 8004a28:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a2a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b81      	ldr	r3, [pc, #516]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 8004a36:	4b7f      	ldr	r3, [pc, #508]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a38:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d105      	bne.n	8004a52 <ESC_mbxprocess+0x86>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 8004a46:	4b7b      	ldr	r3, [pc, #492]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a48:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fea1 	bl	8004794 <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 8004a52:	4b78      	ldr	r3, [pc, #480]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a54:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4b77      	ldr	r3, [pc, #476]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004a5c:	2105      	movs	r1, #5
 8004a5e:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 8004a60:	4b74      	ldr	r3, [pc, #464]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a62:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8004a66:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a68:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
      ESCvar.mbxoutpost = 0;
 8004a6c:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 8004a74:	4b6f      	ldr	r3, [pc, #444]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a76:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <ESC_mbxprocess+0xb6>
      {
         return 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0d2      	b.n	8004c28 <ESC_mbxprocess+0x25c>
      }
      return 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e0d0      	b.n	8004c28 <ESC_mbxprocess+0x25c>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 8004a86:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a88:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8004a8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004a96:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d044      	beq.n	8004b28 <ESC_mbxprocess+0x15c>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 8004a9e:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004aa0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <ESC_mbxprocess+0xe6>
 8004aa8:	4b62      	ldr	r3, [pc, #392]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004aaa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d038      	beq.n	8004b24 <ESC_mbxprocess+0x158>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 8004ab2:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004ab4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <ESC_mbxprocess+0xfe>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8004abc:	4b5d      	ldr	r3, [pc, #372]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004abe:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fe66 	bl	8004794 <ESC_writembx>
 8004ac8:	e012      	b.n	8004af0 <ESC_mbxprocess+0x124>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 8004aca:	2001      	movs	r0, #1
 8004acc:	f7ff fc54 	bl	8004378 <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 8004ad0:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004ad2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b57      	ldr	r3, [pc, #348]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004ada:	2106      	movs	r1, #6
 8004adc:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f7ff fc2c 	bl	800433c <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004ae6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fe52 	bl	8004794 <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 8004af0:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004af2:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8004af6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b4d      	ldr	r3, [pc, #308]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b00:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 8004b04:	4b4b      	ldr	r3, [pc, #300]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b06:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	b2d9      	uxtb	r1, r3
 8004b10:	4a48      	ldr	r2, [pc, #288]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b12:	f892 30cb 	ldrb.w	r3, [r2, #203]	; 0xcb
 8004b16:	f361 0341 	bfi	r3, r1, #1, #1
 8004b1a:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
         ESC_SMwritepdi (1);
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f7ff fbec 	bl	80042fc <ESC_SMwritepdi>
      }
      return 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e07f      	b.n	8004c28 <ESC_mbxprocess+0x25c>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 8004b28:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b2a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d02f      	beq.n	8004b92 <ESC_mbxprocess+0x1c6>
 8004b32:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b34:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <ESC_mbxprocess+0x180>
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b3e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d122      	bne.n	8004b92 <ESC_mbxprocess+0x1c6>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8004b4c:	f7ff feec 	bl	8004928 <ESC_outreqbuffer>
 8004b50:	4603      	mov	r3, r0
 8004b52:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01b      	beq.n	8004b92 <ESC_mbxprocess+0x1c6>
      {
         ESC_writembx (mbxhandle);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fe19 	bl	8004794 <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 8004b62:	2001      	movs	r0, #1
 8004b64:	f7ff fbaa 	bl	80042bc <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 8004b70:	4a30      	ldr	r2, [pc, #192]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
         if (ESCvar.txcue)
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b7a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <ESC_mbxprocess+0x1c6>
         {
            ESCvar.txcue--;
 8004b82:	4b2c      	ldr	r3, [pc, #176]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b84:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b8e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 8004b92:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004b94:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d041      	beq.n	8004c26 <ESC_mbxprocess+0x25a>
 8004ba2:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d13d      	bne.n	8004c26 <ESC_mbxprocess+0x25a>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 8004baa:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004bac:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d138      	bne.n	8004c26 <ESC_mbxprocess+0x25a>
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004bb6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d133      	bne.n	8004c26 <ESC_mbxprocess+0x25a>
   {
      ESC_readmbx ();
 8004bbe:	f7ff fda3 	bl	8004708 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004bc4:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8004bc8:	f36f 03c3 	bfc	r3, #3, #1
 8004bcc:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
      if (etohs (MBh->length) == 0)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <ESC_mbxprocess+0x21a>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8004bda:	2005      	movs	r0, #5
 8004bdc:	f7ff febe 	bl	800495c <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8004be0:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	795b      	ldrb	r3, [r3, #5]
 8004bea:	f023 030f 	bic.w	r3, r3, #15
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <ESC_mbxprocess+0x244>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	795b      	ldrb	r3, [r3, #5]
 8004bf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004c02:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d102      	bne.n	8004c10 <ESC_mbxprocess+0x244>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <ESC_mbxprocess+0x26c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	795b      	ldrb	r3, [r3, #5]
 8004c14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <ESC_mbxprocess+0x268>)
 8004c1e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
      return 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <ESC_mbxprocess+0x25c>
   }

   return 0;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000ca8 	.word	0x20000ca8
 8004c34:	2000154c 	.word	0x2000154c
 8004c38:	200012a8 	.word	0x200012a8

08004c3c <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <ESC_xoeprocess+0x5c>)
 8004c44:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d021      	beq.n	8004c90 <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <ESC_xoeprocess+0x5c>)
 8004c4e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11d      	bne.n	8004c92 <ESC_xoeprocess+0x56>
 8004c56:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <ESC_xoeprocess+0x60>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d119      	bne.n	8004c92 <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <ESC_xoeprocess+0x64>)
 8004c60:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	795b      	ldrb	r3, [r3, #5]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <ESC_xoeprocess+0x3e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8004c7a:	2005      	movs	r0, #5
 8004c7c:	f7ff fe6e 	bl	800495c <MBX_error>
 8004c80:	e002      	b.n	8004c88 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 8004c82:	2002      	movs	r0, #2
 8004c84:	f7ff fe6a 	bl	800495c <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <ESC_xoeprocess+0x60>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e000      	b.n	8004c92 <ESC_xoeprocess+0x56>
      return;
 8004c90:	bf00      	nop
   }
}
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	2000154c 	.word	0x2000154c
 8004c9c:	200012a8 	.word	0x200012a8
 8004ca0:	20000ca8 	.word	0x20000ca8

08004ca4 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 8004cae:	2208      	movs	r2, #8
 8004cb0:	4940      	ldr	r1, [pc, #256]	; (8004db4 <ESC_checkSM23+0x110>)
 8004cb2:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8004cb6:	f003 fc83 	bl	80085c0 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 8004cba:	4b3e      	ldr	r3, [pc, #248]	; (8004db4 <ESC_checkSM23+0x110>)
 8004cbc:	60fb      	str	r3, [r7, #12]
   
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8004cc8:	d103      	bne.n	8004cd2 <ESC_checkSM23+0x2e>
       (SM->Command != ESC_SM2_smc))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 8004cce:	2b24      	cmp	r3, #36	; 0x24
 8004cd0:	d005      	beq.n	8004cde <ESC_checkSM23+0x3a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8004cd2:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <ESC_checkSM23+0x114>)
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8004cda:	2312      	movs	r3, #18
 8004cdc:	e066      	b.n	8004dac <ESC_checkSM23+0x108>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	885b      	ldrh	r3, [r3, #2]
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <ESC_checkSM23+0x114>)
 8004ce6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d005      	beq.n	8004cfa <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <ESC_checkSM23+0x114>)
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8004cf6:	2312      	movs	r3, #18
 8004cf8:	e058      	b.n	8004dac <ESC_checkSM23+0x108>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	799b      	ldrb	r3, [r3, #6]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <ESC_checkSM23+0x78>
            (ESCvar.ESC_SM2_sml > 0))
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d08:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <ESC_checkSM23+0x78>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8004d10:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d12:	2204      	movs	r2, #4
 8004d14:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8004d18:	2312      	movs	r3, #18
 8004d1a:	e047      	b.n	8004dac <ESC_checkSM23+0x108>
   }

   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	885b      	ldrh	r3, [r3, #2]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	dd05      	ble.n	8004d3c <ESC_checkSM23+0x98>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8004d30:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d32:	2204      	movs	r2, #4
 8004d34:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 8004d38:	2312      	movs	r3, #18
 8004d3a:	e037      	b.n	8004dac <ESC_checkSM23+0x108>
   }

   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	491f      	ldr	r1, [pc, #124]	; (8004dbc <ESC_checkSM23+0x118>)
 8004d40:	f640 0018 	movw	r0, #2072	; 0x818
 8004d44:	f003 fc3c 	bl	80085c0 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <ESC_checkSM23+0x118>)
 8004d4a:	60fb      	str	r3, [r7, #12]
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8004d56:	d103      	bne.n	8004d60 <ESC_checkSM23+0xbc>
       (SM->Command != ESC_SM3_smc))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d005      	beq.n	8004d6c <ESC_checkSM23+0xc8>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d62:	2208      	movs	r2, #8
 8004d64:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8004d68:	2312      	movs	r3, #18
 8004d6a:	e01f      	b.n	8004dac <ESC_checkSM23+0x108>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	885b      	ldrh	r3, [r3, #2]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d74:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d005      	beq.n	8004d88 <ESC_checkSM23+0xe4>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d7e:	2208      	movs	r2, #8
 8004d80:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8004d84:	2312      	movs	r3, #18
 8004d86:	e011      	b.n	8004dac <ESC_checkSM23+0x108>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	799b      	ldrb	r3, [r3, #6]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <ESC_checkSM23+0x106>
            (ESCvar.ESC_SM3_sml > 0))
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <ESC_checkSM23+0x114>)
 8004d96:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <ESC_checkSM23+0x106>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <ESC_checkSM23+0x114>)
 8004da0:	2208      	movs	r2, #8
 8004da2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 8004da6:	2312      	movs	r3, #18
 8004da8:	e000      	b.n	8004dac <ESC_checkSM23+0x108>
   }
   return state;
 8004daa:	79fb      	ldrb	r3, [r7, #7]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20001618 	.word	0x20001618
 8004db8:	2000154c 	.word	0x2000154c
 8004dbc:	20001620 	.word	0x20001620

08004dc0 <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff69 	bl	8004ca4 <ESC_checkSM23>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2b12      	cmp	r3, #18
 8004dda:	d00f      	beq.n	8004dfc <ESC_startinput+0x3c>
   {
   	  /* If inputs > 0 , enable SM3 */
      if (ESCvar.ESC_SM3_sml > 0)
 8004ddc:	4b34      	ldr	r3, [pc, #208]	; (8004eb0 <ESC_startinput+0xf0>)
 8004dde:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <ESC_startinput+0x2c>
      {
         ESC_SMenable (3);
 8004de6:	2003      	movs	r0, #3
 8004de8:	f7ff faa8 	bl	800433c <ESC_SMenable>
      }
      /* Go to state input regardless of any inputs present */
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <ESC_startinput+0xf4>)
 8004dee:	f3bf 8f5b 	dmb	ish
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	f3bf 8f5b 	dmb	ish
 8004dfa:	e013      	b.n	8004e24 <ESC_startinput+0x64>
   }
   else
   {
      ESC_SMdisable (2);
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	f7ff fabb 	bl	8004378 <ESC_SMdisable>
      ESC_SMdisable (3);
 8004e02:	2003      	movs	r0, #3
 8004e04:	f7ff fab8 	bl	8004378 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8004e08:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <ESC_startinput+0xf0>)
 8004e0a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <ESC_startinput+0x5e>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 8004e16:	201e      	movs	r0, #30
 8004e18:	f7ff f996 	bl	8004148 <ESC_ALerror>
 8004e1c:	e002      	b.n	8004e24 <ESC_startinput+0x64>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8004e1e:	201d      	movs	r0, #29
 8004e20:	f7ff f992 	bl	8004148 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <ESC_startinput+0xf0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <ESC_startinput+0x70>
   {
      return state;
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	e03b      	b.n	8004ea8 <ESC_startinput+0xe8>
   }

   if (state != (ESCpreop | ESCerror))
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2b12      	cmp	r3, #18
 8004e34:	d037      	beq.n	8004ea6 <ESC_startinput+0xe6>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 8004e36:	f7ff fae1 	bl	80043fc <ESC_checkDC>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	817b      	strh	r3, [r7, #10]
      if(dc_check_result > 0)
 8004e3e:	897b      	ldrh	r3, [r7, #10]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d013      	beq.n	8004e6c <ESC_startinput+0xac>
      {
         ESC_ALerror (dc_check_result);
 8004e44:	897b      	ldrh	r3, [r7, #10]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff f97e 	bl	8004148 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 8004e4c:	2312      	movs	r3, #18
 8004e4e:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 8004e50:	2002      	movs	r0, #2
 8004e52:	f7ff fa91 	bl	8004378 <ESC_SMdisable>
         ESC_SMdisable (3);
 8004e56:	2003      	movs	r0, #3
 8004e58:	f7ff fa8e 	bl	8004378 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <ESC_startinput+0xf4>)
 8004e5e:	f3bf 8f5b 	dmb	ish
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	f3bf 8f5b 	dmb	ish
 8004e6a:	e01c      	b.n	8004ea6 <ESC_startinput+0xe6>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 8004e6c:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <ESC_startinput+0xf0>)
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d018      	beq.n	8004ea6 <ESC_startinput+0xe6>
         {
            uint32_t int_mask;

            if (ESCvar.ESC_SM2_sml == 0)
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <ESC_startinput+0xf0>)
 8004e76:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <ESC_startinput+0xc6>
            {
               int_mask = ESCREG_ALEVENT_SM3;
 8004e7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e002      	b.n	8004e8c <ESC_startinput+0xcc>
            }
            else
            {
               int_mask = ESCREG_ALEVENT_SM2;
 8004e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8a:	60fb      	str	r3, [r7, #12]
            }

            if (ESCvar.dcsync > 0)
 8004e8c:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <ESC_startinput+0xf0>)
 8004e8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <ESC_startinput+0xde>
            {
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
            }
            ESCvar.esc_hw_interrupt_enable (int_mask);
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <ESC_startinput+0xf0>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	4798      	blx	r3
         }
      }
   }

   return state;
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2000154c 	.word	0x2000154c
 8004eb4:	20001635 	.word	0x20001635

08004eb8 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <ESC_stopinput+0x3c>)
 8004ebe:	f3bf 8f5b 	dmb	ish
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 8004eca:	2003      	movs	r0, #3
 8004ecc:	f7ff fa54 	bl	8004378 <ESC_SMdisable>
   ESC_SMdisable (2);
 8004ed0:	2002      	movs	r0, #2
 8004ed2:	f7ff fa51 	bl	8004378 <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <ESC_stopinput+0x40>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <ESC_stopinput+0x40>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   if ((ESCvar.use_interrupt != 0) &&
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 8004ee6:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <ESC_stopinput+0x40>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	f640 4004 	movw	r0, #3076	; 0xc04
 8004eee:	4798      	blx	r3
            ESCREG_ALEVENT_SM2 |
            ESCREG_ALEVENT_SM3);
   }
}
 8004ef0:	bf00      	nop
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20001635 	.word	0x20001635
 8004ef8:	2000154c 	.word	0x2000154c

08004efc <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
	
   /* If outputs > 0 , enable SM2 */
   if (ESCvar.ESC_SM2_sml > 0)
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <ESC_startoutput+0x40>)
 8004f08:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <ESC_startoutput+0x1a>
   {
      ESC_SMenable (2);
 8004f10:	2002      	movs	r0, #2
 8004f12:	f7ff fa13 	bl	800433c <ESC_SMenable>
   }
   /* Go to state output regardless of any outputs present */
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <ESC_startoutput+0x44>)
 8004f18:	f3bf 8f5b 	dmb	ish
 8004f1c:	e8d3 2f4f 	ldrexb	r2, [r3]
 8004f20:	f042 0202 	orr.w	r2, r2, #2
 8004f24:	e8c3 2f41 	strexb	r1, r2, [r3]
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	d1f7      	bne.n	8004f1c <ESC_startoutput+0x20>
 8004f2c:	f3bf 8f5b 	dmb	ish
   return state;
 8004f30:	79fb      	ldrb	r3, [r7, #7]

}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	2000154c 	.word	0x2000154c
 8004f40:	20001635 	.word	0x20001635

08004f44 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <ESC_stopoutput+0x2c>)
 8004f4a:	f3bf 8f5b 	dmb	ish
 8004f4e:	e8d3 2f4f 	ldrexb	r2, [r3]
 8004f52:	f002 0201 	and.w	r2, r2, #1
 8004f56:	e8c3 2f41 	strexb	r1, r2, [r3]
 8004f5a:	2900      	cmp	r1, #0
 8004f5c:	d1f7      	bne.n	8004f4e <ESC_stopoutput+0xa>
 8004f5e:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 8004f62:	2002      	movs	r0, #2
 8004f64:	f7ff fa08 	bl	8004378 <ESC_SMdisable>
   APP_safeoutput ();
 8004f68:	f7fe ff7a 	bl	8003e60 <APP_safeoutput>
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20001635 	.word	0x20001635

08004f74 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 8004f7a:	4b56      	ldr	r3, [pc, #344]	; (80050d4 <ESC_sm_act_event+0x160>)
 8004f7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 809e 	beq.w	80050c6 <ESC_sm_act_event+0x152>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8004f8a:	4b52      	ldr	r3, [pc, #328]	; (80050d4 <ESC_sm_act_event+0x160>)
 8004f8c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <ESC_sm_act_event+0x160>)
 8004f9a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	717b      	strb	r3, [r7, #5]
   an = as;
 8004fa6:	797b      	ldrb	r3, [r7, #5]
 8004fa8:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <ESC_sm_act_event+0x46>
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <ESC_sm_act_event+0x56>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8004fc2:	79bb      	ldrb	r3, [r7, #6]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 8004fca:	797b      	ldrb	r3, [r7, #5]
 8004fcc:	f003 030e 	and.w	r3, r3, #14
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05f      	beq.n	8005094 <ESC_sm_act_event+0x120>
 8004fd4:	797b      	ldrb	r3, [r7, #5]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d05c      	beq.n	8005094 <ESC_sm_act_event+0x120>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 8004fda:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <ESC_sm_act_event+0x160>)
 8004fdc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d057      	beq.n	8005094 <ESC_sm_act_event+0x120>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 8004fe4:	797b      	ldrb	r3, [r7, #5]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fa32 	bl	8004450 <ESC_checkmbx>
 8004fec:	4603      	mov	r3, r0
 8004fee:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 8004ff0:	797b      	ldrb	r3, [r7, #5]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fe56 	bl	8004ca4 <ESC_checkSM23>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8004ffc:	79bb      	ldrb	r3, [r7, #6]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <ESC_sm_act_event+0x9c>
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d040      	beq.n	8005092 <ESC_sm_act_event+0x11e>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 8005010:	793b      	ldrb	r3, [r7, #4]
 8005012:	2b11      	cmp	r3, #17
 8005014:	d11a      	bne.n	800504c <ESC_sm_act_event+0xd8>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8005016:	4b30      	ldr	r3, [pc, #192]	; (80050d8 <ESC_sm_act_event+0x164>)
 8005018:	f3bf 8f5b 	dmb	ish
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f3bf 8f5b 	dmb	ish
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <ESC_sm_act_event+0xbc>
         {
            ESC_stopoutput ();
 8005028:	f7ff ff8c 	bl	8004f44 <ESC_stopoutput>
            ESC_stopinput ();
 800502c:	f7ff ff44 	bl	8004eb8 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 8005030:	f7ff fb14 	bl	800465c <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8005034:	2016      	movs	r0, #22
 8005036:	f7ff f887 	bl	8004148 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <ESC_sm_act_event+0x160>)
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
         ESC_ALstatus (ax);
 8005042:	793b      	ldrb	r3, [r7, #4]
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff f899 	bl	800417c <ESC_ALstatus>
         return;
 800504a:	e03f      	b.n	80050cc <ESC_sm_act_event+0x158>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800504c:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <ESC_sm_act_event+0x164>)
 800504e:	f3bf 8f5b 	dmb	ish
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f3bf 8f5b 	dmb	ish
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d035      	beq.n	80050ca <ESC_sm_act_event+0x156>
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	2b12      	cmp	r3, #18
 8005062:	d132      	bne.n	80050ca <ESC_sm_act_event+0x156>
      {
         ESC_stopoutput ();
 8005064:	f7ff ff6e 	bl	8004f44 <ESC_stopoutput>
         ESC_stopinput ();
 8005068:	f7ff ff26 	bl	8004eb8 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800506c:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <ESC_sm_act_event+0x160>)
 800506e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <ESC_sm_act_event+0x10e>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800507a:	201e      	movs	r0, #30
 800507c:	f7ff f864 	bl	8004148 <ESC_ALerror>
 8005080:	e002      	b.n	8005088 <ESC_sm_act_event+0x114>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8005082:	201d      	movs	r0, #29
 8005084:	f7ff f860 	bl	8004148 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff f876 	bl	800417c <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8005090:	e01b      	b.n	80050ca <ESC_sm_act_event+0x156>
 8005092:	e01a      	b.n	80050ca <ESC_sm_act_event+0x156>
      }
   }
   else
   {
      ESC_SMack (0);
 8005094:	2000      	movs	r0, #0
 8005096:	f7ff f8fb 	bl	8004290 <ESC_SMack>
      ESC_SMack (1);
 800509a:	2001      	movs	r0, #1
 800509c:	f7ff f8f8 	bl	8004290 <ESC_SMack>
      ESC_SMack (2);
 80050a0:	2002      	movs	r0, #2
 80050a2:	f7ff f8f5 	bl	8004290 <ESC_SMack>
      ESC_SMack (3);
 80050a6:	2003      	movs	r0, #3
 80050a8:	f7ff f8f2 	bl	8004290 <ESC_SMack>
      ESC_SMack (4);
 80050ac:	2004      	movs	r0, #4
 80050ae:	f7ff f8ef 	bl	8004290 <ESC_SMack>
      ESC_SMack (5);
 80050b2:	2005      	movs	r0, #5
 80050b4:	f7ff f8ec 	bl	8004290 <ESC_SMack>
      ESC_SMack (6);
 80050b8:	2006      	movs	r0, #6
 80050ba:	f7ff f8e9 	bl	8004290 <ESC_SMack>
      ESC_SMack (7);
 80050be:	2007      	movs	r0, #7
 80050c0:	f7ff f8e6 	bl	8004290 <ESC_SMack>
 80050c4:	e002      	b.n	80050cc <ESC_sm_act_event+0x158>
      return;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <ESC_sm_act_event+0x158>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80050ca:	bf00      	nop
   }
}
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	2000154c 	.word	0x2000154c
 80050d8:	20001635 	.word	0x20001635

080050dc <ESC_check_id_request>:

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	80fb      	strh	r3, [r7, #6]
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d021      	beq.n	8005136 <ESC_check_id_request+0x5a>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	73fb      	strb	r3, [r7, #15]

      if ((state != ESCboot) &&
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d019      	beq.n	8005136 <ESC_check_id_request+0x5a>
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d907      	bls.n	8005118 <ESC_check_id_request+0x3c>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d003      	beq.n	8005118 <ESC_check_id_request+0x3c>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d10e      	bne.n	8005136 <ESC_check_id_request+0x5a>
      {
         uint16_t ALstatuscode;

         ESC_read (ESCREG_ALERROR,
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	2202      	movs	r2, #2
 800511e:	4619      	mov	r1, r3
 8005120:	f44f 709a 	mov.w	r0, #308	; 0x134
 8005124:	f003 fa4c 	bl	80085c0 <ESC_read>
                   (void *)&ALstatuscode,
                   sizeof (ALstatuscode));

         return (ALstatuscode == ALERR_NONE);
 8005128:	89bb      	ldrh	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	e000      	b.n	8005138 <ESC_check_id_request+0x5c>
      }
   }

   return false;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <ESC_load_device_id+0x4c>)
 8005148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <ESC_load_device_id+0x24>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <ESC_load_device_id+0x4c>)
 8005150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005152:	1dba      	adds	r2, r7, #6
 8005154:	4610      	mov	r0, r2
 8005156:	4798      	blx	r3
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <ESC_load_device_id+0x30>
      {
         device_id = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	80fb      	strh	r3, [r7, #6]
 8005162:	e005      	b.n	8005170 <ESC_load_device_id+0x30>
      }
   }
   else
   {
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 8005164:	1dbb      	adds	r3, r7, #6
 8005166:	2202      	movs	r2, #2
 8005168:	4619      	mov	r1, r3
 800516a:	2012      	movs	r0, #18
 800516c:	f003 fa28 	bl	80085c0 <ESC_read>
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <ESC_load_device_id+0x42>
   {
      /* Load the Device Identification Value to the AL Status Code register */
      ESC_ALerror (device_id);
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe ffe5 	bl	8004148 <ESC_ALerror>

      return ESCREG_AL_ID_REQUEST;
 800517e:	2320      	movs	r3, #32
 8005180:	e000      	b.n	8005184 <ESC_load_device_id+0x44>
   }

   return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	2000154c 	.word	0x2000154c

08005190 <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8005196:	4bda      	ldr	r3, [pc, #872]	; (8005500 <ESC_state+0x370>)
 8005198:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8256 	beq.w	8005652 <ESC_state+0x4c2>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 80051a6:	2202      	movs	r2, #2
 80051a8:	49d6      	ldr	r1, [pc, #856]	; (8005504 <ESC_state+0x374>)
 80051aa:	f44f 7090 	mov.w	r0, #288	; 0x120
 80051ae:	f003 fa07 	bl	80085c0 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 80051b2:	4bd3      	ldr	r3, [pc, #844]	; (8005500 <ESC_state+0x370>)
 80051b4:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80051b8:	4bd1      	ldr	r3, [pc, #836]	; (8005500 <ESC_state+0x370>)
 80051ba:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 80051be:	4bd0      	ldr	r3, [pc, #832]	; (8005500 <ESC_state+0x370>)
 80051c0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 80051cc:	4bcc      	ldr	r3, [pc, #816]	; (8005500 <ESC_state+0x370>)
 80051ce:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	717b      	strb	r3, [r7, #5]
   an = as;
 80051dc:	797b      	ldrb	r3, [r7, #5]
 80051de:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <ESC_state+0x60>
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d108      	bne.n	8005202 <ESC_state+0x72>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 80051f8:	79bb      	ldrb	r3, [r7, #6]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8005202:	79bb      	ldrb	r3, [r7, #6]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <ESC_state+0x88>
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 821f 	beq.w	8005656 <ESC_state+0x4c6>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	b25a      	sxtb	r2, r3
 800521e:	797b      	ldrb	r3, [r7, #5]
 8005220:	b25b      	sxtb	r3, r3
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	b25b      	sxtb	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b25b      	sxtb	r3, r3
 800522c:	b2db      	uxtb	r3, r3
 800522e:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8005230:	4bb3      	ldr	r3, [pc, #716]	; (8005500 <ESC_state+0x370>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <ESC_state+0xb4>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8005238:	4bb1      	ldr	r3, [pc, #708]	; (8005500 <ESC_state+0x370>)
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	1db9      	adds	r1, r7, #6
 800523e:	1d7a      	adds	r2, r7, #5
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 8005244:	797b      	ldrb	r3, [r7, #5]
 8005246:	3b11      	subs	r3, #17
 8005248:	2b77      	cmp	r3, #119	; 0x77
 800524a:	f200 81ac 	bhi.w	80055a6 <ESC_state+0x416>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <ESC_state+0xc4>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	080055eb 	.word	0x080055eb
 8005258:	08005485 	.word	0x08005485
 800525c:	0800548f 	.word	0x0800548f
 8005260:	08005477 	.word	0x08005477
 8005264:	080055a7 	.word	0x080055a7
 8005268:	080055a7 	.word	0x080055a7
 800526c:	080055a7 	.word	0x080055a7
 8005270:	08005465 	.word	0x08005465
 8005274:	080055a7 	.word	0x080055a7
 8005278:	080055a7 	.word	0x080055a7
 800527c:	080055a7 	.word	0x080055a7
 8005280:	080055a7 	.word	0x080055a7
 8005284:	080055a7 	.word	0x080055a7
 8005288:	080055a7 	.word	0x080055a7
 800528c:	080055a7 	.word	0x080055a7
 8005290:	080055a7 	.word	0x080055a7
 8005294:	08005435 	.word	0x08005435
 8005298:	080055eb 	.word	0x080055eb
 800529c:	08005499 	.word	0x08005499
 80052a0:	0800554f 	.word	0x0800554f
 80052a4:	080055a7 	.word	0x080055a7
 80052a8:	080055a7 	.word	0x080055a7
 80052ac:	080055a7 	.word	0x080055a7
 80052b0:	08005541 	.word	0x08005541
 80052b4:	080055a7 	.word	0x080055a7
 80052b8:	080055a7 	.word	0x080055a7
 80052bc:	080055a7 	.word	0x080055a7
 80052c0:	080055a7 	.word	0x080055a7
 80052c4:	080055a7 	.word	0x080055a7
 80052c8:	080055a7 	.word	0x080055a7
 80052cc:	080055a7 	.word	0x080055a7
 80052d0:	080055a7 	.word	0x080055a7
 80052d4:	08005447 	.word	0x08005447
 80052d8:	08005499 	.word	0x08005499
 80052dc:	08005447 	.word	0x08005447
 80052e0:	08005559 	.word	0x08005559
 80052e4:	080055a7 	.word	0x080055a7
 80052e8:	080055a7 	.word	0x080055a7
 80052ec:	080055a7 	.word	0x080055a7
 80052f0:	08005573 	.word	0x08005573
 80052f4:	080055a7 	.word	0x080055a7
 80052f8:	080055a7 	.word	0x080055a7
 80052fc:	080055a7 	.word	0x080055a7
 8005300:	080055a7 	.word	0x080055a7
 8005304:	080055a7 	.word	0x080055a7
 8005308:	080055a7 	.word	0x080055a7
 800530c:	080055a7 	.word	0x080055a7
 8005310:	080055a7 	.word	0x080055a7
 8005314:	08005459 	.word	0x08005459
 8005318:	080054a5 	.word	0x080054a5
 800531c:	08005499 	.word	0x08005499
 8005320:	080054a5 	.word	0x080054a5
 8005324:	080055a7 	.word	0x080055a7
 8005328:	080055a7 	.word	0x080055a7
 800532c:	080055a7 	.word	0x080055a7
 8005330:	0800559d 	.word	0x0800559d
 8005334:	080055a7 	.word	0x080055a7
 8005338:	080055a7 	.word	0x080055a7
 800533c:	080055a7 	.word	0x080055a7
 8005340:	080055a7 	.word	0x080055a7
 8005344:	080055a7 	.word	0x080055a7
 8005348:	080055a7 	.word	0x080055a7
 800534c:	080055a7 	.word	0x080055a7
 8005350:	080055a7 	.word	0x080055a7
 8005354:	080055a7 	.word	0x080055a7
 8005358:	080055a7 	.word	0x080055a7
 800535c:	080055a7 	.word	0x080055a7
 8005360:	080055a7 	.word	0x080055a7
 8005364:	080055a7 	.word	0x080055a7
 8005368:	080055a7 	.word	0x080055a7
 800536c:	080055a7 	.word	0x080055a7
 8005370:	080055a7 	.word	0x080055a7
 8005374:	080055a7 	.word	0x080055a7
 8005378:	080055a7 	.word	0x080055a7
 800537c:	080055a7 	.word	0x080055a7
 8005380:	080055a7 	.word	0x080055a7
 8005384:	080055a7 	.word	0x080055a7
 8005388:	080055a7 	.word	0x080055a7
 800538c:	080055a7 	.word	0x080055a7
 8005390:	080055a7 	.word	0x080055a7
 8005394:	080055a7 	.word	0x080055a7
 8005398:	080055a7 	.word	0x080055a7
 800539c:	080055a7 	.word	0x080055a7
 80053a0:	080055a7 	.word	0x080055a7
 80053a4:	080055a7 	.word	0x080055a7
 80053a8:	080055a7 	.word	0x080055a7
 80053ac:	080055a7 	.word	0x080055a7
 80053b0:	080055a7 	.word	0x080055a7
 80053b4:	080055a7 	.word	0x080055a7
 80053b8:	080055a7 	.word	0x080055a7
 80053bc:	080055a7 	.word	0x080055a7
 80053c0:	080055a7 	.word	0x080055a7
 80053c4:	080055a7 	.word	0x080055a7
 80053c8:	080055a7 	.word	0x080055a7
 80053cc:	080055a7 	.word	0x080055a7
 80053d0:	080055a7 	.word	0x080055a7
 80053d4:	080055a7 	.word	0x080055a7
 80053d8:	080055a7 	.word	0x080055a7
 80053dc:	080055a7 	.word	0x080055a7
 80053e0:	080055a7 	.word	0x080055a7
 80053e4:	080055a7 	.word	0x080055a7
 80053e8:	080055a7 	.word	0x080055a7
 80053ec:	080055a7 	.word	0x080055a7
 80053f0:	080055a7 	.word	0x080055a7
 80053f4:	080055a7 	.word	0x080055a7
 80053f8:	080055a7 	.word	0x080055a7
 80053fc:	080055a7 	.word	0x080055a7
 8005400:	080055a7 	.word	0x080055a7
 8005404:	080055a7 	.word	0x080055a7
 8005408:	080055a7 	.word	0x080055a7
 800540c:	080055a7 	.word	0x080055a7
 8005410:	080055a7 	.word	0x080055a7
 8005414:	08005459 	.word	0x08005459
 8005418:	08005535 	.word	0x08005535
 800541c:	08005499 	.word	0x08005499
 8005420:	08005565 	.word	0x08005565
 8005424:	080055a7 	.word	0x080055a7
 8005428:	080055a7 	.word	0x080055a7
 800542c:	080055a7 	.word	0x080055a7
 8005430:	080055eb 	.word	0x080055eb
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8005434:	f7fe ffbe 	bl	80043b4 <ESC_address>
         an = ESC_startmbx (ac);
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff f87e 	bl	800453c <ESC_startmbx>
 8005440:	4603      	mov	r3, r0
 8005442:	71bb      	strb	r3, [r7, #6]
         break;
 8005444:	e0d6      	b.n	80055f4 <ESC_state+0x464>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8005446:	f7fe ffb5 	bl	80043b4 <ESC_address>
         an = ESC_startmbxboot (ac);
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff f8bd 	bl	80045cc <ESC_startmbxboot>
 8005452:	4603      	mov	r3, r0
 8005454:	71bb      	strb	r3, [r7, #6]
         break;
 8005456:	e0cd      	b.n	80055f4 <ESC_state+0x464>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8005458:	2311      	movs	r3, #17
 800545a:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800545c:	2011      	movs	r0, #17
 800545e:	f7fe fe73 	bl	8004148 <ESC_ALerror>
         break;
 8005462:	e0c7      	b.n	80055f4 <ESC_state+0x464>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8005464:	f7ff fd6e 	bl	8004f44 <ESC_stopoutput>
         ESC_stopinput ();
 8005468:	f7ff fd26 	bl	8004eb8 <ESC_stopinput>
         ESC_stopmbx ();
 800546c:	f7ff f8f6 	bl	800465c <ESC_stopmbx>
         an = ESCinit;
 8005470:	2301      	movs	r3, #1
 8005472:	71bb      	strb	r3, [r7, #6]
         break;
 8005474:	e0be      	b.n	80055f4 <ESC_state+0x464>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8005476:	f7ff fd1f 	bl	8004eb8 <ESC_stopinput>
         ESC_stopmbx ();
 800547a:	f7ff f8ef 	bl	800465c <ESC_stopmbx>
         an = ESCinit;
 800547e:	2301      	movs	r3, #1
 8005480:	71bb      	strb	r3, [r7, #6]
         break;
 8005482:	e0b7      	b.n	80055f4 <ESC_state+0x464>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8005484:	f7ff f8ea 	bl	800465c <ESC_stopmbx>
         an = ESCinit;
 8005488:	2301      	movs	r3, #1
 800548a:	71bb      	strb	r3, [r7, #6]
         break;
 800548c:	e0b2      	b.n	80055f4 <ESC_state+0x464>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 800548e:	f7ff f8e5 	bl	800465c <ESC_stopmbx>
         an = ESCinit;
 8005492:	2301      	movs	r3, #1
 8005494:	71bb      	strb	r3, [r7, #6]
         break;
 8005496:	e0ad      	b.n	80055f4 <ESC_state+0x464>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8005498:	2312      	movs	r3, #18
 800549a:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800549c:	2011      	movs	r0, #17
 800549e:	f7fe fe53 	bl	8004148 <ESC_ALerror>
         break;
 80054a2:	e0a7      	b.n	80055f4 <ESC_state+0x464>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 80054a4:	2318      	movs	r3, #24
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <ESC_state+0x378>)
 80054a8:	4918      	ldr	r1, [pc, #96]	; (800550c <ESC_state+0x37c>)
 80054aa:	f641 4012 	movw	r0, #7186	; 0x1c12
 80054ae:	f000 f9dd 	bl	800586c <sizeOfPDO>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b12      	ldr	r3, [pc, #72]	; (8005500 <ESC_state+0x370>)
 80054b8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 80054bc:	4b10      	ldr	r3, [pc, #64]	; (8005500 <ESC_state+0x370>)
 80054be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	da05      	bge.n	80054d2 <ESC_state+0x342>
         {
            an = ESCpreop | ESCerror;
 80054c6:	2312      	movs	r3, #18
 80054c8:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 80054ca:	201d      	movs	r0, #29
 80054cc:	f7fe fe3c 	bl	8004148 <ESC_ALerror>
            break;
 80054d0:	e090      	b.n	80055f4 <ESC_state+0x464>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 80054d2:	2320      	movs	r3, #32
 80054d4:	4a0e      	ldr	r2, [pc, #56]	; (8005510 <ESC_state+0x380>)
 80054d6:	490f      	ldr	r1, [pc, #60]	; (8005514 <ESC_state+0x384>)
 80054d8:	f641 4013 	movw	r0, #7187	; 0x1c13
 80054dc:	f000 f9c6 	bl	800586c <sizeOfPDO>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <ESC_state+0x370>)
 80054e6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <ESC_state+0x370>)
 80054ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da11      	bge.n	8005518 <ESC_state+0x388>
         {
            an = ESCpreop | ESCerror;
 80054f4:	2312      	movs	r3, #18
 80054f6:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 80054f8:	201e      	movs	r0, #30
 80054fa:	f7fe fe25 	bl	8004148 <ESC_ALerror>
            break;
 80054fe:	e079      	b.n	80055f4 <ESC_state+0x464>
 8005500:	2000154c 	.word	0x2000154c
 8005504:	200015ce 	.word	0x200015ce
 8005508:	200012ac 	.word	0x200012ac
 800550c:	200015f8 	.word	0x200015f8
 8005510:	200013cc 	.word	0x200013cc
 8005514:	200015fc 	.word	0x200015fc
         }

         an = ESC_startinput (ac);
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fc50 	bl	8004dc0 <ESC_startinput>
 8005520:	4603      	mov	r3, r0
 8005522:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 8005524:	79bb      	ldrb	r3, [r7, #6]
 8005526:	79fa      	ldrb	r2, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d160      	bne.n	80055ee <ESC_state+0x45e>
         {
            ESC_SMenable (2);
 800552c:	2002      	movs	r0, #2
 800552e:	f7fe ff05 	bl	800433c <ESC_SMenable>
         }
         break;
 8005532:	e05c      	b.n	80055ee <ESC_state+0x45e>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8005534:	2312      	movs	r3, #18
 8005536:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8005538:	2011      	movs	r0, #17
 800553a:	f7fe fe05 	bl	8004148 <ESC_ALerror>
         break;
 800553e:	e059      	b.n	80055f4 <ESC_state+0x464>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8005540:	f7ff fd00 	bl	8004f44 <ESC_stopoutput>
         ESC_stopinput ();
 8005544:	f7ff fcb8 	bl	8004eb8 <ESC_stopinput>
         an = ESCpreop;
 8005548:	2302      	movs	r3, #2
 800554a:	71bb      	strb	r3, [r7, #6]
         break;
 800554c:	e052      	b.n	80055f4 <ESC_state+0x464>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 800554e:	f7ff fcb3 	bl	8004eb8 <ESC_stopinput>
         an = ESCpreop;
 8005552:	2302      	movs	r3, #2
 8005554:	71bb      	strb	r3, [r7, #6]
         break;
 8005556:	e04d      	b.n	80055f4 <ESC_state+0x464>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8005558:	2314      	movs	r3, #20
 800555a:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800555c:	2011      	movs	r0, #17
 800555e:	f7fe fdf3 	bl	8004148 <ESC_ALerror>
         break;
 8005562:	e047      	b.n	80055f4 <ESC_state+0x464>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fcc8 	bl	8004efc <ESC_startoutput>
 800556c:	4603      	mov	r3, r0
 800556e:	71bb      	strb	r3, [r7, #6]
         break;
 8005570:	e040      	b.n	80055f4 <ESC_state+0x464>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8005572:	2314      	movs	r3, #20
 8005574:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8005576:	2011      	movs	r0, #17
 8005578:	f7fe fde6 	bl	8004148 <ESC_ALerror>
         ESC_stopoutput ();
 800557c:	f7ff fce2 	bl	8004f44 <ESC_stopoutput>
         /* If no outputs present, we need to flag error using SM3 */
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 8005580:	4b37      	ldr	r3, [pc, #220]	; (8005660 <ESC_state+0x4d0>)
 8005582:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8005586:	2b00      	cmp	r3, #0
 8005588:	d133      	bne.n	80055f2 <ESC_state+0x462>
 800558a:	4b35      	ldr	r3, [pc, #212]	; (8005660 <ESC_state+0x4d0>)
 800558c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02e      	beq.n	80055f2 <ESC_state+0x462>
         {
            ESC_SMdisable (3);
 8005594:	2003      	movs	r0, #3
 8005596:	f7fe feef 	bl	8004378 <ESC_SMdisable>
         }
         break;
 800559a:	e02a      	b.n	80055f2 <ESC_state+0x462>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 800559c:	2304      	movs	r3, #4
 800559e:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 80055a0:	f7ff fcd0 	bl	8004f44 <ESC_stopoutput>
         break;
 80055a4:	e026      	b.n	80055f4 <ESC_state+0x464>
      }
      default:
      {
         if (an == ESCop)
 80055a6:	79bb      	ldrb	r3, [r7, #6]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d110      	bne.n	80055ce <ESC_state+0x43e>
         {
            ESC_stopoutput ();
 80055ac:	f7ff fcca 	bl	8004f44 <ESC_stopoutput>
            /* If no outputs present, we need to flag error using SM3 */
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 80055b0:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <ESC_state+0x4d0>)
 80055b2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <ESC_state+0x43a>
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <ESC_state+0x4d0>)
 80055bc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <ESC_state+0x43a>
            {
               ESC_SMdisable (3);
 80055c4:	2003      	movs	r0, #3
 80055c6:	f7fe fed7 	bl	8004378 <ESC_SMdisable>
            }
            an = ESCsafeop;
 80055ca:	2304      	movs	r3, #4
 80055cc:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 80055ce:	797b      	ldrb	r3, [r7, #5]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d101      	bne.n	80055d8 <ESC_state+0x448>
         {
            ESC_stopinput ();
 80055d4:	f7ff fc70 	bl	8004eb8 <ESC_stopinput>
         }
         an |= ESCerror;
 80055d8:	79bb      	ldrb	r3, [r7, #6]
 80055da:	f043 0310 	orr.w	r3, r3, #16
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 80055e2:	2012      	movs	r0, #18
 80055e4:	f7fe fdb0 	bl	8004148 <ESC_ALerror>
         break;
 80055e8:	e004      	b.n	80055f4 <ESC_state+0x464>
         break;
 80055ea:	bf00      	nop
 80055ec:	e002      	b.n	80055f4 <ESC_state+0x464>
         break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <ESC_state+0x464>
         break;
 80055f2:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <ESC_state+0x4d0>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <ESC_state+0x478>
   {
      ESCvar.post_state_change_hook (&as, &an);
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <ESC_state+0x4d0>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	1db9      	adds	r1, r7, #6
 8005602:	1d7a      	adds	r2, r7, #5
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8005608:	79bb      	ldrb	r3, [r7, #6]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <ESC_state+0x492>
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <ESC_state+0x4d0>)
 8005614:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <ESC_state+0x492>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 800561c:	2000      	movs	r0, #0
 800561e:	f7fe fd93 	bl	8004148 <ESC_ALerror>
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <ESC_state+0x4d0>)
 8005624:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8005628:	1dba      	adds	r2, r7, #6
 800562a:	4611      	mov	r1, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fd55 	bl	80050dc <ESC_check_id_request>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <ESC_state+0x4b8>
   {
      an |= ESC_load_device_id ();
 8005638:	f7ff fd82 	bl	8005140 <ESC_load_device_id>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	79bb      	ldrb	r3, [r7, #6]
 8005642:	4313      	orrs	r3, r2
 8005644:	b2db      	uxtb	r3, r3
 8005646:	71bb      	strb	r3, [r7, #6]
   }

   ESC_ALstatus (an);
 8005648:	79bb      	ldrb	r3, [r7, #6]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fd96 	bl	800417c <ESC_ALstatus>
 8005650:	e002      	b.n	8005658 <ESC_state+0x4c8>
      return;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <ESC_state+0x4c8>
      return;
 8005656:	bf00      	nop

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000154c 	.word	0x2000154c

08005664 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a36      	ldr	r2, [pc, #216]	; (800574c <ESC_config+0xe8>)
 8005672:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a34      	ldr	r2, [pc, #208]	; (800574c <ESC_config+0xe8>)
 800567a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc

   ESCvar.mb[0] = mb0;
 800567e:	4b33      	ldr	r3, [pc, #204]	; (800574c <ESC_config+0xe8>)
 8005680:	4a33      	ldr	r2, [pc, #204]	; (8005750 <ESC_config+0xec>)
 8005682:	3304      	adds	r3, #4
 8005684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005688:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 800568c:	4b2f      	ldr	r3, [pc, #188]	; (800574c <ESC_config+0xe8>)
 800568e:	4a31      	ldr	r2, [pc, #196]	; (8005754 <ESC_config+0xf0>)
 8005690:	330c      	adds	r3, #12
 8005692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005696:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 800569a:	4b2c      	ldr	r3, [pc, #176]	; (800574c <ESC_config+0xe8>)
 800569c:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <ESC_config+0xf4>)
 800569e:	3314      	adds	r3, #20
 80056a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056a4:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 80056a8:	4b28      	ldr	r3, [pc, #160]	; (800574c <ESC_config+0xe8>)
 80056aa:	4a2c      	ldr	r2, [pc, #176]	; (800575c <ESC_config+0xf8>)
 80056ac:	331c      	adds	r3, #28
 80056ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056b2:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	7b1a      	ldrb	r2, [r3, #12]
 80056ba:	4b24      	ldr	r3, [pc, #144]	; (800574c <ESC_config+0xe8>)
 80056bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <ESC_config+0xe8>)
 80056c6:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4a1f      	ldr	r2, [pc, #124]	; (800574c <ESC_config+0xe8>)
 80056ce:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	4a1d      	ldr	r2, [pc, #116]	; (800574c <ESC_config+0xe8>)
 80056d6:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.application_hook = cfg->application_hook;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	4a1b      	ldr	r2, [pc, #108]	; (800574c <ESC_config+0xe8>)
 80056de:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <ESC_config+0xe8>)
 80056e6:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <ESC_config+0xe8>)
 80056ee:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	4a15      	ldr	r2, [pc, #84]	; (800574c <ESC_config+0xe8>)
 80056f6:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <ESC_config+0xe8>)
 80056fe:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	4a11      	ldr	r2, [pc, #68]	; (800574c <ESC_config+0xe8>)
 8005706:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	4a0f      	ldr	r2, [pc, #60]	; (800574c <ESC_config+0xe8>)
 800570e:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	4a0d      	ldr	r2, [pc, #52]	; (800574c <ESC_config+0xe8>)
 8005716:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	4a0b      	ldr	r2, [pc, #44]	; (800574c <ESC_config+0xe8>)
 800571e:	6553      	str	r3, [r2, #84]	; 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	4a09      	ldr	r2, [pc, #36]	; (800574c <ESC_config+0xe8>)
 8005726:	6593      	str	r3, [r2, #88]	; 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572c:	4a07      	ldr	r2, [pc, #28]	; (800574c <ESC_config+0xe8>)
 800572e:	65d3      	str	r3, [r2, #92]	; 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005734:	4a05      	ldr	r2, [pc, #20]	; (800574c <ESC_config+0xe8>)
 8005736:	6613      	str	r3, [r2, #96]	; 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	4a03      	ldr	r2, [pc, #12]	; (800574c <ESC_config+0xe8>)
 800573e:	6653      	str	r3, [r2, #100]	; 0x64
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	2000154c 	.word	0x2000154c
 8005750:	20000a7c 	.word	0x20000a7c
 8005754:	20000a84 	.word	0x20000a84
 8005758:	20000a8c 	.word	0x20000a8c
 800575c:	20000a94 	.word	0x20000a94

08005760 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int32_t nidx, uint8_t subindex)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
   const _objd *objd;
   int16_t n = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <SDO_findsubindex+0xb8>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	4413      	add	r3, r2
 8005778:	330c      	adds	r3, #12
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 800577e:	4a26      	ldr	r2, [pc, #152]	; (8005818 <SDO_findsubindex+0xb8>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	4413      	add	r3, r2
 8005786:	3304      	adds	r3, #4
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	73fb      	strb	r3, [r7, #15]

   /* Since most objects contain all subindexes (i.e. are not sparse),
    * check the most likely scenario first
    */
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	429a      	cmp	r2, r3
 8005792:	d815      	bhi.n	80057c0 <SDO_findsubindex+0x60>
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	461a      	mov	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d108      	bne.n	80057c0 <SDO_findsubindex+0x60>
   {
      return subindex;
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	b21b      	sxth	r3, r3
 80057b2:	e02b      	b.n	800580c <SDO_findsubindex+0xac>
   }

   while (((objd + n)->subindex < subindex) && (n < maxsub))
   {
      n++;
 80057b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3301      	adds	r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 80057c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	461a      	mov	r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	881a      	ldrh	r2, [r3, #0]
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	429a      	cmp	r2, r3
 80057da:	d204      	bcs.n	80057e6 <SDO_findsubindex+0x86>
 80057dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	dbe6      	blt.n	80057b4 <SDO_findsubindex+0x54>
   }
   if ((objd + n)->subindex != subindex)
 80057e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	461a      	mov	r2, r3
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	429a      	cmp	r2, r3
 8005800:	d002      	beq.n	8005808 <SDO_findsubindex+0xa8>
   {
      return -1;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005806:	e001      	b.n	800580c <SDO_findsubindex+0xac>
   }
   return n;
 8005808:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	080168f4 	.word	0x080168f4

0800581c <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 800582a:	e002      	b.n	8005832 <SDO_findobject+0x16>
   {
      n++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8005832:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <SDO_findobject+0x4c>)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	88fa      	ldrh	r2, [r7, #6]
 800583e:	429a      	cmp	r2, r3
 8005840:	d8f4      	bhi.n	800582c <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <SDO_findobject+0x4c>)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	429a      	cmp	r2, r3
 8005850:	d002      	beq.n	8005858 <SDO_findobject+0x3c>
   {
      return -1;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005856:	e000      	b.n	800585a <SDO_findobject+0x3e>
   }
   return n;
 8005858:	68fb      	ldr	r3, [r7, #12]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	080168f4 	.word	0x080168f4

0800586c <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b090      	sub	sp, #64	; 0x40
 8005870:	af00      	add	r7, sp, #0
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4603      	mov	r3, r0
 800587a:	81fb      	strh	r3, [r7, #14]
   uint32_t offset = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
   uint16_t hobj;
   uint8_t si, sic, c;
   int32_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	633b      	str	r3, [r7, #48]	; 0x30

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 8005884:	89fb      	ldrh	r3, [r7, #14]
 8005886:	f641 4212 	movw	r2, #7186	; 0x1c12
 800588a:	4293      	cmp	r3, r2
 800588c:	d006      	beq.n	800589c <sizeOfPDO+0x30>
 800588e:	89fb      	ldrh	r3, [r7, #14]
 8005890:	f641 4213 	movw	r2, #7187	; 0x1c13
 8005894:	4293      	cmp	r3, r2
 8005896:	d001      	beq.n	800589c <sizeOfPDO+0x30>
   {
      return 0;
 8005898:	2300      	movs	r3, #0
 800589a:	e134      	b.n	8005b06 <sizeOfPDO+0x29a>
   }

   nidx = SDO_findobject (index);
 800589c:	89fb      	ldrh	r3, [r7, #14]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff ffbc 	bl	800581c <SDO_findobject>
 80058a4:	6378      	str	r0, [r7, #52]	; 0x34
   if(nidx < 0)
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da01      	bge.n	80058b0 <sizeOfPDO+0x44>
   {
      return 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e12a      	b.n	8005b06 <sizeOfPDO+0x29a>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 80058b0:	4a97      	ldr	r2, [pc, #604]	; (8005b10 <sizeOfPDO+0x2a4>)
 80058b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	4413      	add	r3, r2
 80058b8:	330c      	adds	r3, #12
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <sizeOfPDO+0x62>
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	e002      	b.n	80058d4 <sizeOfPDO+0x68>
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (si)
 80058d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8104 	beq.w	8005aea <sizeOfPDO+0x27e>
   {
      for (sic = 1; sic <= si; sic++)
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058e8:	e0f8      	b.n	8005adc <sizeOfPDO+0x270>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 80058ea:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	461a      	mov	r2, r3
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	4413      	add	r3, r2
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <sizeOfPDO+0xae>
 8005902:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	461a      	mov	r2, r3
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	4413      	add	r3, r2
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	e00a      	b.n	8005930 <sizeOfPDO+0xc4>
 800591a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	461a      	mov	r2, r3
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	4413      	add	r3, r2
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	b29b      	uxth	r3, r3
 8005930:	84bb      	strh	r3, [r7, #36]	; 0x24
         nidx = SDO_findobject (hobj);
 8005932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff ff71 	bl	800581c <SDO_findobject>
 800593a:	6378      	str	r0, [r7, #52]	; 0x34
         if (nidx >= 0)
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	f2c0 80c7 	blt.w	8005ad2 <sizeOfPDO+0x266>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 8005944:	4a72      	ldr	r2, [pc, #456]	; (8005b10 <sizeOfPDO+0x2a4>)
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	4413      	add	r3, r2
 800594c:	330c      	adds	r3, #12
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	623b      	str	r3, [r7, #32]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <sizeOfPDO+0xf6>
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	e002      	b.n	8005968 <sizeOfPDO+0xfc>
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	77fb      	strb	r3, [r7, #31]

            for (c = 1; c <= maxsub; c++)
 800596a:	2301      	movs	r3, #1
 800596c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005970:	e0a9      	b.n	8005ac6 <sizeOfPDO+0x25a>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 8005972:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	461a      	mov	r2, r3
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	4413      	add	r3, r2
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <sizeOfPDO+0x136>
 800598a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	461a      	mov	r2, r3
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	4413      	add	r3, r2
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	e009      	b.n	80059b6 <sizeOfPDO+0x14a>
 80059a2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	461a      	mov	r2, r3
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	4413      	add	r3, r2
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	61bb      	str	r3, [r7, #24]
               uint8_t bitlength = value & 0xFF;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	75fb      	strb	r3, [r7, #23]

               if (max_mappings > 0)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dd78      	ble.n	8005ab4 <sizeOfPDO+0x248>
               {
                  uint16_t index = (uint16_t)(value >> 16);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	82bb      	strh	r3, [r7, #20]
                  uint8_t subindex = (value >> 8) & 0xFF;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	74fb      	strb	r3, [r7, #19]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 80059ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d105      	bne.n	80059e2 <sizeOfPDO+0x176>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059dc:	601a      	str	r2, [r3, #0]
                     return 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	e091      	b.n	8005b06 <sizeOfPDO+0x29a>
                  }

                  DPRINT ("%04x:%02x @ %d\n", index, subindex, offset);

                  if (index == 0 && subindex == 0)
 80059e2:	8abb      	ldrh	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <sizeOfPDO+0x188>
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <sizeOfPDO+0x188>
                  {
                     /* Padding element */
                     mapping = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f2:	e02d      	b.n	8005a50 <sizeOfPDO+0x1e4>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 80059f4:	8abb      	ldrh	r3, [r7, #20]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ff10 	bl	800581c <SDO_findobject>
 80059fc:	6378      	str	r0, [r7, #52]	; 0x34
                     if (nidx >= 0)
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db1f      	blt.n	8005a44 <sizeOfPDO+0x1d8>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a0a:	f7ff fea9 	bl	8005760 <SDO_findsubindex>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	823b      	strh	r3, [r7, #16]
                        if (nsub < 0)
 8005a12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da05      	bge.n	8005a26 <sizeOfPDO+0x1ba>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a20:	601a      	str	r2, [r3, #0]
                           return 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e06f      	b.n	8005b06 <sizeOfPDO+0x29a>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 8005a26:	4a3a      	ldr	r2, [pc, #232]	; (8005b10 <sizeOfPDO+0x2a4>)
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	4413      	add	r3, r2
 8005a2e:	330c      	adds	r3, #12
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a42:	e005      	b.n	8005a50 <sizeOfPDO+0x1e4>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a4a:	601a      	str	r2, [r3, #0]
                        return 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e05a      	b.n	8005b06 <sizeOfPDO+0x29a>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 8005a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a62:	601a      	str	r2, [r3, #0]
                  /* Save object list reference */
                  if(mapping != NULL)
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <sizeOfPDO+0x21a>
                  {
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7c:	0112      	lsls	r2, r2, #4
 8005a7e:	4924      	ldr	r1, [pc, #144]	; (8005b10 <sizeOfPDO+0x2a4>)
 8005a80:	440a      	add	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	e009      	b.n	8005a9a <sizeOfPDO+0x22e>
                  }
                  else
                  {
                     mappings[mapIx].objectlistitem = NULL;
 8005a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a88:	4613      	mov	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	461a      	mov	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4413      	add	r3, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
                  }
                  mappings[mapIx++].offset = offset;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	461a      	mov	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab2:	609a      	str	r2, [r3, #8]
               }

               offset += bitlength;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ab8:	4413      	add	r3, r2
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (c = 1; c <= maxsub; c++)
 8005abc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005ac6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	f67f af50 	bls.w	8005972 <sizeOfPDO+0x106>
      for (sic = 1; sic <= si; sic++)
 8005ad2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005adc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	f67f af00 	bls.w	80058ea <sizeOfPDO+0x7e>
            }
         }
      }
   }

   if (max_mappings > 0)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd03      	ble.n	8005af8 <sizeOfPDO+0x28c>
   {
      *nmappings = mapIx;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e002      	b.n	8005afe <sizeOfPDO+0x292>
   }
   else
   {
      *nmappings = 0;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset) & 0xFFFF;
 8005afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b00:	3307      	adds	r3, #7
 8005b02:	08db      	lsrs	r3, r3, #3
 8005b04:	b29b      	uxth	r3, r3
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3740      	adds	r7, #64	; 0x40
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	080168f4 	.word	0x080168f4

08005b14 <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
static void copy2mbx (void *source, void *dest, size_t size)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
   memcpy (dest, source, size);
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	68b8      	ldr	r0, [r7, #8]
 8005b26:	f00d fb64 	bl	80131f2 <memcpy>
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
static void SDO_abort (uint8_t reusembx, uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	71fb      	strb	r3, [r7, #7]
 8005b40:	460b      	mov	r3, r1
 8005b42:	80bb      	strh	r3, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71bb      	strb	r3, [r7, #6]
   uint8_t MBXout;
   _COEsdo *coeres;
   if (reusembx)
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <SDO_abort+0x20>
      MBXout = reusembx;
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	e003      	b.n	8005b5c <SDO_abort+0x28>
   else
      MBXout = ESC_claimbuffer ();
 8005b54:	f7fe fe7e 	bl	8004854 <ESC_claimbuffer>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d025      	beq.n	8005bae <SDO_abort+0x7a>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <SDO_abort+0x84>)
 8005b66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <SDO_abort+0x88>)
 8005b6e:	4413      	add	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	220a      	movs	r2, #10
 8005b76:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	7953      	ldrb	r3, [r2, #5]
 8005b7c:	2103      	movs	r1, #3
 8005b7e:	f361 0303 	bfi	r3, r1, #0, #4
 8005b82:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b8a:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	88ba      	ldrh	r2, [r7, #4]
 8005b90:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	79ba      	ldrb	r2, [r7, #6]
 8005b98:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2280      	movs	r2, #128	; 0x80
 8005b9e:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <SDO_abort+0x8c>)
 8005baa:	2103      	movs	r1, #3
 8005bac:	54d1      	strb	r1, [r2, r3]
   }
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	2000154c 	.word	0x2000154c
 8005bbc:	20000ca8 	.word	0x20000ca8
 8005bc0:	200012a8 	.word	0x200012a8

08005bc4 <set_state_idle>:

static void set_state_idle (uint8_t reusembx,
                           uint16_t index,
                           uint8_t subindex,
                           uint32_t abortcode)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4603      	mov	r3, r0
 8005bce:	71fb      	strb	r3, [r7, #7]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	80bb      	strh	r3, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71bb      	strb	r3, [r7, #6]
   if (abortcode != 0)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <set_state_idle+0x26>
   {
      SDO_abort (reusembx, index, subindex, abortcode);
 8005bde:	79ba      	ldrb	r2, [r7, #6]
 8005be0:	88b9      	ldrh	r1, [r7, #4]
 8005be2:	79f8      	ldrb	r0, [r7, #7]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f7ff ffa5 	bl	8005b34 <SDO_abort>
   }

   MBXcontrol[0].state = MBXstate_idle;
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <set_state_idle+0x3c>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <set_state_idle+0x40>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	200012a8 	.word	0x200012a8
 8005c04:	2000154c 	.word	0x2000154c

08005c08 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
static void SDO_upload (void)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b08f      	sub	sp, #60	; 0x3c
 8005c0c:	af02      	add	r7, sp, #8
   int32_t nidx;
   int32_t nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   uint32_t abort = 1;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 8005c12:	4b8c      	ldr	r3, [pc, #560]	; (8005e44 <SDO_upload+0x23c>)
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
   index = etohs (coesdo->index);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8005c1e:	847b      	strh	r3, [r7, #34]	; 0x22
   subindex = coesdo->subindex;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	7adb      	ldrb	r3, [r3, #11]
 8005c24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   nidx = SDO_findobject (index);
 8005c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fdf6 	bl	800581c <SDO_findobject>
 8005c30:	61f8      	str	r0, [r7, #28]
   if (nidx >= 0)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f2c0 81b3 	blt.w	8005fa0 <SDO_upload+0x398>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8005c3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005c3e:	4619      	mov	r1, r3
 8005c40:	69f8      	ldr	r0, [r7, #28]
 8005c42:	f7ff fd8d 	bl	8005760 <SDO_findsubindex>
 8005c46:	4603      	mov	r3, r0
 8005c48:	61bb      	str	r3, [r7, #24]
      if (nsub >= 0)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f2c0 819f 	blt.w	8005f90 <SDO_upload+0x388>
      {
         objd = SDOobjects[nidx].objdesc;
 8005c52:	4a7d      	ldr	r2, [pc, #500]	; (8005e48 <SDO_upload+0x240>)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	88db      	ldrh	r3, [r3, #6]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c78:	74fb      	strb	r3, [r7, #19]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 8005c7a:	4b74      	ldr	r3, [pc, #464]	; (8005e4c <SDO_upload+0x244>)
 8005c7c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	74bb      	strb	r3, [r7, #18]
         if (!READ_ACCESS(access, state))
 8005c88:	7cfb      	ldrb	r3, [r7, #19]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <SDO_upload+0x90>
 8005c92:	7cbb      	ldrb	r3, [r7, #18]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d017      	beq.n	8005cc8 <SDO_upload+0xc0>
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <SDO_upload+0xa0>
 8005ca2:	7cbb      	ldrb	r3, [r7, #18]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d00f      	beq.n	8005cc8 <SDO_upload+0xc0>
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <SDO_upload+0xb0>
 8005cb2:	7cbb      	ldrb	r3, [r7, #18]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d007      	beq.n	8005cc8 <SDO_upload+0xc0>
         {
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 8005cb8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005cbc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005cbe:	4b64      	ldr	r3, [pc, #400]	; (8005e50 <SDO_upload+0x248>)
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7ff ff7f 	bl	8005bc4 <set_state_idle>
            return;
 8005cc6:	e179      	b.n	8005fbc <SDO_upload+0x3b4>
         }
         MBXout = ESC_claimbuffer ();
 8005cc8:	f7fe fdc4 	bl	8004854 <ESC_claimbuffer>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	747b      	strb	r3, [r7, #17]
         if (MBXout)
 8005cd0:	7c7b      	ldrb	r3, [r7, #17]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 816b 	beq.w	8005fae <SDO_upload+0x3a6>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8005cd8:	7c7b      	ldrb	r3, [r7, #17]
 8005cda:	4a5c      	ldr	r2, [pc, #368]	; (8005e4c <SDO_upload+0x244>)
 8005cdc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	4a58      	ldr	r2, [pc, #352]	; (8005e44 <SDO_upload+0x23c>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	220a      	movs	r2, #10
 8005cec:	801a      	strh	r2, [r3, #0]
            coeres->mbxheader.mbxtype = MBXCOE;
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	7953      	ldrb	r3, [r2, #5]
 8005cf2:	2103      	movs	r1, #3
 8005cf4:	f361 0303 	bfi	r3, r1, #0, #4
 8005cf8:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005d00:	80da      	strh	r2, [r3, #6]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	889b      	ldrh	r3, [r3, #4]
 8005d14:	607b      	str	r3, [r7, #4]
            /* expedited bits used calculation */
            dss = 0x0c;
 8005d16:	230c      	movs	r3, #12
 8005d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (size > 8)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d902      	bls.n	8005d28 <SDO_upload+0x120>
            {
               dss = 0x08;
 8005d22:	2308      	movs	r3, #8
 8005d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 16)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d902      	bls.n	8005d34 <SDO_upload+0x12c>
            {
               dss = 0x04;
 8005d2e:	2304      	movs	r3, #4
 8005d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if (size > 24)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b18      	cmp	r3, #24
 8005d38:	d902      	bls.n	8005d40 <SDO_upload+0x138>
            {
               dss = 0x00;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            coeres->index = htoes (index);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d44:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d4e:	72da      	strb	r2, [r3, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2241      	movs	r2, #65	; 0x41
 8005d54:	721a      	strb	r2, [r3, #8]
               COE_SIZE_INDICATOR;
            /* convert bits to bytes */
            size = BITS2BYTES(size);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3307      	adds	r3, #7
 8005d5a:	08db      	lsrs	r3, r3, #3
 8005d5c:	607b      	str	r3, [r7, #4]
            if (size <= 4)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d877      	bhi.n	8005e54 <SDO_upload+0x24c>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	7a1a      	ldrb	r2, [r3, #8]
 8005d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f043 0302 	orr.w	r3, r3, #2
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	721a      	strb	r2, [r3, #8]
               void *dataptr = ((objd + nsub)->data) ?
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	461a      	mov	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	691b      	ldr	r3, [r3, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <SDO_upload+0x19c>
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	e008      	b.n	8005db6 <SDO_upload+0x1ae>
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	461a      	mov	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	330c      	adds	r3, #12
               void *dataptr = ((objd + nsub)->data) ?
 8005db6:	60bb      	str	r3, [r7, #8]
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 8005dc8:	88db      	ldrh	r3, [r3, #6]
 8005dca:	1d3a      	adds	r2, r7, #4
 8005dcc:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8005dd0:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	f7fe f806 	bl	8003de8 <ESC_upload_pre_objecthandler>
 8005ddc:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d126      	bne.n	8005e32 <SDO_upload+0x22a>
               {
                  if ((objd + nsub)->data == NULL)
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	461a      	mov	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	4413      	add	r3, r2
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <SDO_upload+0x20a>
                  {
                     /* use constant value */
                     coeres->size = htoel ((objd + nsub)->value);
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	461a      	mov	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e096      	b.n	8005f40 <SDO_upload+0x338>
                  }
                  else
                  {
                     /* use dynamic data */
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	4413      	add	r3, r2
 8005e22:	6918      	ldr	r0, [r3, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	330c      	adds	r3, #12
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f7ff fe72 	bl	8005b14 <copy2mbx>
 8005e30:	e086      	b.n	8005f40 <SDO_upload+0x338>
                  }
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 8005e32:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e36:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005e38:	7c78      	ldrb	r0, [r7, #17]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	f7ff fec2 	bl	8005bc4 <set_state_idle>
                  return;
 8005e40:	e0bc      	b.n	8005fbc <SDO_upload+0x3b4>
 8005e42:	bf00      	nop
 8005e44:	20000ca8 	.word	0x20000ca8
 8005e48:	080168f4 	.word	0x080168f4
 8005e4c:	2000154c 	.word	0x2000154c
 8005e50:	06010001 	.word	0x06010001
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	461a      	mov	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 8005e64:	691c      	ldr	r4, [r3, #16]
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	461a      	mov	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
               abort = ESC_upload_pre_objecthandler (index, subindex,
 8005e76:	88db      	ldrh	r3, [r3, #6]
 8005e78:	1d3a      	adds	r2, r7, #4
 8005e7a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8005e7e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	4622      	mov	r2, r4
 8005e86:	f7fd ffaf 	bl	8003de8 <ESC_upload_pre_objecthandler>
 8005e8a:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort == 0)
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d14e      	bne.n	8005f30 <SDO_upload+0x328>
               {
                  /* set total size in bytes */
                  ESCvar.frags = size;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a4b      	ldr	r2, [pc, #300]	; (8005fc4 <SDO_upload+0x3bc>)
 8005e96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                  coeres->size = htoel (size);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	60da      	str	r2, [r3, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f103 020a 	add.w	r2, r3, #10
 8005ea6:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <SDO_upload+0x3bc>)
 8005ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eaa:	3b06      	subs	r3, #6
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d924      	bls.n	8005efa <SDO_upload+0x2f2>
                  {
                     /* segmented transfer needed */
                     /* limit to mailbox size */
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8005eb0:	4b44      	ldr	r3, [pc, #272]	; (8005fc4 <SDO_upload+0x3bc>)
 8005eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb4:	3b10      	subs	r3, #16
 8005eb6:	607b      	str	r3, [r7, #4]
                     /* number of bytes done */
                     ESCvar.fragsleft = size;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a42      	ldr	r2, [pc, #264]	; (8005fc4 <SDO_upload+0x3bc>)
 8005ebc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
                     /* signal segmented transfer */
                     ESCvar.segmented = MBXSEU;
 8005ec0:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <SDO_upload+0x3bc>)
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                     ESCvar.data = (objd + nsub)->data;
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	4a3a      	ldr	r2, [pc, #232]	; (8005fc4 <SDO_upload+0x3bc>)
 8005edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	461a      	mov	r2, r3
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	88da      	ldrh	r2, [r3, #6]
 8005ef2:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <SDO_upload+0x3bc>)
 8005ef4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005ef8:	e003      	b.n	8005f02 <SDO_upload+0x2fa>
                  }
                  else
                  {
                     ESCvar.segmented = 0;
 8005efa:	4b32      	ldr	r3, [pc, #200]	; (8005fc4 <SDO_upload+0x3bc>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  }
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	330a      	adds	r3, #10
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	801a      	strh	r2, [r3, #0]

                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	6918      	ldr	r0, [r3, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	330c      	adds	r3, #12
 8005f24:	3304      	adds	r3, #4
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f7ff fdf3 	bl	8005b14 <copy2mbx>
 8005f2e:	e007      	b.n	8005f40 <SDO_upload+0x338>
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 8005f30:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005f34:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005f36:	7c78      	ldrb	r0, [r7, #17]
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	f7ff fe43 	bl	8005bc4 <set_state_idle>
                  return;
 8005f3e:	e03d      	b.n	8005fbc <SDO_upload+0x3b4>
               }
            }
            if ((abort == 0) && (ESCvar.segmented == 0))
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11f      	bne.n	8005f86 <SDO_upload+0x37e>
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <SDO_upload+0x3bc>)
 8005f48:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11a      	bne.n	8005f86 <SDO_upload+0x37e>
            {
               abort = ESC_upload_post_objecthandler (index, subindex,
                                                      (objd + nsub)->flags);
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
               abort = ESC_upload_post_objecthandler (index, subindex,
 8005f60:	88da      	ldrh	r2, [r3, #6]
 8005f62:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8005f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd ff5d 	bl	8003e28 <ESC_upload_post_objecthandler>
 8005f6e:	62b8      	str	r0, [r7, #40]	; 0x28
               if (abort != 0)
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <SDO_upload+0x37e>
               {
                  set_state_idle (MBXout, index, subindex, abort);
 8005f76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005f7a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005f7c:	7c78      	ldrb	r0, [r7, #17]
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	f7ff fe20 	bl	8005bc4 <set_state_idle>
                  return;
 8005f84:	e01a      	b.n	8005fbc <SDO_upload+0x3b4>
               }
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8005f86:	7c7b      	ldrb	r3, [r7, #17]
 8005f88:	4a0f      	ldr	r2, [pc, #60]	; (8005fc8 <SDO_upload+0x3c0>)
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	54d1      	strb	r1, [r2, r3]
 8005f8e:	e00e      	b.n	8005fae <SDO_upload+0x3a6>
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 8005f90:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005f94:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <SDO_upload+0x3c4>)
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f7ff fdcb 	bl	8005b34 <SDO_abort>
 8005f9e:	e006      	b.n	8005fae <SDO_upload+0x3a6>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 8005fa0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005fa4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <SDO_upload+0x3c8>)
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f7ff fdc3 	bl	8005b34 <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <SDO_upload+0x3c0>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <SDO_upload+0x3bc>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8005fbc:	3734      	adds	r7, #52	; 0x34
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd90      	pop	{r4, r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000154c 	.word	0x2000154c
 8005fc8:	200012a8 	.word	0x200012a8
 8005fcc:	06090011 	.word	0x06090011
 8005fd0:	06020000 	.word	0x06020000

08005fd4 <complete_access_get_variables>:

static uint32_t complete_access_get_variables(_COEsdo *coesdo, uint16_t *index,
                                              uint8_t *subindex, int32_t *nidx,
                                              int16_t *nsub)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
   *index = etohs (coesdo->index);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	801a      	strh	r2, [r3, #0]
   *subindex = coesdo->subindex;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	7ada      	ldrb	r2, [r3, #11]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	701a      	strb	r2, [r3, #0]

   /* A Complete Access must start with Subindex 0 or Subindex 1 */
   if (*subindex > 1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d901      	bls.n	8006002 <complete_access_get_variables+0x2e>
   {
      return ABORT_UNSUPPORTED;
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <complete_access_get_variables+0x7c>)
 8006000:	e021      	b.n	8006046 <complete_access_get_variables+0x72>
   }

   *nidx = SDO_findobject (*index);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fc08 	bl	800581c <SDO_findobject>
 800600c:	4602      	mov	r2, r0
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	601a      	str	r2, [r3, #0]
   if (*nidx < 0)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	da01      	bge.n	800601e <complete_access_get_variables+0x4a>
   {
      return ABORT_NOOBJECT;
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <complete_access_get_variables+0x80>)
 800601c:	e013      	b.n	8006046 <complete_access_get_variables+0x72>
   }

   *nsub = SDO_findsubindex (*nidx, *subindex);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f7ff fb99 	bl	8005760 <SDO_findsubindex>
 800602e:	4603      	mov	r3, r0
 8006030:	461a      	mov	r2, r3
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	801a      	strh	r2, [r3, #0]
   if (*nsub < 0)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da01      	bge.n	8006044 <complete_access_get_variables+0x70>
   {
      return ABORT_NOSUBINDEX;
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <complete_access_get_variables+0x84>)
 8006042:	e000      	b.n	8006046 <complete_access_get_variables+0x72>
   }

   return 0;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	06010000 	.word	0x06010000
 8006054:	06020000 	.word	0x06020000
 8006058:	06090011 	.word	0x06090011

0800605c <complete_access_subindex_loop>:
                                              int32_t nidx,
                                              int16_t nsub,
                                              uint8_t *mbxdata,
                                              load_t load_type,
                                              uint32_t max_bytes)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
   /* Objects with dynamic entries cannot be accessed with Complete Access */
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	885b      	ldrh	r3, [r3, #2]
 8006070:	2b09      	cmp	r3, #9
 8006072:	d007      	beq.n	8006084 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	885b      	ldrh	r3, [r3, #2]
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 8006078:	2b0a      	cmp	r3, #10
 800607a:	d003      	beq.n	8006084 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_UNICODE_STRING))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	885b      	ldrh	r3, [r3, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 8006080:	2b0b      	cmp	r3, #11
 8006082:	d101      	bne.n	8006088 <complete_access_subindex_loop+0x2c>
   {
      return ABORT_CA_NOT_SUPPORTED;
 8006084:	4ba6      	ldr	r3, [pc, #664]	; (8006320 <complete_access_subindex_loop+0x2c4>)
 8006086:	e153      	b.n	8006330 <complete_access_subindex_loop+0x2d4>
   }

   uint32_t size = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	627b      	str	r3, [r7, #36]	; 0x24

   /* Clear padded mbxdata byte [1] on upload */
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 800608c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 8139 	bne.w	8006308 <complete_access_subindex_loop+0x2ac>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8135 	beq.w	8006308 <complete_access_subindex_loop+0x2ac>
   {
      mbxdata[1] = 0;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]
   }

   while (nsub <= SDOobjects[nidx].maxsub)
 80060a6:	e12f      	b.n	8006308 <complete_access_subindex_loop+0x2ac>
   {
      uint16_t bitlen = (objd + nsub)->bitlength;
 80060a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	461a      	mov	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	889b      	ldrh	r3, [r3, #4]
 80060bc:	847b      	strh	r3, [r7, #34]	; 0x22
      void *ul_source = ((objd + nsub)->data != NULL) ?
 80060be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	691b      	ldr	r3, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <complete_access_subindex_loop+0x90>
 80060d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	461a      	mov	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	e009      	b.n	8006100 <complete_access_subindex_loop+0xa4>
 80060ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	330c      	adds	r3, #12
      void *ul_source = ((objd + nsub)->data != NULL) ?
 8006100:	61fb      	str	r3, [r7, #28]
      uint8_t bitoffset = size % 8;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	b2db      	uxtb	r3, r3
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	76fb      	strb	r3, [r7, #27]
      uint8_t access = (objd + nsub)->flags & 0x3f;
 800610c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	461a      	mov	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	88db      	ldrh	r3, [r3, #6]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006126:	76bb      	strb	r3, [r7, #26]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 8006128:	4b7e      	ldr	r3, [pc, #504]	; (8006324 <complete_access_subindex_loop+0x2c8>)
 800612a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	767b      	strb	r3, [r7, #25]

      if ((bitlen % 8) == 0)
 8006136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d16f      	bne.n	8006222 <complete_access_subindex_loop+0x1c6>
      {
         if (bitoffset != 0)
 8006142:	7efb      	ldrb	r3, [r7, #27]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <complete_access_subindex_loop+0xf6>
         {
            /* move on to next byte boundary */
            size += (8U - bitoffset);
 8006148:	7efb      	ldrb	r3, [r7, #27]
 800614a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	3308      	adds	r3, #8
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
         }
         if (mbxdata != NULL)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80be 	beq.w	80062d6 <complete_access_subindex_loop+0x27a>
         {
            /* copy a non-bit data type to a byte boundary */
            if (load_type == UPLOAD)
 800615a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800615e:	2b00      	cmp	r3, #0
 8006160:	d131      	bne.n	80061c6 <complete_access_subindex_loop+0x16a>
            {
               if (READ_ACCESS(access, state))
 8006162:	7ebb      	ldrb	r3, [r7, #26]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <complete_access_subindex_loop+0x116>
 800616c:	7e7b      	ldrb	r3, [r7, #25]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d00f      	beq.n	8006192 <complete_access_subindex_loop+0x136>
 8006172:	7ebb      	ldrb	r3, [r7, #26]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <complete_access_subindex_loop+0x126>
 800617c:	7e7b      	ldrb	r3, [r7, #25]
 800617e:	2b04      	cmp	r3, #4
 8006180:	d007      	beq.n	8006192 <complete_access_subindex_loop+0x136>
 8006182:	7ebb      	ldrb	r3, [r7, #26]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00f      	beq.n	80061ac <complete_access_subindex_loop+0x150>
 800618c:	7e7b      	ldrb	r3, [r7, #25]
 800618e:	2b08      	cmp	r3, #8
 8006190:	d10c      	bne.n	80061ac <complete_access_subindex_loop+0x150>
               {
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	3307      	adds	r3, #7
 8006196:	08db      	lsrs	r3, r3, #3
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	18d0      	adds	r0, r2, r3
                        BITS2BYTES(bitlen));
 800619c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800619e:	3307      	adds	r3, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 80061a0:	08db      	lsrs	r3, r3, #3
 80061a2:	461a      	mov	r2, r3
 80061a4:	69f9      	ldr	r1, [r7, #28]
 80061a6:	f00d f824 	bl	80131f2 <memcpy>
 80061aa:	e094      	b.n	80062d6 <complete_access_subindex_loop+0x27a>
               }
               else
               {
                  /* return zeroes for upload of WO objects */
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	3307      	adds	r3, #7
 80061b0:	08db      	lsrs	r3, r3, #3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	18d0      	adds	r0, r2, r3
 80061b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061b8:	3307      	adds	r3, #7
 80061ba:	08db      	lsrs	r3, r3, #3
 80061bc:	461a      	mov	r2, r3
 80061be:	2100      	movs	r1, #0
 80061c0:	f00d f825 	bl	801320e <memset>
 80061c4:	e087      	b.n	80062d6 <complete_access_subindex_loop+0x27a>
               }
            }
            /* download of RO objects shall be ignored */
            else if (WRITE_ACCESS(access, state))
 80061c6:	7ebb      	ldrb	r3, [r7, #26]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <complete_access_subindex_loop+0x17a>
 80061d0:	7e7b      	ldrb	r3, [r7, #25]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d00f      	beq.n	80061f6 <complete_access_subindex_loop+0x19a>
 80061d6:	7ebb      	ldrb	r3, [r7, #26]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <complete_access_subindex_loop+0x18a>
 80061e0:	7e7b      	ldrb	r3, [r7, #25]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d007      	beq.n	80061f6 <complete_access_subindex_loop+0x19a>
 80061e6:	7ebb      	ldrb	r3, [r7, #26]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d072      	beq.n	80062d6 <complete_access_subindex_loop+0x27a>
 80061f0:	7e7b      	ldrb	r3, [r7, #25]
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d16f      	bne.n	80062d6 <complete_access_subindex_loop+0x27a>
            {
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 80061f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	6918      	ldr	r0, [r3, #16]
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	3307      	adds	r3, #7
 800620e:	08db      	lsrs	r3, r3, #3
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	18d1      	adds	r1, r2, r3
                     BITS2BYTES(bitlen));
 8006214:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006216:	3307      	adds	r3, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 8006218:	08db      	lsrs	r3, r3, #3
 800621a:	461a      	mov	r2, r3
 800621c:	f00c ffe9 	bl	80131f2 <memcpy>
 8006220:	e059      	b.n	80062d6 <complete_access_subindex_loop+0x27a>
            }
         }
      }
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 8006222:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006226:	2b00      	cmp	r3, #0
 8006228:	d155      	bne.n	80062d6 <complete_access_subindex_loop+0x27a>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d052      	beq.n	80062d6 <complete_access_subindex_loop+0x27a>
      {
         /* copy a bit data type into correct position */
         uint32_t bitmask = (1U << bitlen) - 1U;
 8006230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
         uint32_t tempmask;
         if (READ_ACCESS(access, state))
 800623c:	7ebb      	ldrb	r3, [r7, #26]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <complete_access_subindex_loop+0x1f0>
 8006246:	7e7b      	ldrb	r3, [r7, #25]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d00f      	beq.n	800626c <complete_access_subindex_loop+0x210>
 800624c:	7ebb      	ldrb	r3, [r7, #26]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <complete_access_subindex_loop+0x200>
 8006256:	7e7b      	ldrb	r3, [r7, #25]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d007      	beq.n	800626c <complete_access_subindex_loop+0x210>
 800625c:	7ebb      	ldrb	r3, [r7, #26]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d023      	beq.n	80062ae <complete_access_subindex_loop+0x252>
 8006266:	7e7b      	ldrb	r3, [r7, #25]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d120      	bne.n	80062ae <complete_access_subindex_loop+0x252>
         {
            if (bitoffset == 0)
 800626c:	7efb      	ldrb	r3, [r7, #27]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d105      	bne.n	800627e <complete_access_subindex_loop+0x222>
            {
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	08db      	lsrs	r3, r3, #3
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	4413      	add	r3, r2
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
            }
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	401a      	ands	r2, r3
 8006288:	7efb      	ldrb	r3, [r7, #27]
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	4413      	add	r3, r2
 8006298:	7819      	ldrb	r1, [r3, #0]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	08db      	lsrs	r3, r3, #3
 80062a2:	6838      	ldr	r0, [r7, #0]
 80062a4:	4403      	add	r3, r0
 80062a6:	430a      	orrs	r2, r1
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e013      	b.n	80062d6 <complete_access_subindex_loop+0x27a>
         }
         else
         {
            tempmask = ~(bitmask << bitoffset);
 80062ae:	7efb      	ldrb	r3, [r7, #27]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	4413      	add	r3, r2
 80062c2:	7819      	ldrb	r1, [r3, #0]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	08db      	lsrs	r3, r3, #3
 80062cc:	6838      	ldr	r0, [r7, #0]
 80062ce:	4403      	add	r3, r0
 80062d0:	400a      	ands	r2, r1
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
         }
      }

      /* Subindex 0 is padded to 16 bit */
      size += (nsub == 0) ? 16 : bitlen;
 80062d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <complete_access_subindex_loop+0x286>
 80062de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062e0:	e000      	b.n	80062e4 <complete_access_subindex_loop+0x288>
 80062e2:	2310      	movs	r3, #16
 80062e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e6:	4413      	add	r3, r2
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
      nsub++;
 80062ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3301      	adds	r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	80fb      	strh	r3, [r7, #6]

      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <complete_access_subindex_loop+0x2ac>
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	3307      	adds	r3, #7
 8006300:	08db      	lsrs	r3, r3, #3
 8006302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006304:	429a      	cmp	r2, r3
 8006306:	d911      	bls.n	800632c <complete_access_subindex_loop+0x2d0>
   while (nsub <= SDOobjects[nidx].maxsub)
 8006308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800630c:	4906      	ldr	r1, [pc, #24]	; (8006328 <complete_access_subindex_loop+0x2cc>)
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	0112      	lsls	r2, r2, #4
 8006312:	440a      	add	r2, r1
 8006314:	3204      	adds	r2, #4
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	4293      	cmp	r3, r2
 800631a:	f77f aec5 	ble.w	80060a8 <complete_access_subindex_loop+0x4c>
 800631e:	e006      	b.n	800632e <complete_access_subindex_loop+0x2d2>
 8006320:	06010004 	.word	0x06010004
 8006324:	2000154c 	.word	0x2000154c
 8006328:	080168f4 	.word	0x080168f4
      {
         break;
 800632c:	bf00      	nop
      }
   }

   return size;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006330:	4618      	mov	r0, r3
 8006332:	3728      	adds	r7, #40	; 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	461a      	mov	r2, r3
 8006346:	4603      	mov	r3, r0
 8006348:	70fb      	strb	r3, [r7, #3]
 800634a:	460b      	mov	r3, r1
 800634c:	70bb      	strb	r3, [r7, #2]
 800634e:	4613      	mov	r3, r2
 8006350:	803b      	strh	r3, [r7, #0]
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	220a      	movs	r2, #10
 8006356:	801a      	strh	r2, [r3, #0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7953      	ldrb	r3, [r2, #5]
 800635c:	2103      	movs	r1, #3
 800635e:	f361 0303 	bfi	r3, r1, #0, #4
 8006362:	7153      	strb	r3, [r2, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	b29b      	uxth	r3, r3
 8006368:	031b      	lsls	r3, r3, #12
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	80da      	strh	r2, [r3, #6]
   coesdo->command = command;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	78ba      	ldrb	r2, [r7, #2]
 8006374:	721a      	strb	r2, [r3, #8]
   coesdo->index = htoes(index);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	883a      	ldrh	r2, [r7, #0]
 800637a:	f8a3 2009 	strh.w	r2, [r3, #9]
   coesdo->subindex = subindex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7c3a      	ldrb	r2, [r7, #16]
 8006382:	72da      	strb	r2, [r3, #11]
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <SDO_upload_complete_access>:
 *  sending the content requested in a free Mailbox buffer. Depending of
 *  size of data expedited, normal or segmented transfer is used.
 *  On error an SDO Abort will be sent.
 */
static void SDO_upload_complete_access (void)
{
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b08d      	sub	sp, #52	; 0x34
 8006394:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8006396:	4b87      	ldr	r3, [pc, #540]	; (80065b4 <SDO_upload_complete_access+0x224>)
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 800639a:	f107 0008 	add.w	r0, r7, #8
 800639e:	f107 020d 	add.w	r2, r7, #13
 80063a2:	f107 010e 	add.w	r1, r7, #14
 80063a6:	1dbb      	adds	r3, r7, #6
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4603      	mov	r3, r0
 80063ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ae:	f7ff fe11 	bl	8005fd4 <complete_access_get_variables>
 80063b2:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <SDO_upload_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 80063ba:	89f9      	ldrh	r1, [r7, #14]
 80063bc:	7b7a      	ldrb	r2, [r7, #13]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2000      	movs	r0, #0
 80063c2:	f7ff fbff 	bl	8005bc4 <set_state_idle>
      return;
 80063c6:	e0f2      	b.n	80065ae <SDO_upload_complete_access+0x21e>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 80063c8:	f7fe fa44 	bl	8004854 <ESC_claimbuffer>
 80063cc:	4603      	mov	r3, r0
 80063ce:	77fb      	strb	r3, [r7, #31]
   if (MBXout == 0)
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <SDO_upload_complete_access+0x54>
   {
      /* It is a bad idea to call SDO_abort when ESC_claimbuffer fails,
       * because SDO_abort will also call ESC_claimbuffer ...
       */
      set_state_idle (0, index, subindex, 0);
 80063d6:	89f9      	ldrh	r1, [r7, #14]
 80063d8:	7b7a      	ldrb	r2, [r7, #13]
 80063da:	2300      	movs	r3, #0
 80063dc:	2000      	movs	r0, #0
 80063de:	f7ff fbf1 	bl	8005bc4 <set_state_idle>
      return;
 80063e2:	e0e4      	b.n	80065ae <SDO_upload_complete_access+0x21e>
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a74      	ldr	r2, [pc, #464]	; (80065b8 <SDO_upload_complete_access+0x228>)
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	4413      	add	r3, r2
 80063ec:	330c      	adds	r3, #12
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	61bb      	str	r3, [r7, #24]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	69b8      	ldr	r0, [r7, #24]
 8006404:	f7ff fe2a 	bl	800605c <complete_access_subindex_loop>
 8006408:	4603      	mov	r3, r0
 800640a:	603b      	str	r3, [r7, #0]

   /* expedited bits used calculation */
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b18      	cmp	r3, #24
 8006410:	d808      	bhi.n	8006424 <SDO_upload_complete_access+0x94>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	3b01      	subs	r3, #1
 8006416:	08db      	lsrs	r3, r3, #3
 8006418:	f1c3 0303 	rsb	r3, r3, #3
 800641c:	b2db      	uxtb	r3, r3
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e000      	b.n	8006426 <SDO_upload_complete_access+0x96>
 8006424:	2300      	movs	r3, #0
 8006426:	75fb      	strb	r3, [r7, #23]

   /* convert bits to bytes */
   size = BITS2BYTES(size);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	3307      	adds	r3, #7
 800642c:	08db      	lsrs	r3, r3, #3
 800642e:	603b      	str	r3, [r7, #0]

   if (size > 0xffff)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d306      	bcc.n	8006446 <SDO_upload_complete_access+0xb6>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (MBXout, index, subindex, size);
 8006438:	89f9      	ldrh	r1, [r7, #14]
 800643a:	7b7a      	ldrb	r2, [r7, #13]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	7ff8      	ldrb	r0, [r7, #31]
 8006440:	f7ff fbc0 	bl	8005bc4 <set_state_idle>
      return;
 8006444:	e0b3      	b.n	80065ae <SDO_upload_complete_access+0x21e>
   }

   /* check that upload data fits in the preallocated buffer */
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	331e      	adds	r3, #30
 800644a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800644e:	d906      	bls.n	800645e <SDO_upload_complete_access+0xce>
   {
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8006450:	89f9      	ldrh	r1, [r7, #14]
 8006452:	7b7a      	ldrb	r2, [r7, #13]
 8006454:	7ff8      	ldrb	r0, [r7, #31]
 8006456:	4b59      	ldr	r3, [pc, #356]	; (80065bc <SDO_upload_complete_access+0x22c>)
 8006458:	f7ff fbb4 	bl	8005bc4 <set_state_idle>
      return;
 800645c:	e0a7      	b.n	80065ae <SDO_upload_complete_access+0x21e>
   }
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800645e:	89f8      	ldrh	r0, [r7, #14]
 8006460:	7b79      	ldrb	r1, [r7, #13]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	691a      	ldr	r2, [r3, #16]
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	88db      	ldrh	r3, [r3, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800646a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006472:	b29b      	uxth	r3, r3
 8006474:	463c      	mov	r4, r7
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4623      	mov	r3, r4
 800647a:	f7fd fcb5 	bl	8003de8 <ESC_upload_pre_objecthandler>
 800647e:	6238      	str	r0, [r7, #32]
   if (abortcode != 0)
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d006      	beq.n	8006494 <SDO_upload_complete_access+0x104>
   {
      set_state_idle (MBXout, index, subindex, abortcode);
 8006486:	89f9      	ldrh	r1, [r7, #14]
 8006488:	7b7a      	ldrb	r2, [r7, #13]
 800648a:	7ff8      	ldrb	r0, [r7, #31]
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	f7ff fb99 	bl	8005bc4 <set_state_idle>
      return;
 8006492:	e08c      	b.n	80065ae <SDO_upload_complete_access+0x21e>
   }

   /* copy subindex data into the preallocated buffer */
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800649a:	2300      	movs	r3, #0
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	2300      	movs	r3, #0
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <SDO_upload_complete_access+0x230>)
 80064a4:	69b8      	ldr	r0, [r7, #24]
 80064a6:	f7ff fdd9 	bl	800605c <complete_access_subindex_loop>

   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80064aa:	7ffb      	ldrb	r3, [r7, #31]
 80064ac:	4a45      	ldr	r2, [pc, #276]	; (80065c4 <SDO_upload_complete_access+0x234>)
 80064ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	4a3f      	ldr	r2, [pc, #252]	; (80065b4 <SDO_upload_complete_access+0x224>)
 80064b6:	4413      	add	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
   init_coesdo(coeres, COE_SDORESPONSE,
 80064ba:	89fa      	ldrh	r2, [r7, #14]
 80064bc:	7b7b      	ldrb	r3, [r7, #13]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	2251      	movs	r2, #81	; 0x51
 80064c4:	2103      	movs	r1, #3
 80064c6:	6938      	ldr	r0, [r7, #16]
 80064c8:	f7ff ff36 	bl	8006338 <init_coesdo>
         COE_COMMAND_UPLOADRESPONSE | COE_COMPLETEACCESS | COE_SIZE_INDICATOR,
         index, subindex);

   ESCvar.segmented = 0;
 80064cc:	4b3d      	ldr	r3, [pc, #244]	; (80065c4 <SDO_upload_complete_access+0x234>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

   if (size <= 4)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d811      	bhi.n	80064fe <SDO_upload_complete_access+0x16e>
   {
      /* expedited response, i.e. length <= 4 bytes */
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	7a1a      	ldrb	r2, [r3, #8]
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f043 0302 	orr.w	r3, r3, #2
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	721a      	strb	r2, [r3, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	330c      	adds	r3, #12
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	4932      	ldr	r1, [pc, #200]	; (80065c0 <SDO_upload_complete_access+0x230>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f00c fe7b 	bl	80131f2 <memcpy>
 80064fc:	e031      	b.n	8006562 <SDO_upload_complete_access+0x1d2>
   }
   else
   {
      /* normal response, i.e. length > 4 bytes */
      coeres->size = htoel (size);
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	60da      	str	r2, [r3, #12]

      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f103 020a 	add.w	r2, r3, #10
 800650a:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <SDO_upload_complete_access+0x234>)
 800650c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650e:	3b06      	subs	r3, #6
 8006510:	429a      	cmp	r2, r3
 8006512:	d918      	bls.n	8006546 <SDO_upload_complete_access+0x1b6>
      {
         /* segmented transfer needed */
         /* set total size in bytes */
         ESCvar.frags = size;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <SDO_upload_complete_access+0x234>)
 8006518:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800651c:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <SDO_upload_complete_access+0x234>)
 800651e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006520:	3b10      	subs	r3, #16
 8006522:	603b      	str	r3, [r7, #0]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4a27      	ldr	r2, [pc, #156]	; (80065c4 <SDO_upload_complete_access+0x234>)
 8006528:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         /* signal segmented transfer */
         ESCvar.segmented = MBXSEU;
 800652c:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <SDO_upload_complete_access+0x234>)
 800652e:	2240      	movs	r2, #64	; 0x40
 8006530:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata;
 8006534:	4b23      	ldr	r3, [pc, #140]	; (80065c4 <SDO_upload_complete_access+0x234>)
 8006536:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <SDO_upload_complete_access+0x230>)
 8006538:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800653c:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <SDO_upload_complete_access+0x234>)
 800653e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006542:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      }

      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	330a      	adds	r3, #10
 800654c:	b29a      	uxth	r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	801a      	strh	r2, [r3, #0]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	330c      	adds	r3, #12
 8006556:	3304      	adds	r3, #4
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	4919      	ldr	r1, [pc, #100]	; (80065c0 <SDO_upload_complete_access+0x230>)
 800655c:	4618      	mov	r0, r3
 800655e:	f00c fe48 	bl	80131f2 <memcpy>
   }

   if (ESCvar.segmented == 0)
 8006562:	4b18      	ldr	r3, [pc, #96]	; (80065c4 <SDO_upload_complete_access+0x234>)
 8006564:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006568:	2b00      	cmp	r3, #0
 800656a:	d116      	bne.n	800659a <SDO_upload_complete_access+0x20a>
   {
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 800656c:	89f8      	ldrh	r0, [r7, #14]
 800656e:	7b79      	ldrb	r1, [r7, #13]
            objd->flags | COMPLETE_ACCESS_FLAG);
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29b      	uxth	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	f7fd fc52 	bl	8003e28 <ESC_upload_post_objecthandler>
 8006584:	6238      	str	r0, [r7, #32]

      if (abortcode != 0)
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d006      	beq.n	800659a <SDO_upload_complete_access+0x20a>
      {
         set_state_idle (MBXout, index, subindex, abortcode);
 800658c:	89f9      	ldrh	r1, [r7, #14]
 800658e:	7b7a      	ldrb	r2, [r7, #13]
 8006590:	7ff8      	ldrb	r0, [r7, #31]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f7ff fb16 	bl	8005bc4 <set_state_idle>
         return;
 8006598:	e009      	b.n	80065ae <SDO_upload_complete_access+0x21e>
      }
   }

   MBXcontrol[MBXout].state = MBXstate_outreq;
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <SDO_upload_complete_access+0x238>)
 800659e:	2103      	movs	r1, #3
 80065a0:	54d1      	strb	r1, [r2, r3]

   set_state_idle (MBXout, index, subindex, 0);
 80065a2:	89f9      	ldrh	r1, [r7, #14]
 80065a4:	7b7a      	ldrb	r2, [r7, #13]
 80065a6:	7ff8      	ldrb	r0, [r7, #31]
 80065a8:	2300      	movs	r3, #0
 80065aa:	f7ff fb0b 	bl	8005bc4 <set_state_idle>
}
 80065ae:	372c      	adds	r7, #44	; 0x2c
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd90      	pop	{r4, r7, pc}
 80065b4:	20000ca8 	.word	0x20000ca8
 80065b8:	080168f4 	.word	0x080168f4
 80065bc:	06010004 	.word	0x06010004
 80065c0:	20001636 	.word	0x20001636
 80065c4:	2000154c 	.word	0x2000154c
 80065c8:	200012a8 	.word	0x200012a8

080065cc <SDO_uploadsegment>:

/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 */
static void SDO_uploadsegment (void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08a      	sub	sp, #40	; 0x28
 80065d0:	af02      	add	r7, sp, #8
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset, abort;
   coesdo = (_COEsdo *) &MBX[0];
 80065d2:	4b58      	ldr	r3, [pc, #352]	; (8006734 <SDO_uploadsegment+0x168>)
 80065d4:	61bb      	str	r3, [r7, #24]
   MBXout = ESC_claimbuffer ();
 80065d6:	f7fe f93d 	bl	8004854 <ESC_claimbuffer>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
   if (MBXout)
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 809d 	beq.w	8006720 <SDO_uploadsegment+0x154>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	4a53      	ldr	r2, [pc, #332]	; (8006738 <SDO_uploadsegment+0x16c>)
 80065ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	4a50      	ldr	r2, [pc, #320]	; (8006734 <SDO_uploadsegment+0x168>)
 80065f2:	4413      	add	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
      offset = ESCvar.fragsleft;
 80065f6:	4b50      	ldr	r3, [pc, #320]	; (8006738 <SDO_uploadsegment+0x16c>)
 80065f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065fc:	60fb      	str	r3, [r7, #12]
      size = ESCvar.frags - ESCvar.fragsleft;
 80065fe:	4b4e      	ldr	r3, [pc, #312]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006600:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006604:	4b4c      	ldr	r3, [pc, #304]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	61fb      	str	r3, [r7, #28]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	7a1b      	ldrb	r3, [r3, #8]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	72fb      	strb	r3, [r7, #11]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800661e:	b299      	uxth	r1, r3
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	7adb      	ldrb	r3, [r3, #11]
 8006624:	7afa      	ldrb	r2, [r7, #11]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	460b      	mov	r3, r1
 800662a:	2103      	movs	r1, #3
 800662c:	6938      	ldr	r0, [r7, #16]
 800662e:	f7ff fe83 	bl	8006338 <init_coesdo>
            coesdo->index, coesdo->subindex);
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	1cda      	adds	r2, r3, #3
 8006636:	4b40      	ldr	r3, [pc, #256]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663a:	3b06      	subs	r3, #6
 800663c:	429a      	cmp	r2, r3
 800663e:	d912      	bls.n	8006666 <SDO_uploadsegment+0x9a>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 8006640:	4b3d      	ldr	r3, [pc, #244]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006644:	3b09      	subs	r3, #9
 8006646:	61fb      	str	r3, [r7, #28]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 8006648:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <SDO_uploadsegment+0x16c>)
 800664a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	4a39      	ldr	r2, [pc, #228]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006654:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	b29b      	uxth	r3, r3
 800665c:	3303      	adds	r3, #3
 800665e:	b29a      	uxth	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	e02c      	b.n	80066c0 <SDO_uploadsegment+0xf4>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 8006666:	4b34      	ldr	r3, [pc, #208]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 800666e:	4b32      	ldr	r3, [pc, #200]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 8006676:	4b30      	ldr	r3, [pc, #192]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	7a1b      	ldrb	r3, [r3, #8]
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b06      	cmp	r3, #6
 8006690:	d906      	bls.n	80066a0 <SDO_uploadsegment+0xd4>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	b29b      	uxth	r3, r3
 8006696:	3303      	adds	r3, #3
 8006698:	b29a      	uxth	r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e00f      	b.n	80066c0 <SDO_uploadsegment+0xf4>
         }
         else
         {
            coeres->command |= (uint8_t)((7U - size) << 1);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	7a1a      	ldrb	r2, [r3, #8]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f1c3 0307 	rsb	r3, r3, #7
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	220a      	movs	r2, #10
 80066be:	801a      	strh	r2, [r3, #0]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 80066c0:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <SDO_uploadsegment+0x16c>)
 80066c2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	18d0      	adds	r0, r2, r3
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3308      	adds	r3, #8
 80066ce:	3301      	adds	r3, #1
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	4619      	mov	r1, r3
 80066d4:	f7ff fa1e 	bl	8005b14 <copy2mbx>
            size);        /* copy to mailbox */

      if (ESCvar.segmented == 0)
 80066d8:	4b17      	ldr	r3, [pc, #92]	; (8006738 <SDO_uploadsegment+0x16c>)
 80066da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d11a      	bne.n	8006718 <SDO_uploadsegment+0x14c>
      {
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80066e8:	b298      	uxth	r0, r3
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	7adb      	ldrb	r3, [r3, #11]
 80066ee:	4a12      	ldr	r2, [pc, #72]	; (8006738 <SDO_uploadsegment+0x16c>)
 80066f0:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 80066f4:	4619      	mov	r1, r3
 80066f6:	f7fd fb97 	bl	8003e28 <ESC_upload_post_objecthandler>
 80066fa:	6078      	str	r0, [r7, #4]
               coesdo->subindex, ESCvar.flags);
         if (abort != 0)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <SDO_uploadsegment+0x14c>
         {
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006708:	b299      	uxth	r1, r3
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	7ada      	ldrb	r2, [r3, #11]
 800670e:	7df8      	ldrb	r0, [r7, #23]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f7ff fa57 	bl	8005bc4 <set_state_idle>
            return;
 8006716:	e00a      	b.n	800672e <SDO_uploadsegment+0x162>
         }
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <SDO_uploadsegment+0x170>)
 800671c:	2103      	movs	r1, #3
 800671e:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <SDO_uploadsegment+0x170>)
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8006726:	4b04      	ldr	r3, [pc, #16]	; (8006738 <SDO_uploadsegment+0x16c>)
 8006728:	2200      	movs	r2, #0
 800672a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000ca8 	.word	0x20000ca8
 8006738:	2000154c 	.word	0x2000154c
 800673c:	200012a8 	.word	0x200012a8

08006740 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
static void SDO_download (void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b090      	sub	sp, #64	; 0x40
 8006744:	af02      	add	r7, sp, #8
   uint32_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 8006746:	4b89      	ldr	r3, [pc, #548]	; (800696c <SDO_download+0x22c>)
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
   index = etohs (coesdo->index);
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006752:	857b      	strh	r3, [r7, #42]	; 0x2a
   subindex = coesdo->subindex;
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	7adb      	ldrb	r3, [r3, #11]
 8006758:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   nidx = SDO_findobject (index);
 800675c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff f85c 	bl	800581c <SDO_findobject>
 8006764:	6278      	str	r0, [r7, #36]	; 0x24
   if (nidx >= 0)
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	f2c0 818c 	blt.w	8006a86 <SDO_download+0x346>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800676e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006772:	4619      	mov	r1, r3
 8006774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006776:	f7fe fff3 	bl	8005760 <SDO_findsubindex>
 800677a:	4603      	mov	r3, r0
 800677c:	847b      	strh	r3, [r7, #34]	; 0x22
      if (nsub >= 0)
 800677e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006782:	2b00      	cmp	r3, #0
 8006784:	f2c0 8177 	blt.w	8006a76 <SDO_download+0x336>
      {
         objd = SDOobjects[nidx].objdesc;
 8006788:	4a79      	ldr	r2, [pc, #484]	; (8006970 <SDO_download+0x230>)
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4413      	add	r3, r2
 8006790:	330c      	adds	r3, #12
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	61fb      	str	r3, [r7, #28]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 8006796:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	461a      	mov	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b0:	76fb      	strb	r3, [r7, #27]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 80067b2:	4b70      	ldr	r3, [pc, #448]	; (8006974 <SDO_download+0x234>)
 80067b4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	76bb      	strb	r3, [r7, #26]
         if (WRITE_ACCESS(access, state))
 80067c0:	7efb      	ldrb	r3, [r7, #27]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <SDO_download+0x90>
 80067ca:	7ebb      	ldrb	r3, [r7, #26]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d011      	beq.n	80067f4 <SDO_download+0xb4>
 80067d0:	7efb      	ldrb	r3, [r7, #27]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <SDO_download+0xa0>
 80067da:	7ebb      	ldrb	r3, [r7, #26]
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d009      	beq.n	80067f4 <SDO_download+0xb4>
 80067e0:	7efb      	ldrb	r3, [r7, #27]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8132 	beq.w	8006a50 <SDO_download+0x310>
 80067ec:	7ebb      	ldrb	r3, [r7, #26]
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	f040 812e 	bne.w	8006a50 <SDO_download+0x310>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	7a1b      	ldrb	r3, [r3, #8]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <SDO_download+0xd8>
            {
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	7a1b      	ldrb	r3, [r3, #8]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	f1c3 0304 	rsb	r3, r3, #4
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = &(coesdo->size);
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	330c      	adds	r3, #12
 8006814:	633b      	str	r3, [r7, #48]	; 0x30
 8006816:	e007      	b.n	8006828 <SDO_download+0xe8>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	b29b      	uxth	r3, r3
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
               mbxdata = (&(coesdo->size)) + 1;
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	330c      	adds	r3, #12
 8006824:	3304      	adds	r3, #4
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
            }
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 8006828:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	461a      	mov	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	889b      	ldrh	r3, [r3, #4]
 800683c:	3307      	adds	r3, #7
 800683e:	08db      	lsrs	r3, r3, #3
 8006840:	617b      	str	r3, [r7, #20]
            if (actsize != size)
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	429a      	cmp	r2, r3
 8006848:	d042      	beq.n	80068d0 <SDO_download+0x190>
            {
               /* entries with data types VISIBLE_STRING, OCTET_STRING,
                * UNICODE_STRING, ARRAY_OF_INT, ARRAY_OF_SINT,
                * ARRAY_OF_DINT, and ARRAY_OF_UDINT may have flexible length
                */
               uint16_t type = (objd + nsub)->datatype;
 800684a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	461a      	mov	r2, r3
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	885b      	ldrh	r3, [r3, #2]
 800685e:	827b      	strh	r3, [r7, #18]
               if (type == DTYPE_VISIBLE_STRING)
 8006860:	8a7b      	ldrh	r3, [r7, #18]
 8006862:	2b09      	cmp	r3, #9
 8006864:	d113      	bne.n	800688e <SDO_download+0x14e>
               {
                  /* pad with zeroes up to the maximum size of the entry */
                  memset((objd + nsub)->data + size, 0, actsize - size);
 8006866:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	461a      	mov	r2, r3
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	18d0      	adds	r0, r2, r3
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	461a      	mov	r2, r3
 8006886:	2100      	movs	r1, #0
 8006888:	f00c fcc1 	bl	801320e <memset>
 800688c:	e020      	b.n	80068d0 <SDO_download+0x190>
               }
               else if ((type != DTYPE_OCTET_STRING) &&
 800688e:	8a7b      	ldrh	r3, [r7, #18]
 8006890:	2b0a      	cmp	r3, #10
 8006892:	d01d      	beq.n	80068d0 <SDO_download+0x190>
 8006894:	8a7b      	ldrh	r3, [r7, #18]
 8006896:	2b0b      	cmp	r3, #11
 8006898:	d01a      	beq.n	80068d0 <SDO_download+0x190>
                        (type != DTYPE_UNICODE_STRING) &&
 800689a:	8a7b      	ldrh	r3, [r7, #18]
 800689c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80068a0:	d016      	beq.n	80068d0 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_INT) &&
 80068a2:	8a7b      	ldrh	r3, [r7, #18]
 80068a4:	f240 2261 	movw	r2, #609	; 0x261
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d011      	beq.n	80068d0 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_SINT) &&
 80068ac:	8a7b      	ldrh	r3, [r7, #18]
 80068ae:	f240 2262 	movw	r2, #610	; 0x262
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00c      	beq.n	80068d0 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_DINT) &&
 80068b6:	8a7b      	ldrh	r3, [r7, #18]
 80068b8:	f240 2263 	movw	r2, #611	; 0x263
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_UDINT))
               {
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 80068c0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80068c4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <SDO_download+0x238>)
 80068c8:	2000      	movs	r0, #0
 80068ca:	f7ff f97b 	bl	8005bc4 <set_state_idle>
                  return;
 80068ce:	e0ea      	b.n	8006aa6 <SDO_download+0x366>
            abort = ESC_download_pre_objecthandler (
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 80068d0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	461a      	mov	r2, r3
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
            abort = ESC_download_pre_objecthandler (
 80068e2:	88db      	ldrh	r3, [r3, #6]
 80068e4:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 80068e8:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f0:	f7fd fa10 	bl	8003d14 <ESC_download_pre_objecthandler>
 80068f4:	60f8      	str	r0, [r7, #12]
            );
            if (abort == 0)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 80a1 	bne.w	8006a40 <SDO_download+0x300>
            {
               if ((size > 4) &&
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	2b04      	cmp	r3, #4
 8006902:	d93b      	bls.n	800697c <SDO_download+0x23c>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 800690a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800690c:	429a      	cmp	r2, r3
 800690e:	d935      	bls.n	800697c <SDO_download+0x23c>
               {
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	3b0a      	subs	r3, #10
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSED;
 8006918:	4b16      	ldr	r3, [pc, #88]	; (8006974 <SDO_download+0x234>)
 800691a:	2250      	movs	r2, #80	; 0x50
 800691c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 8006920:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	461a      	mov	r2, r3
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	4413      	add	r3, r2
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <SDO_download+0x234>)
 800693a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
                  ESCvar.index = index;
 800693e:	4a0d      	ldr	r2, [pc, #52]	; (8006974 <SDO_download+0x234>)
 8006940:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006942:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
                  ESCvar.subindex = subindex;
 8006946:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <SDO_download+0x234>)
 8006948:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800694c:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 8006950:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	461a      	mov	r2, r3
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	88da      	ldrh	r2, [r3, #6]
 8006964:	4b03      	ldr	r3, [pc, #12]	; (8006974 <SDO_download+0x234>)
 8006966:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800696a:	e00b      	b.n	8006984 <SDO_download+0x244>
 800696c:	20000ca8 	.word	0x20000ca8
 8006970:	080168f4 	.word	0x080168f4
 8006974:	2000154c 	.word	0x2000154c
 8006978:	06070010 	.word	0x06070010
               }
               else
               {
                  ESCvar.segmented = 0;
 800697c:	4b4b      	ldr	r3, [pc, #300]	; (8006aac <SDO_download+0x36c>)
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
               }
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 8006984:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	461a      	mov	r2, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699a:	4619      	mov	r1, r3
 800699c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800699e:	f7ff f8b9 	bl	8005b14 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 80069a2:	f7fd ff57 	bl	8004854 <ESC_claimbuffer>
 80069a6:	4603      	mov	r3, r0
 80069a8:	72fb      	strb	r3, [r7, #11]
               if (MBXout)
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d026      	beq.n	80069fe <SDO_download+0x2be>
               {
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	4a3e      	ldr	r2, [pc, #248]	; (8006aac <SDO_download+0x36c>)
 80069b4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	4a3d      	ldr	r2, [pc, #244]	; (8006ab0 <SDO_download+0x370>)
 80069bc:	4413      	add	r3, r2
 80069be:	607b      	str	r3, [r7, #4]
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	220a      	movs	r2, #10
 80069c4:	801a      	strh	r2, [r3, #0]
                  coeres->mbxheader.mbxtype = MBXCOE;
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	7953      	ldrb	r3, [r2, #5]
 80069ca:	2103      	movs	r1, #3
 80069cc:	f361 0303 	bfi	r3, r1, #0, #4
 80069d0:	7153      	strb	r3, [r2, #5]
                  coeres->coeheader.numberservice =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80069d8:	80da      	strh	r2, [r3, #6]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                  coeres->index = htoes (index);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80069de:	f8a3 2009 	strh.w	r2, [r3, #9]
                  coeres->subindex = subindex;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80069e8:	72da      	strb	r2, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2260      	movs	r2, #96	; 0x60
 80069ee:	721a      	strb	r2, [r3, #8]
                  coeres->size = htoel (0);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	60da      	str	r2, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <SDO_download+0x374>)
 80069fa:	2103      	movs	r1, #3
 80069fc:	54d1      	strb	r1, [r2, r3]
               }
               if (ESCvar.segmented == 0)
 80069fe:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <SDO_download+0x36c>)
 8006a00:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d146      	bne.n	8006a96 <SDO_download+0x356>
               {
                  /* external object write handler */
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 8006a08:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	461a      	mov	r2, r3
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	88da      	ldrh	r2, [r3, #6]
 8006a1c:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8006a20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fd f9c4 	bl	8003db0 <ESC_download_post_objecthandler>
 8006a28:	60f8      	str	r0, [r7, #12]
                  if (abort != 0)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d032      	beq.n	8006a96 <SDO_download+0x356>
                  {
                     SDO_abort (MBXout, index, subindex, abort);
 8006a30:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006a34:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a36:	7af8      	ldrb	r0, [r7, #11]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f7ff f87b 	bl	8005b34 <SDO_abort>
            if (abort == 0)
 8006a3e:	e02a      	b.n	8006a96 <SDO_download+0x356>
                  }
               }
            }
            else
            {
               SDO_abort (0, index, subindex, abort);
 8006a40:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006a44:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f7ff f873 	bl	8005b34 <SDO_abort>
            if (abort == 0)
 8006a4e:	e022      	b.n	8006a96 <SDO_download+0x356>
            }
         }
         else
         {
            if (access == ATYPE_RO)
 8006a50:	7efb      	ldrb	r3, [r7, #27]
 8006a52:	2b07      	cmp	r3, #7
 8006a54:	d107      	bne.n	8006a66 <SDO_download+0x326>
            {
               SDO_abort (0, index, subindex, ABORT_READONLY);
 8006a56:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006a5a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a5c:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <SDO_download+0x378>)
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f7ff f868 	bl	8005b34 <SDO_abort>
 8006a64:	e018      	b.n	8006a98 <SDO_download+0x358>

            }
            else
            {
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 8006a66:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006a6a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a6c:	4b13      	ldr	r3, [pc, #76]	; (8006abc <SDO_download+0x37c>)
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f7ff f860 	bl	8005b34 <SDO_abort>
 8006a74:	e010      	b.n	8006a98 <SDO_download+0x358>
            }
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 8006a76:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006a7a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a7c:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <SDO_download+0x380>)
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f7ff f858 	bl	8005b34 <SDO_abort>
 8006a84:	e008      	b.n	8006a98 <SDO_download+0x358>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 8006a86:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006a8a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8006a8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <SDO_download+0x384>)
 8006a8e:	2000      	movs	r0, #0
 8006a90:	f7ff f850 	bl	8005b34 <SDO_abort>
 8006a94:	e000      	b.n	8006a98 <SDO_download+0x358>
            if (abort == 0)
 8006a96:	bf00      	nop
   }
   MBXcontrol[0].state = MBXstate_idle;
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <SDO_download+0x374>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8006a9e:	4b03      	ldr	r3, [pc, #12]	; (8006aac <SDO_download+0x36c>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
}
 8006aa6:	3738      	adds	r7, #56	; 0x38
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	2000154c 	.word	0x2000154c
 8006ab0:	20000ca8 	.word	0x20000ca8
 8006ab4:	200012a8 	.word	0x200012a8
 8006ab8:	06010002 	.word	0x06010002
 8006abc:	08000022 	.word	0x08000022
 8006ac0:	06090011 	.word	0x06090011
 8006ac4:	06020000 	.word	0x06020000

08006ac8 <SDO_download_complete_access>:
/** Function for handling incoming requested SDO Download with Complete Access,
 *  validating the request and sending a response. On error an SDO Abort will
 *  be sent.
 */
static void SDO_download_complete_access (void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08e      	sub	sp, #56	; 0x38
 8006acc:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8006ace:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <SDO_download_complete_access+0x20c>)
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 8006ad2:	f107 0008 	add.w	r0, r7, #8
 8006ad6:	f107 020d 	add.w	r2, r7, #13
 8006ada:	f107 010e 	add.w	r1, r7, #14
 8006ade:	1dbb      	adds	r3, r7, #6
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae6:	f7ff fa75 	bl	8005fd4 <complete_access_get_variables>
 8006aea:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d006      	beq.n	8006b00 <SDO_download_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 8006af2:	89f9      	ldrh	r1, [r7, #14]
 8006af4:	7b7a      	ldrb	r2, [r7, #13]
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	2000      	movs	r0, #0
 8006afa:	f7ff f863 	bl	8005bc4 <set_state_idle>
      return;
 8006afe:	e0e6      	b.n	8006cce <SDO_download_complete_access+0x206>
   }

   uint32_t bytes;
   uint32_t *mbxdata = &(coesdo->size);
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	330c      	adds	r3, #12
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28

   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	7a1b      	ldrb	r3, [r3, #8]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d008      	beq.n	8006b24 <SDO_download_complete_access+0x5c>
   {
      /* expedited download */
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	7a1b      	ldrb	r3, [r3, #8]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	f1c3 0304 	rsb	r3, r3, #4
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	e006      	b.n	8006b32 <SDO_download_complete_access+0x6a>
   }
   else
   {
      /* normal download */
      bytes = (etohl (coesdo->size) & 0xffff);
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      mbxdata++;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	3304      	adds	r3, #4
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4a68      	ldr	r2, [pc, #416]	; (8006cd8 <SDO_download_complete_access+0x210>)
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	4413      	add	r3, r2
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	61fb      	str	r3, [r7, #28]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b46:	2300      	movs	r3, #0
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	69f8      	ldr	r0, [r7, #28]
 8006b52:	f7ff fa83 	bl	800605c <complete_access_subindex_loop>
 8006b56:	61b8      	str	r0, [r7, #24]
   size = BITS2BYTES(size);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	3307      	adds	r3, #7
 8006b5c:	08db      	lsrs	r3, r3, #3
 8006b5e:	61bb      	str	r3, [r7, #24]
   if (size > 0xffff)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d306      	bcc.n	8006b76 <SDO_download_complete_access+0xae>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (0, index, subindex, size);
 8006b68:	89f9      	ldrh	r1, [r7, #14]
 8006b6a:	7b7a      	ldrb	r2, [r7, #13]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f7ff f828 	bl	8005bc4 <set_state_idle>
      return;
 8006b74:	e0ab      	b.n	8006cce <SDO_download_complete_access+0x206>
    * "The SDO Download Complete Access data length shall always match
    * the full current object size (defined by SubIndex0)".
    * But EtherCAT Conformance Test Tool doesn't follow this rule for some test
    * cases, which is the reason to here only check for 'less than or equal'.
    */
   else if (bytes <= size)
 8006b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d87b      	bhi.n	8006c76 <SDO_download_complete_access+0x1ae>
   {
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 8006b7e:	89f8      	ldrh	r0, [r7, #14]
 8006b80:	7b79      	ldrb	r1, [r7, #13]
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	88db      	ldrh	r3, [r3, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 8006b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b96:	f7fd f8bd 	bl	8003d14 <ESC_download_pre_objecthandler>
 8006b9a:	6238      	str	r0, [r7, #32]
      if (abortcode != 0)
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d006      	beq.n	8006bb0 <SDO_download_complete_access+0xe8>
      {
         set_state_idle (0, index, subindex, abortcode);
 8006ba2:	89f9      	ldrh	r1, [r7, #14]
 8006ba4:	7b7a      	ldrb	r2, [r7, #13]
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f7ff f80b 	bl	8005bc4 <set_state_idle>
         return;
 8006bae:	e08e      	b.n	8006cce <SDO_download_complete_access+0x206>
      }

      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	f103 020a 	add.w	r2, r3, #10
 8006bb6:	4b49      	ldr	r3, [pc, #292]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bba:	3b06      	subs	r3, #6
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d934      	bls.n	8006c2a <SDO_download_complete_access+0x162>
      {
         /* check that download data fits in the preallocated buffer */
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	331e      	adds	r3, #30
 8006bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006bc8:	d906      	bls.n	8006bd8 <SDO_download_complete_access+0x110>
         {
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 8006bca:	89f9      	ldrh	r1, [r7, #14]
 8006bcc:	7b7a      	ldrb	r2, [r7, #13]
 8006bce:	4b44      	ldr	r3, [pc, #272]	; (8006ce0 <SDO_download_complete_access+0x218>)
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f7fe fff7 	bl	8005bc4 <set_state_idle>
             return;
 8006bd6:	e07a      	b.n	8006cce <SDO_download_complete_access+0x206>
         }
         /* set total size in bytes */
         ESCvar.frags = bytes;
 8006bd8:	4a40      	ldr	r2, [pc, #256]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8006be0:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be4:	3b10      	subs	r3, #16
 8006be6:	61bb      	str	r3, [r7, #24]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 8006be8:	4a3c      	ldr	r2, [pc, #240]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         ESCvar.segmented = MBXSED;
 8006bf0:	4b3a      	ldr	r3, [pc, #232]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006bf2:	2250      	movs	r2, #80	; 0x50
 8006bf4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	4a3a      	ldr	r2, [pc, #232]	; (8006ce4 <SDO_download_complete_access+0x21c>)
 8006bfc:	4413      	add	r3, r2
 8006bfe:	4a37      	ldr	r2, [pc, #220]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006c00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         ESCvar.index = index;
 8006c04:	89fa      	ldrh	r2, [r7, #14]
 8006c06:	4b35      	ldr	r3, [pc, #212]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006c08:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
         ESCvar.subindex = subindex;
 8006c0c:	7b7a      	ldrb	r2, [r7, #13]
 8006c0e:	4b33      	ldr	r3, [pc, #204]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006c10:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 8006c14:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006c16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c1a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
         /* Store the data */
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	4930      	ldr	r1, [pc, #192]	; (8006ce4 <SDO_download_complete_access+0x21c>)
 8006c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c24:	f7fe ff76 	bl	8005b14 <copy2mbx>
 8006c28:	e02c      	b.n	8006c84 <SDO_download_complete_access+0x1bc>
      }
      else
      {
         ESCvar.segmented = 0;
 8006c2a:	4b2c      	ldr	r3, [pc, #176]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         /* copy download data to subindexes */
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	69f8      	ldr	r0, [r7, #28]
 8006c44:	f7ff fa0a 	bl	800605c <complete_access_subindex_loop>

         abortcode = ESC_download_post_objecthandler(index, subindex,
 8006c48:	89f8      	ldrh	r0, [r7, #14]
 8006c4a:	7b79      	ldrb	r1, [r7, #13]
               objd->flags | COMPLETE_ACCESS_FLAG);
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	88db      	ldrh	r3, [r3, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f7fd f8a8 	bl	8003db0 <ESC_download_post_objecthandler>
 8006c60:	6238      	str	r0, [r7, #32]
         if (abortcode != 0)
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00d      	beq.n	8006c84 <SDO_download_complete_access+0x1bc>
         {
            set_state_idle (0, index, subindex, abortcode);
 8006c68:	89f9      	ldrh	r1, [r7, #14]
 8006c6a:	7b7a      	ldrb	r2, [r7, #13]
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f7fe ffa8 	bl	8005bc4 <set_state_idle>
            return;
 8006c74:	e02b      	b.n	8006cce <SDO_download_complete_access+0x206>
         }
      }
   }
   else
   {
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 8006c76:	89f9      	ldrh	r1, [r7, #14]
 8006c78:	7b7a      	ldrb	r2, [r7, #13]
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <SDO_download_complete_access+0x220>)
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f7fe ffa1 	bl	8005bc4 <set_state_idle>
      return;
 8006c82:	e024      	b.n	8006cce <SDO_download_complete_access+0x206>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 8006c84:	f7fd fde6 	bl	8004854 <ESC_claimbuffer>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75fb      	strb	r3, [r7, #23]
   if (MBXout > 0)
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d017      	beq.n	8006cc2 <SDO_download_complete_access+0x1fa>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <SDO_download_complete_access+0x214>)
 8006c96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c98:	fb02 f303 	mul.w	r3, r2, r3
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <SDO_download_complete_access+0x20c>)
 8006c9e:	4413      	add	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
      init_coesdo(coeres, COE_SDORESPONSE,
 8006ca2:	89fa      	ldrh	r2, [r7, #14]
 8006ca4:	7b7b      	ldrb	r3, [r7, #13]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	2270      	movs	r2, #112	; 0x70
 8006cac:	2103      	movs	r1, #3
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f7ff fb42 	bl	8006338 <init_coesdo>
                  COE_COMMAND_DOWNLOADRESPONSE | COE_COMPLETEACCESS,
                  index, subindex);

      coeres->size = 0;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	4a0b      	ldr	r2, [pc, #44]	; (8006cec <SDO_download_complete_access+0x224>)
 8006cbe:	2103      	movs	r1, #3
 8006cc0:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (MBXout, index, subindex, 0);
 8006cc2:	89f9      	ldrh	r1, [r7, #14]
 8006cc4:	7b7a      	ldrb	r2, [r7, #13]
 8006cc6:	7df8      	ldrb	r0, [r7, #23]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f7fe ff7b 	bl	8005bc4 <set_state_idle>
}
 8006cce:	3730      	adds	r7, #48	; 0x30
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000ca8 	.word	0x20000ca8
 8006cd8:	080168f4 	.word	0x080168f4
 8006cdc:	2000154c 	.word	0x2000154c
 8006ce0:	06010004 	.word	0x06010004
 8006ce4:	20001636 	.word	0x20001636
 8006ce8:	06070010 	.word	0x06070010
 8006cec:	200012a8 	.word	0x200012a8

08006cf0 <SDO_downloadsegment>:

static void SDO_downloadsegment (void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 8006cf6:	4b6d      	ldr	r3, [pc, #436]	; (8006eac <SDO_downloadsegment+0x1bc>)
 8006cf8:	623b      	str	r3, [r7, #32]
   uint8_t MBXout = ESC_claimbuffer ();
 8006cfa:	f7fd fdab 	bl	8004854 <ESC_claimbuffer>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	77fb      	strb	r3, [r7, #31]
   if (MBXout)
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80c7 	beq.w	8006e98 <SDO_downloadsegment+0x1a8>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
 8006d0c:	4a68      	ldr	r2, [pc, #416]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006d0e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	4a65      	ldr	r2, [pc, #404]	; (8006eac <SDO_downloadsegment+0x1bc>)
 8006d16:	4413      	add	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
      uint32_t size = coesdo->mbxheader.length - 3U;
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	3b03      	subs	r3, #3
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
      if (size == 7)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	2b07      	cmp	r3, #7
 8006d26:	d107      	bne.n	8006d38 <SDO_downloadsegment+0x48>
      {
         size = 7 - ((coesdo->command >> 1) & 7);
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	7a1b      	ldrb	r3, [r3, #8]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	43db      	mvns	r3, r3
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      uint8_t command = COE_COMMAND_DOWNLOADSEGRESP;
 8006d38:	2320      	movs	r3, #32
 8006d3a:	75fb      	strb	r3, [r7, #23]
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	7a1b      	ldrb	r3, [r3, #8]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	75bb      	strb	r3, [r7, #22]
      command |= command2;
 8006d46:	7dfa      	ldrb	r2, [r7, #23]
 8006d48:	7dbb      	ldrb	r3, [r7, #22]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	75fb      	strb	r3, [r7, #23]
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 8006d4e:	7dfa      	ldrb	r2, [r7, #23]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2300      	movs	r3, #0
 8006d56:	2103      	movs	r1, #3
 8006d58:	69b8      	ldr	r0, [r7, #24]
 8006d5a:	f7ff faed 	bl	8006338 <init_coesdo>

      void *mbxdata = &(coesdo->index);  /* data pointer */
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	3309      	adds	r3, #9
 8006d62:	613b      	str	r3, [r7, #16]
      copy2mbx (mbxdata, ESCvar.data, size);
 8006d64:	4b52      	ldr	r3, [pc, #328]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6938      	ldr	r0, [r7, #16]
 8006d70:	f7fe fed0 	bl	8005b14 <copy2mbx>

      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	7a1b      	ldrb	r3, [r3, #8]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d077      	beq.n	8006e70 <SDO_downloadsegment+0x180>
      {
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 8006d80:	4b4b      	ldr	r3, [pc, #300]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006d82:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8006d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8a:	d14a      	bne.n	8006e22 <SDO_downloadsegment+0x132>
         {
            int32_t nidx;
            int16_t nsub;

            if(ESCvar.frags > ESCvar.fragsleft + size)
 8006d8c:	4b48      	ldr	r3, [pc, #288]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006d8e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006d94:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	440b      	add	r3, r1
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d90a      	bls.n	8006db6 <SDO_downloadsegment+0xc6>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 8006da0:	4b43      	ldr	r3, [pc, #268]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006da2:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8006da6:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006da8:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8006dac:	4b41      	ldr	r3, [pc, #260]	; (8006eb4 <SDO_downloadsegment+0x1c4>)
 8006dae:	2000      	movs	r0, #0
 8006db0:	f7fe ff08 	bl	8005bc4 <set_state_idle>
               return;
 8006db4:	e076      	b.n	8006ea4 <SDO_downloadsegment+0x1b4>
            }

            nidx = SDO_findobject(ESCvar.index);
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006db8:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fd2d 	bl	800581c <SDO_findobject>
 8006dc2:	60f8      	str	r0, [r7, #12]
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 8006dc4:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006dc6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8006dca:	4619      	mov	r1, r3
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7fe fcc7 	bl	8005760 <SDO_findsubindex>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	817b      	strh	r3, [r7, #10]

            if ((nidx < 0) || (nsub < 0))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	db03      	blt.n	8006de4 <SDO_downloadsegment+0xf4>
 8006ddc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da0a      	bge.n	8006dfa <SDO_downloadsegment+0x10a>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 8006de4:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006de6:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006dec:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8006df0:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <SDO_downloadsegment+0x1c8>)
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7fe fee6 	bl	8005bc4 <set_state_idle>
               return;
 8006df8:	e054      	b.n	8006ea4 <SDO_downloadsegment+0x1b4>
            }

            /* copy download data to subindexes */
            const _objd *objd = SDOobjects[nidx].objdesc;
 8006dfa:	4a30      	ldr	r2, [pc, #192]	; (8006ebc <SDO_downloadsegment+0x1cc>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	4413      	add	r3, r2
 8006e02:	330c      	adds	r3, #12
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	607b      	str	r3, [r7, #4]
            complete_access_subindex_loop(objd,
 8006e08:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e0e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	2301      	movs	r3, #1
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4b29      	ldr	r3, [pc, #164]	; (8006ec0 <SDO_downloadsegment+0x1d0>)
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff f91d 	bl	800605c <complete_access_subindex_loop>
                  DOWNLOAD,
                  ESCvar.frags);

         }
         /* last segment */
         ESCvar.segmented = 0;
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
         ESCvar.frags = 0;
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         ESCvar.fragsleft = 0;
 8006e32:	4b1f      	ldr	r3, [pc, #124]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         /* external object write handler */
         uint32_t abort = ESC_download_post_objecthandler
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e3c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8006e40:	4a1b      	ldr	r2, [pc, #108]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e42:	f892 10a6 	ldrb.w	r1, [r2, #166]	; 0xa6
 8006e46:	4a1a      	ldr	r2, [pc, #104]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e48:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fc ffaf 	bl	8003db0 <ESC_download_post_objecthandler>
 8006e52:	6038      	str	r0, [r7, #0]
               (ESCvar.index, ESCvar.subindex, ESCvar.flags);
         if (abort != 0)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01a      	beq.n	8006e90 <SDO_downloadsegment+0x1a0>
         {
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e5c:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	; 0xa4
 8006e60:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e62:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8006e66:	7ff8      	ldrb	r0, [r7, #31]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f7fe feab 	bl	8005bc4 <set_state_idle>
            return;
 8006e6e:	e019      	b.n	8006ea4 <SDO_downloadsegment+0x1b4>
         }
      }
      else
      {
         /* more segmented transfer needed: increase offset */
         ESCvar.data += size;
 8006e70:	4b0f      	ldr	r3, [pc, #60]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e72:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	4413      	add	r3, r2
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
         /* number of bytes done */
         ESCvar.fragsleft += size;
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	4413      	add	r3, r2
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <SDO_downloadsegment+0x1c0>)
 8006e8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8006e90:	7ffb      	ldrb	r3, [r7, #31]
 8006e92:	4a0c      	ldr	r2, [pc, #48]	; (8006ec4 <SDO_downloadsegment+0x1d4>)
 8006e94:	2103      	movs	r1, #3
 8006e96:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (0, 0, 0, 0);
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	f7fe fe90 	bl	8005bc4 <set_state_idle>
}
 8006ea4:	3728      	adds	r7, #40	; 0x28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000ca8 	.word	0x20000ca8
 8006eb0:	2000154c 	.word	0x2000154c
 8006eb4:	06070010 	.word	0x06070010
 8006eb8:	06020000 	.word	0x06020000
 8006ebc:	080168f4 	.word	0x080168f4
 8006ec0:	20001636 	.word	0x20001636
 8006ec4:	200012a8 	.word	0x200012a8

08006ec8 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
static void SDO_infoerror (uint32_t abortcode)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8006ed0:	f7fd fcc0 	bl	8004854 <ESC_claimbuffer>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d039      	beq.n	8006f52 <SDO_infoerror+0x8a>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <SDO_infoerror+0x94>)
 8006ee2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <SDO_infoerror+0x98>)
 8006eea:	4413      	add	r3, r2
 8006eec:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	220a      	movs	r2, #10
 8006ef2:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	7953      	ldrb	r3, [r2, #5]
 8006ef8:	2103      	movs	r1, #3
 8006efa:	f361 0303 	bfi	r3, r1, #0, #4
 8006efe:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f06:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	7a13      	ldrb	r3, [r2, #8]
 8006f0c:	2107      	movs	r1, #7
 8006f0e:	f361 0306 	bfi	r3, r1, #0, #7
 8006f12:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	7a13      	ldrb	r3, [r2, #8]
 8006f18:	f36f 13c7 	bfc	r3, #7, #1
 8006f1c:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <SDO_infoerror+0x9c>)
 8006f40:	2103      	movs	r1, #3
 8006f42:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 8006f44:	4b07      	ldr	r3, [pc, #28]	; (8006f64 <SDO_infoerror+0x9c>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8006f4a:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <SDO_infoerror+0x94>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	2000154c 	.word	0x2000154c
 8006f60:	20000ca8 	.word	0x20000ca8
 8006f64:	200012a8 	.word	0x200012a8

08006f68 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
static void SDO_getodlist (void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
   uint32_t frags;
   uint8_t MBXout = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 8006f76:	e002      	b.n	8006f7e <SDO_getodlist+0x16>
   {
      entries++;
 8006f78:	8abb      	ldrh	r3, [r7, #20]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 8006f7e:	8abb      	ldrh	r3, [r7, #20]
 8006f80:	4a7a      	ldr	r2, [pc, #488]	; (800716c <SDO_getodlist+0x204>)
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	4413      	add	r3, r2
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d1f3      	bne.n	8006f78 <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 8006f90:	4a77      	ldr	r2, [pc, #476]	; (8007170 <SDO_getodlist+0x208>)
 8006f92:	8abb      	ldrh	r3, [r7, #20]
 8006f94:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 8006f98:	8abb      	ldrh	r3, [r7, #20]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4b74      	ldr	r3, [pc, #464]	; (8007170 <SDO_getodlist+0x208>)
 8006fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa2:	885b      	ldrh	r3, [r3, #2]
 8006fa4:	f1a3 020e 	sub.w	r2, r3, #14
 8006fa8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006fac:	4013      	ands	r3, r2
 8006fae:	440b      	add	r3, r1
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	60bb      	str	r3, [r7, #8]
   frags /= ODLISTSIZE;
 8006fb4:	4b6e      	ldr	r3, [pc, #440]	; (8007170 <SDO_getodlist+0x208>)
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	f1a3 020e 	sub.w	r2, r3, #14
 8006fbe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	60bb      	str	r3, [r7, #8]
   coer = (_COEobjdesc *) &MBX[0];
 8006fcc:	4b69      	ldr	r3, [pc, #420]	; (8007174 <SDO_getodlist+0x20c>)
 8006fce:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	899b      	ldrh	r3, [r3, #12]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d903      	bls.n	8006fe0 <SDO_getodlist+0x78>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8006fd8:	4867      	ldr	r0, [pc, #412]	; (8007178 <SDO_getodlist+0x210>)
 8006fda:	f7ff ff75 	bl	8006ec8 <SDO_infoerror>
 8006fde:	e003      	b.n	8006fe8 <SDO_getodlist+0x80>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8006fe0:	f7fd fc38 	bl	8004854 <ESC_claimbuffer>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80ba 	beq.w	8007164 <SDO_getodlist+0x1fc>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	4a5f      	ldr	r2, [pc, #380]	; (8007170 <SDO_getodlist+0x208>)
 8006ff4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	4a5e      	ldr	r2, [pc, #376]	; (8007174 <SDO_getodlist+0x20c>)
 8006ffc:	4413      	add	r3, r2
 8006ffe:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	7953      	ldrb	r3, [r2, #5]
 8007004:	2103      	movs	r1, #3
 8007006:	f361 0303 	bfi	r3, r1, #0, #4
 800700a:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007012:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	7a13      	ldrb	r3, [r2, #8]
 8007018:	2102      	movs	r1, #2
 800701a:	f361 0306 	bfi	r3, r1, #0, #7
 800701e:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	899b      	ldrh	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d13e      	bne.n	80070a6 <SDO_getodlist+0x13e>
      {
         coel->index = htoes (0x00);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	7a13      	ldrb	r3, [r2, #8]
 8007032:	f36f 13c7 	bfc	r3, #7, #1
 8007036:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2200      	movs	r2, #0
 800703c:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2200      	movs	r2, #0
 8007042:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 8007044:	4b4d      	ldr	r3, [pc, #308]	; (800717c <SDO_getodlist+0x214>)
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800704a:	4b49      	ldr	r3, [pc, #292]	; (8007170 <SDO_getodlist+0x208>)
 800704c:	2200      	movs	r2, #0
 800704e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.frags = frags;
 8007052:	4a47      	ldr	r2, [pc, #284]	; (8007170 <SDO_getodlist+0x208>)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3b01      	subs	r3, #1
 800705e:	4a44      	ldr	r2, [pc, #272]	; (8007170 <SDO_getodlist+0x208>)
 8007060:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         p = &(coel->datatype);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	330e      	adds	r3, #14
 8007068:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8aba      	ldrh	r2, [r7, #20]
 800706e:	801a      	strh	r2, [r3, #0]
         p++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3302      	adds	r3, #2
 8007074:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	801a      	strh	r2, [r3, #0]
         p++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3302      	adds	r3, #2
 8007080:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	801a      	strh	r2, [r3, #0]
         p++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3302      	adds	r3, #2
 800708c:	60fb      	str	r3, [r7, #12]
         *p = 0;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	801a      	strh	r2, [r3, #0]
         p++;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3302      	adds	r3, #2
 8007098:	60fb      	str	r3, [r7, #12]
         *p = 0;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2212      	movs	r2, #18
 80070a4:	801a      	strh	r2, [r3, #0]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	899b      	ldrh	r3, [r3, #12]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d156      	bne.n	800715c <SDO_getodlist+0x1f4>
      {
         if (frags > 1)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d912      	bls.n	80070da <SDO_getodlist+0x172>
         {
            coel->infoheader.incomplete = 1;
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	7a13      	ldrb	r3, [r2, #8]
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 80070be:	4b2c      	ldr	r3, [pc, #176]	; (8007170 <SDO_getodlist+0x208>)
 80070c0:	2213      	movs	r2, #19
 80070c2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = ODLISTSIZE >> 1;
 80070c6:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <SDO_getodlist+0x208>)
 80070c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ca:	885b      	ldrh	r3, [r3, #2]
 80070cc:	3b0e      	subs	r3, #14
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80070d6:	823b      	strh	r3, [r7, #16]
 80070d8:	e00d      	b.n	80070f6 <SDO_getodlist+0x18e>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	7a13      	ldrb	r3, [r2, #8]
 80070de:	f36f 13c7 	bfc	r3, #7, #1
 80070e2:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 80070e4:	4b25      	ldr	r3, [pc, #148]	; (800717c <SDO_getodlist+0x214>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 80070ea:	4b21      	ldr	r3, [pc, #132]	; (8007170 <SDO_getodlist+0x208>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
            n = entries;
 80070f2:	8abb      	ldrh	r3, [r7, #20]
 80070f4:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 80070fc:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <SDO_getodlist+0x208>)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
         ESCvar.fragsleft = frags - 1;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	3b01      	subs	r3, #1
 8007108:	4a19      	ldr	r2, [pc, #100]	; (8007170 <SDO_getodlist+0x208>)
 800710a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800710e:	4b18      	ldr	r3, [pc, #96]	; (8007170 <SDO_getodlist+0x208>)
 8007110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007114:	b29a      	uxth	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (0x01);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	819a      	strh	r2, [r3, #12]

         p = &(coel->datatype);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	330e      	adds	r3, #14
 8007124:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8007126:	2300      	movs	r3, #0
 8007128:	827b      	strh	r3, [r7, #18]
 800712a:	e00c      	b.n	8007146 <SDO_getodlist+0x1de>
         {
            *p = htoes (SDOobjects[i].index);
 800712c:	8a7b      	ldrh	r3, [r7, #18]
 800712e:	4a0f      	ldr	r2, [pc, #60]	; (800716c <SDO_getodlist+0x204>)
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	4413      	add	r3, r2
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	801a      	strh	r2, [r3, #0]
            p++;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3302      	adds	r3, #2
 800713e:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8007140:	8a7b      	ldrh	r3, [r7, #18]
 8007142:	3301      	adds	r3, #1
 8007144:	827b      	strh	r3, [r7, #18]
 8007146:	8a7a      	ldrh	r2, [r7, #18]
 8007148:	8a3b      	ldrh	r3, [r7, #16]
 800714a:	429a      	cmp	r2, r3
 800714c:	d3ee      	bcc.n	800712c <SDO_getodlist+0x1c4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800714e:	8a3b      	ldrh	r3, [r7, #16]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	b29b      	uxth	r3, r3
 8007154:	3308      	adds	r3, #8
 8007156:	b29a      	uxth	r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	4a07      	ldr	r2, [pc, #28]	; (800717c <SDO_getodlist+0x214>)
 8007160:	2103      	movs	r1, #3
 8007162:	54d1      	strb	r1, [r2, r3]
   }
}
 8007164:	bf00      	nop
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	080168f4 	.word	0x080168f4
 8007170:	2000154c 	.word	0x2000154c
 8007174:	20000ca8 	.word	0x20000ca8
 8007178:	06010000 	.word	0x06010000
 800717c:	200012a8 	.word	0x200012a8

08007180 <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 */
static void SDO_getodlistcont (void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 8007186:	f7fd fb65 	bl	8004854 <ESC_claimbuffer>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8088 	beq.w	80072a6 <SDO_getodlistcont+0x126>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	4a45      	ldr	r2, [pc, #276]	; (80072b0 <SDO_getodlistcont+0x130>)
 800719a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800719c:	fb02 f303 	mul.w	r3, r2, r3
 80071a0:	4a44      	ldr	r2, [pc, #272]	; (80072b4 <SDO_getodlistcont+0x134>)
 80071a2:	4413      	add	r3, r2
 80071a4:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	7953      	ldrb	r3, [r2, #5]
 80071aa:	2103      	movs	r1, #3
 80071ac:	f361 0303 	bfi	r3, r1, #0, #4
 80071b0:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80071b8:	80da      	strh	r2, [r3, #6]
         htoes (COE_SDOINFORMATION << 12);
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	7a13      	ldrb	r3, [r2, #8]
 80071be:	2102      	movs	r1, #2
 80071c0:	f361 0306 	bfi	r3, r1, #0, #7
 80071c4:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 80071c6:	4b3a      	ldr	r3, [pc, #232]	; (80072b0 <SDO_getodlistcont+0x130>)
 80071c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80071cc:	4b38      	ldr	r3, [pc, #224]	; (80072b0 <SDO_getodlistcont+0x130>)
 80071ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <SDO_getodlistcont+0x130>)
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	885b      	ldrh	r3, [r3, #2]
 80071dc:	3b0e      	subs	r3, #14
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	fb12 f303 	smulbb	r3, r2, r3
 80071ec:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 80071ee:	4b30      	ldr	r3, [pc, #192]	; (80072b0 <SDO_getodlistcont+0x130>)
 80071f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d911      	bls.n	800721c <SDO_getodlistcont+0x9c>
      {
         coel->infoheader.incomplete = 1;
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	7a13      	ldrb	r3, [r2, #8]
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 8007202:	4b2b      	ldr	r3, [pc, #172]	; (80072b0 <SDO_getodlistcont+0x130>)
 8007204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007206:	885b      	ldrh	r3, [r3, #2]
 8007208:	3b0e      	subs	r3, #14
 800720a:	085b      	lsrs	r3, r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007212:	b29a      	uxth	r2, r3
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	4413      	add	r3, r2
 8007218:	82bb      	strh	r3, [r7, #20]
 800721a:	e00f      	b.n	800723c <SDO_getodlistcont+0xbc>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	7a13      	ldrb	r3, [r2, #8]
 8007220:	f36f 13c7 	bfc	r3, #7, #1
 8007224:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <SDO_getodlistcont+0x138>)
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800722c:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <SDO_getodlistcont+0x130>)
 800722e:	2200      	movs	r2, #0
 8007230:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         n = ESCvar.entries;
 8007234:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <SDO_getodlistcont+0x130>)
 8007236:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800723a:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2200      	movs	r2, #0
 8007240:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8007242:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <SDO_getodlistcont+0x130>)
 8007244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007248:	3b01      	subs	r3, #1
 800724a:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <SDO_getodlistcont+0x130>)
 800724c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 8007250:	4b17      	ldr	r3, [pc, #92]	; (80072b0 <SDO_getodlistcont+0x130>)
 8007252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007256:	b29a      	uxth	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	330c      	adds	r3, #12
 8007260:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	82fb      	strh	r3, [r7, #22]
 8007266:	e00c      	b.n	8007282 <SDO_getodlistcont+0x102>
      {
         *p = htoes (SDOobjects[i].index);
 8007268:	8afb      	ldrh	r3, [r7, #22]
 800726a:	4a14      	ldr	r2, [pc, #80]	; (80072bc <SDO_getodlistcont+0x13c>)
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	4413      	add	r3, r2
 8007270:	881a      	ldrh	r2, [r3, #0]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	801a      	strh	r2, [r3, #0]
         p++;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	3302      	adds	r3, #2
 800727a:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 800727c:	8afb      	ldrh	r3, [r7, #22]
 800727e:	3301      	adds	r3, #1
 8007280:	82fb      	strh	r3, [r7, #22]
 8007282:	8afa      	ldrh	r2, [r7, #22]
 8007284:	8abb      	ldrh	r3, [r7, #20]
 8007286:	429a      	cmp	r2, r3
 8007288:	d3ee      	bcc.n	8007268 <SDO_getodlistcont+0xe8>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 800728a:	8aba      	ldrh	r2, [r7, #20]
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	b29b      	uxth	r3, r3
 8007296:	3306      	adds	r3, #6
 8007298:	b29a      	uxth	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <SDO_getodlistcont+0x138>)
 80072a2:	2103      	movs	r1, #3
 80072a4:	54d1      	strb	r1, [r2, r3]
   }
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	2000154c 	.word	0x2000154c
 80072b4:	20000ca8 	.word	0x20000ca8
 80072b8:	200012a8 	.word	0x200012a8
 80072bc:	080168f4 	.word	0x080168f4

080072c0 <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_getod (void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08c      	sub	sp, #48	; 0x30
 80072c4:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 80072cc:	4b74      	ldr	r3, [pc, #464]	; (80074a0 <SDO_getod+0x1e0>)
 80072ce:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	899b      	ldrh	r3, [r3, #12]
 80072d4:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 80072d6:	8bfb      	ldrh	r3, [r7, #30]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe fa9f 	bl	800581c <SDO_findobject>
 80072de:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f2c0 80d4 	blt.w	8007490 <SDO_getod+0x1d0>
   {
      MBXout = ESC_claimbuffer ();
 80072e8:	f7fd fab4 	bl	8004854 <ESC_claimbuffer>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80cf 	beq.w	8007496 <SDO_getod+0x1d6>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	4a6a      	ldr	r2, [pc, #424]	; (80074a4 <SDO_getod+0x1e4>)
 80072fc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80072fe:	fb02 f303 	mul.w	r3, r2, r3
 8007302:	4a67      	ldr	r2, [pc, #412]	; (80074a0 <SDO_getod+0x1e0>)
 8007304:	4413      	add	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	7953      	ldrb	r3, [r2, #5]
 800730c:	2103      	movs	r1, #3
 800730e:	f361 0303 	bfi	r3, r1, #0, #4
 8007312:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800731a:	80da      	strh	r2, [r3, #6]
            htoes (COE_SDOINFORMATION << 12);
         coel->infoheader.opcode = COE_GETODRESPONSE;
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	7a13      	ldrb	r3, [r2, #8]
 8007320:	2104      	movs	r1, #4
 8007322:	f361 0306 	bfi	r3, r1, #0, #7
 8007326:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	7a13      	ldrb	r3, [r2, #8]
 800732c:	f36f 13c7 	bfc	r3, #7, #1
 8007330:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2200      	movs	r2, #0
 8007336:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2200      	movs	r2, #0
 800733c:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (index);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	8bfa      	ldrh	r2, [r7, #30]
 8007342:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8007344:	4a58      	ldr	r2, [pc, #352]	; (80074a8 <SDO_getod+0x1e8>)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	4413      	add	r3, r2
 800734c:	3302      	adds	r3, #2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	2b07      	cmp	r3, #7
 8007352:	d120      	bne.n	8007396 <SDO_getod+0xd6>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8007354:	2100      	movs	r1, #0
 8007356:	69b8      	ldr	r0, [r7, #24]
 8007358:	f7fe fa02 	bl	8005760 <SDO_findsubindex>
 800735c:	4603      	mov	r3, r0
 800735e:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8007360:	4a51      	ldr	r2, [pc, #324]	; (80074a8 <SDO_getod+0x1e8>)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	4413      	add	r3, r2
 8007368:	330c      	adds	r3, #12
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	461a      	mov	r2, r3
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	4413      	add	r3, r2
 800737e:	885a      	ldrh	r2, [r3, #2]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8007384:	4a48      	ldr	r2, [pc, #288]	; (80074a8 <SDO_getod+0x1e8>)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	741a      	strb	r2, [r3, #16]
 8007394:	e037      	b.n	8007406 <SDO_getod+0x146>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 8007396:	4a44      	ldr	r2, [pc, #272]	; (80074a8 <SDO_getod+0x1e8>)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	4413      	add	r3, r2
 800739e:	3302      	adds	r3, #2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d122      	bne.n	80073ec <SDO_getod+0x12c>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 80073a6:	2100      	movs	r1, #0
 80073a8:	69b8      	ldr	r0, [r7, #24]
 80073aa:	f7fe f9d9 	bl	8005760 <SDO_findsubindex>
 80073ae:	4603      	mov	r3, r0
 80073b0:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 80073b2:	4a3d      	ldr	r2, [pc, #244]	; (80074a8 <SDO_getod+0x1e8>)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	4413      	add	r3, r2
 80073ba:	330c      	adds	r3, #12
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	461a      	mov	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4413      	add	r3, r2
 80073d0:	885a      	ldrh	r2, [r3, #2]
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 80073d6:	4a34      	ldr	r2, [pc, #208]	; (80074a8 <SDO_getod+0x1e8>)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	4413      	add	r3, r2
 80073de:	330c      	adds	r3, #12
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	741a      	strb	r2, [r3, #16]
 80073ea:	e00c      	b.n	8007406 <SDO_getod+0x146>
         }
         else
         {
            coel->datatype = htoes (0);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 80073f2:	4a2d      	ldr	r2, [pc, #180]	; (80074a8 <SDO_getod+0x1e8>)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	4413      	add	r3, r2
 80073fa:	330c      	adds	r3, #12
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	b2da      	uxtb	r2, r3
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 8007406:	4a28      	ldr	r2, [pc, #160]	; (80074a8 <SDO_getod+0x1e8>)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	4413      	add	r3, r2
 800740e:	3302      	adds	r3, #2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 8007418:	4a23      	ldr	r2, [pc, #140]	; (80074a8 <SDO_getod+0x1e8>)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	4413      	add	r3, r2
 8007420:	3308      	adds	r3, #8
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3312      	adds	r3, #18
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800742c:	e00e      	b.n	800744c <SDO_getod+0x18c>
         {
            *d = *s;
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	701a      	strb	r2, [r3, #0]
            n++;
 8007436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800743a:	3301      	adds	r3, #1
 800743c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	3301      	adds	r3, #1
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	3301      	adds	r3, #1
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <SDO_getod+0x1a2>
 8007454:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007458:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <SDO_getod+0x1e4>)
 800745a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745c:	3b12      	subs	r3, #18
 800745e:	429a      	cmp	r2, r3
 8007460:	d3e5      	bcc.n	800742e <SDO_getod+0x16e>
         }
         *d = *s;
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 800746a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746e:	b29b      	uxth	r3, r3
 8007470:	330c      	adds	r3, #12
 8007472:	b29a      	uxth	r2, r3
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	4a0c      	ldr	r2, [pc, #48]	; (80074ac <SDO_getod+0x1ec>)
 800747c:	2103      	movs	r1, #3
 800747e:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <SDO_getod+0x1ec>)
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <SDO_getod+0x1e4>)
 8007488:	2200      	movs	r2, #0
 800748a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 800748e:	e002      	b.n	8007496 <SDO_getod+0x1d6>
      SDO_infoerror (ABORT_NOOBJECT);
 8007490:	4807      	ldr	r0, [pc, #28]	; (80074b0 <SDO_getod+0x1f0>)
 8007492:	f7ff fd19 	bl	8006ec8 <SDO_infoerror>
}
 8007496:	bf00      	nop
 8007498:	3730      	adds	r7, #48	; 0x30
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000ca8 	.word	0x20000ca8
 80074a4:	2000154c 	.word	0x2000154c
 80074a8:	080168f4 	.word	0x080168f4
 80074ac:	200012a8 	.word	0x200012a8
 80074b0:	06020000 	.word	0x06020000

080074b4 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_geted (void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af00      	add	r7, sp, #0
   int16_t nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 80074be:	4b65      	ldr	r3, [pc, #404]	; (8007654 <SDO_geted+0x1a0>)
 80074c0:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	7b1a      	ldrb	r2, [r3, #12]
 80074c6:	7b5b      	ldrb	r3, [r3, #13]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	4313      	orrs	r3, r2
 80074cc:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	7b9b      	ldrb	r3, [r3, #14]
 80074d2:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 80074d4:	8afb      	ldrh	r3, [r7, #22]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe f9a0 	bl	800581c <SDO_findobject>
 80074dc:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f2c0 80b0 	blt.w	8007646 <SDO_geted+0x192>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80074e6:	7d7b      	ldrb	r3, [r7, #21]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6938      	ldr	r0, [r7, #16]
 80074ec:	f7fe f938 	bl	8005760 <SDO_findsubindex>
 80074f0:	4603      	mov	r3, r0
 80074f2:	81fb      	strh	r3, [r7, #14]
      if (nsub >= 0)
 80074f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f2c0 80a0 	blt.w	800763e <SDO_geted+0x18a>
      {
         objd = SDOobjects[nidx].objdesc;
 80074fe:	4a56      	ldr	r2, [pc, #344]	; (8007658 <SDO_geted+0x1a4>)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	4413      	add	r3, r2
 8007506:	330c      	adds	r3, #12
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 800750c:	f7fd f9a2 	bl	8004854 <ESC_claimbuffer>
 8007510:	4603      	mov	r3, r0
 8007512:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 8098 	beq.w	800764c <SDO_geted+0x198>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	4a4f      	ldr	r2, [pc, #316]	; (800765c <SDO_geted+0x1a8>)
 8007520:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	4a4b      	ldr	r2, [pc, #300]	; (8007654 <SDO_geted+0x1a0>)
 8007528:	4413      	add	r3, r2
 800752a:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	7953      	ldrb	r3, [r2, #5]
 8007530:	2103      	movs	r1, #3
 8007532:	f361 0303 	bfi	r3, r1, #0, #4
 8007536:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2200      	movs	r2, #0
 800753c:	719a      	strb	r2, [r3, #6]
 800753e:	2200      	movs	r2, #0
 8007540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007544:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	7a13      	ldrb	r3, [r2, #8]
 800754a:	2106      	movs	r1, #6
 800754c:	f361 0306 	bfi	r3, r1, #0, #7
 8007550:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	7a13      	ldrb	r3, [r2, #8]
 8007556:	f36f 13c7 	bfc	r3, #7, #1
 800755a:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2200      	movs	r2, #0
 8007560:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2200      	movs	r2, #0
 8007566:	729a      	strb	r2, [r3, #10]
 8007568:	2200      	movs	r2, #0
 800756a:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	8afa      	ldrh	r2, [r7, #22]
 8007570:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	7d7a      	ldrb	r2, [r7, #21]
 8007576:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2207      	movs	r2, #7
 800757c:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 800757e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	461a      	mov	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	885a      	ldrh	r2, [r3, #2]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8007596:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	461a      	mov	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	4413      	add	r3, r2
 80075a8:	889a      	ldrh	r2, [r3, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 80075ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	461a      	mov	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4413      	add	r3, r2
 80075c0:	88da      	ldrh	r2, [r3, #6]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 80075c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4413      	add	r3, r2
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	3316      	adds	r3, #22
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 80075e2:	e00c      	b.n	80075fe <SDO_geted+0x14a>
            {
               *d = *s;
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	701a      	strb	r2, [r3, #0]
               n++;
 80075ec:	7ffb      	ldrb	r3, [r7, #31]
 80075ee:	3301      	adds	r3, #1
 80075f0:	77fb      	strb	r3, [r7, #31]
               s++;
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	3301      	adds	r3, #1
 80075f6:	623b      	str	r3, [r7, #32]
               d++;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	3301      	adds	r3, #1
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <SDO_geted+0x15e>
 8007606:	7ffa      	ldrb	r2, [r7, #31]
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <SDO_geted+0x1a8>)
 800760a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760c:	3b16      	subs	r3, #22
 800760e:	429a      	cmp	r2, r3
 8007610:	d3e8      	bcc.n	80075e4 <SDO_geted+0x130>
            }
            *d = *s;
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 800761a:	7ffb      	ldrb	r3, [r7, #31]
 800761c:	b29b      	uxth	r3, r3
 800761e:	3310      	adds	r3, #16
 8007620:	b29a      	uxth	r2, r3
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	4a0d      	ldr	r2, [pc, #52]	; (8007660 <SDO_geted+0x1ac>)
 800762a:	2103      	movs	r1, #3
 800762c:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <SDO_geted+0x1ac>)
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <SDO_geted+0x1a8>)
 8007636:	2200      	movs	r2, #0
 8007638:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 800763c:	e006      	b.n	800764c <SDO_geted+0x198>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800763e:	4809      	ldr	r0, [pc, #36]	; (8007664 <SDO_geted+0x1b0>)
 8007640:	f7ff fc42 	bl	8006ec8 <SDO_infoerror>
}
 8007644:	e002      	b.n	800764c <SDO_geted+0x198>
      SDO_infoerror (ABORT_NOOBJECT);
 8007646:	4808      	ldr	r0, [pc, #32]	; (8007668 <SDO_geted+0x1b4>)
 8007648:	f7ff fc3e 	bl	8006ec8 <SDO_infoerror>
}
 800764c:	bf00      	nop
 800764e:	3728      	adds	r7, #40	; 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000ca8 	.word	0x20000ca8
 8007658:	080168f4 	.word	0x080168f4
 800765c:	2000154c 	.word	0x2000154c
 8007660:	200012a8 	.word	0x200012a8
 8007664:	06090011 	.word	0x06090011
 8007668:	06020000 	.word	0x06020000

0800766c <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint16_t service;
   if (ESCvar.MBXrun == 0)
 8007672:	4b67      	ldr	r3, [pc, #412]	; (8007810 <ESC_coeprocess+0x1a4>)
 8007674:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80c4 	beq.w	8007806 <ESC_coeprocess+0x19a>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800767e:	4b64      	ldr	r3, [pc, #400]	; (8007810 <ESC_coeprocess+0x1a4>)
 8007680:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8007684:	2b00      	cmp	r3, #0
 8007686:	d119      	bne.n	80076bc <ESC_coeprocess+0x50>
 8007688:	4b62      	ldr	r3, [pc, #392]	; (8007814 <ESC_coeprocess+0x1a8>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d115      	bne.n	80076bc <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 8007690:	4b61      	ldr	r3, [pc, #388]	; (8007818 <ESC_coeprocess+0x1ac>)
 8007692:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	795b      	ldrb	r3, [r3, #5]
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d10c      	bne.n	80076bc <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b07      	cmp	r3, #7
 80076aa:	d803      	bhi.n	80076b4 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 80076ac:	2008      	movs	r0, #8
 80076ae:	f7fd f955 	bl	800495c <MBX_error>
 80076b2:	e003      	b.n	80076bc <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 80076b4:	4b56      	ldr	r3, [pc, #344]	; (8007810 <ESC_coeprocess+0x1a4>)
 80076b6:	2203      	movs	r2, #3
 80076b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 80076bc:	4b54      	ldr	r3, [pc, #336]	; (8007810 <ESC_coeprocess+0x1a4>)
 80076be:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80076c2:	2b13      	cmp	r3, #19
 80076c4:	d106      	bne.n	80076d4 <ESC_coeprocess+0x68>
 80076c6:	4b52      	ldr	r3, [pc, #328]	; (8007810 <ESC_coeprocess+0x1a4>)
 80076c8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 80076d0:	f7ff fd56 	bl	8007180 <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 80076d4:	4b4e      	ldr	r3, [pc, #312]	; (8007810 <ESC_coeprocess+0x1a4>)
 80076d6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f040 8094 	bne.w	8007808 <ESC_coeprocess+0x19c>
   {
      coesdo = (_COEsdo *) &MBX[0];
 80076e0:	4b4d      	ldr	r3, [pc, #308]	; (8007818 <ESC_coeprocess+0x1ac>)
 80076e2:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 80076e4:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <ESC_coeprocess+0x1ac>)
 80076e6:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	88db      	ldrh	r3, [r3, #6]
 80076ec:	0b1b      	lsrs	r3, r3, #12
 80076ee:	807b      	strh	r3, [r7, #2]
      if (service == COE_SDOREQUEST)
 80076f0:	887b      	ldrh	r3, [r7, #2]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d142      	bne.n	800777c <ESC_coeprocess+0x110>
      {
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	7a1b      	ldrb	r3, [r3, #8]
 80076fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	d10f      	bne.n	8007722 <ESC_coeprocess+0xb6>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2b0a      	cmp	r3, #10
 8007708:	d10b      	bne.n	8007722 <ESC_coeprocess+0xb6>
         {
            /* initiate SDO upload request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	7a1b      	ldrb	r3, [r3, #8]
 800770e:	f003 0310 	and.w	r3, r3, #16
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <ESC_coeprocess+0xb0>
            {
               SDO_upload_complete_access ();
 8007716:	f7fe fe3b 	bl	8006390 <SDO_upload_complete_access>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 800771a:	e075      	b.n	8007808 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_upload ();
 800771c:	f7fe fa74 	bl	8005c08 <SDO_upload>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8007720:	e072      	b.n	8007808 <ESC_coeprocess+0x19c>
            }
         }
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	7a1b      	ldrb	r3, [r3, #8]
 8007726:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800772a:	2b60      	cmp	r3, #96	; 0x60
 800772c:	d10b      	bne.n	8007746 <ESC_coeprocess+0xda>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	2b0a      	cmp	r3, #10
 8007734:	d107      	bne.n	8007746 <ESC_coeprocess+0xda>
               && (ESCvar.segmented == MBXSEU))
 8007736:	4b36      	ldr	r3, [pc, #216]	; (8007810 <ESC_coeprocess+0x1a4>)
 8007738:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d102      	bne.n	8007746 <ESC_coeprocess+0xda>
         {
            /* SDO upload segment request */
            SDO_uploadsegment ();
 8007740:	f7fe ff44 	bl	80065cc <SDO_uploadsegment>
 8007744:	e060      	b.n	8007808 <ESC_coeprocess+0x19c>
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	7a1b      	ldrb	r3, [r3, #8]
 800774a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800774e:	2b20      	cmp	r3, #32
 8007750:	d10b      	bne.n	800776a <ESC_coeprocess+0xfe>
         {
            /* initiate SDO download request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	7a1b      	ldrb	r3, [r3, #8]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <ESC_coeprocess+0xf8>
            {
               SDO_download_complete_access ();
 800775e:	f7ff f9b3 	bl	8006ac8 <SDO_download_complete_access>
 8007762:	e051      	b.n	8007808 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_download ();
 8007764:	f7fe ffec 	bl	8006740 <SDO_download>
 8007768:	e04e      	b.n	8007808 <ESC_coeprocess+0x19c>
            }
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	7a1b      	ldrb	r3, [r3, #8]
 800776e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d148      	bne.n	8007808 <ESC_coeprocess+0x19c>
         {
            /* SDO download segment request */
            SDO_downloadsegment ();
 8007776:	f7ff fabb 	bl	8006cf0 <SDO_downloadsegment>
 800777a:	e045      	b.n	8007808 <ESC_coeprocess+0x19c>
         }
      }
      /* initiate SDO get OD list */
      else
      {
         if ((service == COE_SDOINFORMATION)
 800777c:	887b      	ldrh	r3, [r7, #2]
 800777e:	2b08      	cmp	r3, #8
 8007780:	d109      	bne.n	8007796 <ESC_coeprocess+0x12a>
               && (coeobjdesc->infoheader.opcode == 0x01))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7a1b      	ldrb	r3, [r3, #8]
 8007786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d102      	bne.n	8007796 <ESC_coeprocess+0x12a>
         {
            SDO_getodlist ();
 8007790:	f7ff fbea 	bl	8006f68 <SDO_getodlist>
 8007794:	e038      	b.n	8007808 <ESC_coeprocess+0x19c>
         }
         /* initiate SDO get OD */
         else
         {
            if ((service == COE_SDOINFORMATION)
 8007796:	887b      	ldrh	r3, [r7, #2]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d109      	bne.n	80077b0 <ESC_coeprocess+0x144>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	7a1b      	ldrb	r3, [r3, #8]
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d102      	bne.n	80077b0 <ESC_coeprocess+0x144>
            {
               SDO_getod ();
 80077aa:	f7ff fd89 	bl	80072c0 <SDO_getod>
 80077ae:	e02b      	b.n	8007808 <ESC_coeprocess+0x19c>
            }
            /* initiate SDO get ED */
            else
            {
               if ((service == COE_SDOINFORMATION)
 80077b0:	887b      	ldrh	r3, [r7, #2]
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d109      	bne.n	80077ca <ESC_coeprocess+0x15e>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7a1b      	ldrb	r3, [r3, #8]
 80077ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	d102      	bne.n	80077ca <ESC_coeprocess+0x15e>
               {
                  SDO_geted ();
 80077c4:	f7ff fe76 	bl	80074b4 <SDO_geted>
 80077c8:	e01e      	b.n	8007808 <ESC_coeprocess+0x19c>
               }
               else
               {
                  /* COE not recognised above */
                  if (ESCvar.xoe == MBXCOE)
 80077ca:	4b11      	ldr	r3, [pc, #68]	; (8007810 <ESC_coeprocess+0x1a4>)
 80077cc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d119      	bne.n	8007808 <ESC_coeprocess+0x19c>
                  {
                     if (service == 0)
 80077d4:	887b      	ldrh	r3, [r7, #2]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d103      	bne.n	80077e2 <ESC_coeprocess+0x176>
                     {
                        MBX_error (MBXERR_INVALIDHEADER);
 80077da:	2005      	movs	r0, #5
 80077dc:	f7fd f8be 	bl	800495c <MBX_error>
 80077e0:	e009      	b.n	80077f6 <ESC_coeprocess+0x18a>
                     }
                     else
                     {
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80077e8:	b299      	uxth	r1, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	7ada      	ldrb	r2, [r3, #11]
 80077ee:	4b0b      	ldr	r3, [pc, #44]	; (800781c <ESC_coeprocess+0x1b0>)
 80077f0:	2000      	movs	r0, #0
 80077f2:	f7fe f99f 	bl	8005b34 <SDO_abort>
                     }
                     MBXcontrol[0].state = MBXstate_idle;
 80077f6:	4b07      	ldr	r3, [pc, #28]	; (8007814 <ESC_coeprocess+0x1a8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	701a      	strb	r2, [r3, #0]
                     ESCvar.xoe = 0;
 80077fc:	4b04      	ldr	r3, [pc, #16]	; (8007810 <ESC_coeprocess+0x1a4>)
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8007804:	e000      	b.n	8007808 <ESC_coeprocess+0x19c>
      return;
 8007806:	bf00      	nop
               }
            }
         }
      }
   }
}
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	2000154c 	.word	0x2000154c
 8007814:	200012a8 	.word	0x200012a8
 8007818:	20000ca8 	.word	0x20000ca8
 800781c:	06010000 	.word	0x06010000

08007820 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 8007820:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007824:	b092      	sub	sp, #72	; 0x48
 8007826:	af00      	add	r7, sp, #0
 8007828:	6278      	str	r0, [r7, #36]	; 0x24
 800782a:	6239      	str	r1, [r7, #32]
 800782c:	61fa      	str	r2, [r7, #28]
   const unsigned int word_offset = offset / 64;
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	099b      	lsrs	r3, r3, #6
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
   const unsigned int bit_offset = offset % 64;
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800783a:	63bb      	str	r3, [r7, #56]	; 0x38
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d018      	beq.n	8007874 <COE_bitsliceGet+0x54>
 8007842:	f04f 0201 	mov.w	r2, #1
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	69fe      	ldr	r6, [r7, #28]
 800784c:	f1a6 0120 	sub.w	r1, r6, #32
 8007850:	f1c6 0020 	rsb	r0, r6, #32
 8007854:	fa03 f506 	lsl.w	r5, r3, r6
 8007858:	fa02 f101 	lsl.w	r1, r2, r1
 800785c:	430d      	orrs	r5, r1
 800785e:	fa22 f000 	lsr.w	r0, r2, r0
 8007862:	4305      	orrs	r5, r0
 8007864:	fa02 f406 	lsl.w	r4, r2, r6
 8007868:	1e63      	subs	r3, r4, #1
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e005      	b.n	8007880 <COE_bitsliceGet+0x60>
 8007874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007878:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800787c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007880:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007884:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
   uint64_t w0;
   uint64_t w1 = 0;
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 8007894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	4413      	add	r3, r2
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   w0 = w0 >> bit_offset;
 80078a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078aa:	f1c1 0420 	rsb	r4, r1, #32
 80078ae:	f1a1 0020 	sub.w	r0, r1, #32
 80078b2:	fa22 fa01 	lsr.w	sl, r2, r1
 80078b6:	fa03 f404 	lsl.w	r4, r3, r4
 80078ba:	ea4a 0a04 	orr.w	sl, sl, r4
 80078be:	fa23 f000 	lsr.w	r0, r3, r0
 80078c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80078c6:	fa23 fb01 	lsr.w	fp, r3, r1
 80078ca:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	4413      	add	r3, r2
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d91f      	bls.n	8007918 <COE_bitsliceGet+0xf8>
   {
      w1 = bitmap[word_offset + 1];
 80078d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078da:	3301      	adds	r3, #1
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e0:	4413      	add	r3, r2
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      w1 = w1 << (64 - bit_offset);
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 80078f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078f4:	f1a1 0420 	sub.w	r4, r1, #32
 80078f8:	f1c1 0020 	rsb	r0, r1, #32
 80078fc:	fa03 f901 	lsl.w	r9, r3, r1
 8007900:	fa02 f404 	lsl.w	r4, r2, r4
 8007904:	ea49 0904 	orr.w	r9, r9, r4
 8007908:	fa22 f000 	lsr.w	r0, r2, r0
 800790c:	ea49 0900 	orr.w	r9, r9, r0
 8007910:	fa02 f801 	lsl.w	r8, r2, r1
 8007914:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
   }

   w0 = (w1 | w0);
 8007918:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800791c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007920:	ea40 0402 	orr.w	r4, r0, r2
 8007924:	603c      	str	r4, [r7, #0]
 8007926:	430b      	orrs	r3, r1
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800792e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   return (w0 & mask);
 8007932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007936:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800793a:	ea00 0402 	and.w	r4, r0, r2
 800793e:	60bc      	str	r4, [r7, #8]
 8007940:	400b      	ands	r3, r1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8007948:	4610      	mov	r0, r2
 800794a:	4619      	mov	r1, r3
 800794c:	3748      	adds	r7, #72	; 0x48
 800794e:	46bd      	mov	sp, r7
 8007950:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007954:	4770      	bx	lr

08007956 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 8007956:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800795a:	b0aa      	sub	sp, #168	; 0xa8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6678      	str	r0, [r7, #100]	; 0x64
 8007960:	6639      	str	r1, [r7, #96]	; 0x60
 8007962:	65fa      	str	r2, [r7, #92]	; 0x5c
   const unsigned int word_offset = offset / 64;
 8007964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   const unsigned int bit_offset = offset % 64;
 800796c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800796e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8007976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d018      	beq.n	80079ae <COE_bitsliceSet+0x58>
 800797c:	f04f 0201 	mov.w	r2, #1
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8007986:	f1a6 0120 	sub.w	r1, r6, #32
 800798a:	f1c6 0020 	rsb	r0, r6, #32
 800798e:	fa03 f506 	lsl.w	r5, r3, r6
 8007992:	fa02 f101 	lsl.w	r1, r2, r1
 8007996:	430d      	orrs	r5, r1
 8007998:	fa22 f000 	lsr.w	r0, r2, r0
 800799c:	4305      	orrs	r5, r0
 800799e:	fa02 f406 	lsl.w	r4, r2, r6
 80079a2:	1e63      	subs	r3, r4, #1
 80079a4:	643b      	str	r3, [r7, #64]	; 0x40
 80079a6:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 80079aa:	647b      	str	r3, [r7, #68]	; 0x44
 80079ac:	e005      	b.n	80079ba <COE_bitsliceSet+0x64>
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80079b6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80079ba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80079be:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
   const uint64_t mask0 = mask << bit_offset;
 80079c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80079c6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80079ca:	f1a4 0120 	sub.w	r1, r4, #32
 80079ce:	f1c4 0020 	rsb	r0, r4, #32
 80079d2:	fa03 f904 	lsl.w	r9, r3, r4
 80079d6:	fa02 f101 	lsl.w	r1, r2, r1
 80079da:	ea49 0901 	orr.w	r9, r9, r1
 80079de:	fa22 f000 	lsr.w	r0, r2, r0
 80079e2:	ea49 0900 	orr.w	r9, r9, r0
 80079e6:	fa02 f804 	lsl.w	r8, r2, r4
 80079ea:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
   uint64_t v0 = value << bit_offset;
 80079ee:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80079f2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80079f6:	f1a4 0120 	sub.w	r1, r4, #32
 80079fa:	f1c4 0020 	rsb	r0, r4, #32
 80079fe:	fa03 fb04 	lsl.w	fp, r3, r4
 8007a02:	fa02 f101 	lsl.w	r1, r2, r1
 8007a06:	ea4b 0b01 	orr.w	fp, fp, r1
 8007a0a:	fa22 f000 	lsr.w	r0, r2, r0
 8007a0e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007a12:	fa02 fa04 	lsl.w	sl, r2, r4
 8007a16:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
   uint64_t w0 = bitmap[word_offset];
 8007a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a1e:	00da      	lsls	r2, r3, #3
 8007a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a22:	4413      	add	r3, r2
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8007a2c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007a30:	43d1      	mvns	r1, r2
 8007a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a34:	43db      	mvns	r3, r3
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a38:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a3c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007a40:	4621      	mov	r1, r4
 8007a42:	4011      	ands	r1, r2
 8007a44:	6339      	str	r1, [r7, #48]	; 0x30
 8007a46:	4629      	mov	r1, r5
 8007a48:	4019      	ands	r1, r3
 8007a4a:	6379      	str	r1, [r7, #52]	; 0x34
 8007a4c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007a50:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007a54:	ea00 0402 	and.w	r4, r0, r2
 8007a58:	62bc      	str	r4, [r7, #40]	; 0x28
 8007a5a:	400b      	ands	r3, r1
 8007a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a62:	4623      	mov	r3, r4
 8007a64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a68:	4602      	mov	r2, r0
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	462b      	mov	r3, r5
 8007a70:	460a      	mov	r2, r1
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007a7a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
   bitmap[word_offset] = w0;
 8007a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a86:	18d1      	adds	r1, r2, r3
 8007a88:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a8c:	e9c1 2300 	strd	r2, r3, [r1]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 8007a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a96:	4413      	add	r3, r2
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d976      	bls.n	8007b8a <COE_bitsliceSet+0x234>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 8007a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aa0:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
 8007aa4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007aa8:	f1c4 0120 	rsb	r1, r4, #32
 8007aac:	f1a4 0020 	sub.w	r0, r4, #32
 8007ab0:	fa22 f504 	lsr.w	r5, r2, r4
 8007ab4:	653d      	str	r5, [r7, #80]	; 0x50
 8007ab6:	fa03 f101 	lsl.w	r1, r3, r1
 8007aba:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007abc:	430d      	orrs	r5, r1
 8007abe:	653d      	str	r5, [r7, #80]	; 0x50
 8007ac0:	fa23 f000 	lsr.w	r0, r3, r0
 8007ac4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ac6:	4301      	orrs	r1, r0
 8007ac8:	6539      	str	r1, [r7, #80]	; 0x50
 8007aca:	40e3      	lsrs	r3, r4
 8007acc:	657b      	str	r3, [r7, #84]	; 0x54
 8007ace:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007ad2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      uint64_t v1 = value >> (64 - bit_offset);
 8007ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ada:	f1c3 0040 	rsb	r0, r3, #64	; 0x40
 8007ade:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8007ae2:	f1c0 0420 	rsb	r4, r0, #32
 8007ae6:	f1a0 0120 	sub.w	r1, r0, #32
 8007aea:	fa22 f500 	lsr.w	r5, r2, r0
 8007aee:	64bd      	str	r5, [r7, #72]	; 0x48
 8007af0:	fa03 f404 	lsl.w	r4, r3, r4
 8007af4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007af6:	4325      	orrs	r5, r4
 8007af8:	64bd      	str	r5, [r7, #72]	; 0x48
 8007afa:	fa23 f101 	lsr.w	r1, r3, r1
 8007afe:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007b00:	430c      	orrs	r4, r1
 8007b02:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b04:	40c3      	lsrs	r3, r0
 8007b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b08:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007b0c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
      uint64_t w1 = bitmap[word_offset + 1];
 8007b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b14:	3301      	adds	r3, #1
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b1a:	4413      	add	r3, r2
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

      w1 = (w1 & ~mask1) | (v1 & mask1);
 8007b24:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b28:	43d1      	mvns	r1, r2
 8007b2a:	6239      	str	r1, [r7, #32]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007b34:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4011      	ands	r1, r2
 8007b3c:	61b9      	str	r1, [r7, #24]
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4019      	ands	r1, r3
 8007b42:	61f9      	str	r1, [r7, #28]
 8007b44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007b48:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b4c:	ea00 0402 	and.w	r4, r0, r2
 8007b50:	613c      	str	r4, [r7, #16]
 8007b52:	400b      	ands	r3, r1
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b60:	4602      	mov	r2, r0
 8007b62:	4313      	orrs	r3, r2
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	462b      	mov	r3, r5
 8007b68:	460a      	mov	r2, r1
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007b72:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
      bitmap[word_offset + 1] = w1;
 8007b76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b80:	18d1      	adds	r1, r2, r3
 8007b82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007b86:	e9c1 2300 	strd	r2, r3, [r1]
   }
}
 8007b8a:	bf00      	nop
 8007b8c:	37a8      	adds	r7, #168	; 0xa8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b94:	4770      	bx	lr
	...

08007b98 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 8007b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	e9c7 2302 	strd	r2, r3, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	2b36      	cmp	r3, #54	; 0x36
 8007bb6:	f200 8095 	bhi.w	8007ce4 <COE_getValue+0x14c>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <COE_getValue+0x28>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007c9d 	.word	0x08007c9d
 8007bc4:	08007c9d 	.word	0x08007c9d
 8007bc8:	08007cb1 	.word	0x08007cb1
 8007bcc:	08007cc5 	.word	0x08007cc5
 8007bd0:	08007c9d 	.word	0x08007c9d
 8007bd4:	08007cb1 	.word	0x08007cb1
 8007bd8:	08007cc5 	.word	0x08007cc5
 8007bdc:	08007cc5 	.word	0x08007cc5
 8007be0:	08007ce5 	.word	0x08007ce5
 8007be4:	08007ce5 	.word	0x08007ce5
 8007be8:	08007ce5 	.word	0x08007ce5
 8007bec:	08007ce5 	.word	0x08007ce5
 8007bf0:	08007ce5 	.word	0x08007ce5
 8007bf4:	08007ce5 	.word	0x08007ce5
 8007bf8:	08007ce5 	.word	0x08007ce5
 8007bfc:	08007ce5 	.word	0x08007ce5
 8007c00:	08007cd7 	.word	0x08007cd7
 8007c04:	08007ce5 	.word	0x08007ce5
 8007c08:	08007ce5 	.word	0x08007ce5
 8007c0c:	08007ce5 	.word	0x08007ce5
 8007c10:	08007cd7 	.word	0x08007cd7
 8007c14:	08007ce5 	.word	0x08007ce5
 8007c18:	08007ce5 	.word	0x08007ce5
 8007c1c:	08007ce5 	.word	0x08007ce5
 8007c20:	08007ce5 	.word	0x08007ce5
 8007c24:	08007ce5 	.word	0x08007ce5
 8007c28:	08007cd7 	.word	0x08007cd7
 8007c2c:	08007ce5 	.word	0x08007ce5
 8007c30:	08007ce5 	.word	0x08007ce5
 8007c34:	08007ce5 	.word	0x08007ce5
 8007c38:	08007ce5 	.word	0x08007ce5
 8007c3c:	08007ce5 	.word	0x08007ce5
 8007c40:	08007ce5 	.word	0x08007ce5
 8007c44:	08007ce5 	.word	0x08007ce5
 8007c48:	08007ce5 	.word	0x08007ce5
 8007c4c:	08007ce5 	.word	0x08007ce5
 8007c50:	08007ce5 	.word	0x08007ce5
 8007c54:	08007ce5 	.word	0x08007ce5
 8007c58:	08007ce5 	.word	0x08007ce5
 8007c5c:	08007ce5 	.word	0x08007ce5
 8007c60:	08007ce5 	.word	0x08007ce5
 8007c64:	08007ce5 	.word	0x08007ce5
 8007c68:	08007ce5 	.word	0x08007ce5
 8007c6c:	08007ce5 	.word	0x08007ce5
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007cb1 	.word	0x08007cb1
 8007c78:	08007cc5 	.word	0x08007cc5
 8007c7c:	08007c9d 	.word	0x08007c9d
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007c9d 	.word	0x08007c9d
 8007c8c:	08007c9d 	.word	0x08007c9d
 8007c90:	08007c9d 	.word	0x08007c9d
 8007c94:	08007c9d 	.word	0x08007c9d
 8007c98:	08007c9d 	.word	0x08007c9d
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      value = *(uint8_t *)obj->data;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	469a      	mov	sl, r3
 8007ca8:	4693      	mov	fp, r2
 8007caa:	e9c7 ab02 	strd	sl, fp, [r7, #8]
      break;
 8007cae:	e020      	b.n	8007cf2 <COE_getValue+0x15a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      value = *(uint16_t *)obj->data;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4698      	mov	r8, r3
 8007cbc:	4691      	mov	r9, r2
 8007cbe:	e9c7 8902 	strd	r8, r9, [r7, #8]
      break;
 8007cc2:	e016      	b.n	8007cf2 <COE_getValue+0x15a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      value = *(uint32_t *)obj->data;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	461c      	mov	r4, r3
 8007cce:	4615      	mov	r5, r2
 8007cd0:	e9c7 4502 	strd	r4, r5, [r7, #8]
      break;
 8007cd4:	e00d      	b.n	8007cf2 <COE_getValue+0x15a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 8007ce2:	e006      	b.n	8007cf2 <COE_getValue+0x15a>

   default:
      CC_ASSERT (0);
 8007ce4:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <COE_getValue+0x16c>)
 8007ce6:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <COE_getValue+0x170>)
 8007ce8:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8007cec:	4807      	ldr	r0, [pc, #28]	; (8007d0c <COE_getValue+0x174>)
 8007cee:	f00b f91d 	bl	8012f2c <__assert_func>
   }

   return value;
 8007cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d02:	bf00      	nop
 8007d04:	08014900 	.word	0x08014900
 8007d08:	08014d34 	.word	0x08014d34
 8007d0c:	08014904 	.word	0x08014904

08007d10 <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b36      	cmp	r3, #54	; 0x36
 8007d24:	f200 8088 	bhi.w	8007e38 <COE_setValue+0x128>
 8007d28:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <COE_setValue+0x20>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007e0d 	.word	0x08007e0d
 8007d34:	08007e0d 	.word	0x08007e0d
 8007d38:	08007e17 	.word	0x08007e17
 8007d3c:	08007e21 	.word	0x08007e21
 8007d40:	08007e0d 	.word	0x08007e0d
 8007d44:	08007e17 	.word	0x08007e17
 8007d48:	08007e21 	.word	0x08007e21
 8007d4c:	08007e21 	.word	0x08007e21
 8007d50:	08007e39 	.word	0x08007e39
 8007d54:	08007e39 	.word	0x08007e39
 8007d58:	08007e39 	.word	0x08007e39
 8007d5c:	08007e39 	.word	0x08007e39
 8007d60:	08007e39 	.word	0x08007e39
 8007d64:	08007e39 	.word	0x08007e39
 8007d68:	08007e39 	.word	0x08007e39
 8007d6c:	08007e39 	.word	0x08007e39
 8007d70:	08007e2b 	.word	0x08007e2b
 8007d74:	08007e39 	.word	0x08007e39
 8007d78:	08007e39 	.word	0x08007e39
 8007d7c:	08007e39 	.word	0x08007e39
 8007d80:	08007e2b 	.word	0x08007e2b
 8007d84:	08007e39 	.word	0x08007e39
 8007d88:	08007e39 	.word	0x08007e39
 8007d8c:	08007e39 	.word	0x08007e39
 8007d90:	08007e39 	.word	0x08007e39
 8007d94:	08007e39 	.word	0x08007e39
 8007d98:	08007e2b 	.word	0x08007e2b
 8007d9c:	08007e39 	.word	0x08007e39
 8007da0:	08007e39 	.word	0x08007e39
 8007da4:	08007e39 	.word	0x08007e39
 8007da8:	08007e39 	.word	0x08007e39
 8007dac:	08007e39 	.word	0x08007e39
 8007db0:	08007e39 	.word	0x08007e39
 8007db4:	08007e39 	.word	0x08007e39
 8007db8:	08007e39 	.word	0x08007e39
 8007dbc:	08007e39 	.word	0x08007e39
 8007dc0:	08007e39 	.word	0x08007e39
 8007dc4:	08007e39 	.word	0x08007e39
 8007dc8:	08007e39 	.word	0x08007e39
 8007dcc:	08007e39 	.word	0x08007e39
 8007dd0:	08007e39 	.word	0x08007e39
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007e39 	.word	0x08007e39
 8007ddc:	08007e39 	.word	0x08007e39
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	08007e17 	.word	0x08007e17
 8007de8:	08007e21 	.word	0x08007e21
 8007dec:	08007e0d 	.word	0x08007e0d
 8007df0:	08007e0d 	.word	0x08007e0d
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e0d 	.word	0x08007e0d
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e0d 	.word	0x08007e0d
 8007e04:	08007e0d 	.word	0x08007e0d
 8007e08:	08007e0d 	.word	0x08007e0d
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	783a      	ldrb	r2, [r7, #0]
 8007e12:	701a      	strb	r2, [r3, #0]
      break;
 8007e14:	e011      	b.n	8007e3a <COE_setValue+0x12a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	883a      	ldrh	r2, [r7, #0]
 8007e1c:	801a      	strh	r2, [r3, #0]
      break;
 8007e1e:	e00c      	b.n	8007e3a <COE_setValue+0x12a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	601a      	str	r2, [r3, #0]
      break;
 8007e28:	e007      	b.n	8007e3a <COE_setValue+0x12a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6919      	ldr	r1, [r3, #16]
 8007e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e32:	e9c1 2300 	strd	r2, r3, [r1]
      break;
 8007e36:	e000      	b.n	8007e3a <COE_setValue+0x12a>

   default:
      DPRINT ("ignored\n");
      break;
 8007e38:	bf00      	nop
   }
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop

08007e48 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 8007e48:	b5b0      	push	{r4, r5, r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 8007e4e:	4b32      	ldr	r3, [pc, #200]	; (8007f18 <COE_initDefaultValues+0xd0>)
 8007e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d15a      	bne.n	8007f0e <COE_initDefaultValues+0xc6>
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60bb      	str	r3, [r7, #8]
 8007e5c:	e046      	b.n	8007eec <COE_initDefaultValues+0xa4>
   {
      objd = SDOobjects[n].objdesc;
 8007e5e:	4a2f      	ldr	r2, [pc, #188]	; (8007f1c <COE_initDefaultValues+0xd4>)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	4413      	add	r3, r2
 8007e66:	330c      	adds	r3, #12
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 8007e6c:	4a2b      	ldr	r2, [pc, #172]	; (8007f1c <COE_initDefaultValues+0xd4>)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	4413      	add	r3, r2
 8007e74:	3304      	adds	r3, #4
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	70fb      	strb	r3, [r7, #3]

      i = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d018      	beq.n	8007ec6 <COE_initDefaultValues+0x7e>
         {
            COE_setValue (&objd[i], objd[i].value);
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	1899      	adds	r1, r3, r2
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	461c      	mov	r4, r3
 8007eba:	4615      	mov	r5, r2
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	f7ff ff25 	bl	8007d10 <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	60fa      	str	r2, [r7, #12]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4413      	add	r3, r2
 8007edc:	881a      	ldrh	r2, [r3, #0]
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d3cb      	bcc.n	8007e7e <COE_initDefaultValues+0x36>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60bb      	str	r3, [r7, #8]
 8007eec:	4a0b      	ldr	r2, [pc, #44]	; (8007f1c <COE_initDefaultValues+0xd4>)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	4413      	add	r3, r2
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d1af      	bne.n	8007e5e <COE_initDefaultValues+0x16>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 8007efe:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <COE_initDefaultValues+0xd0>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <COE_initDefaultValues+0xc8>
   {
      ESCvar.set_defaults_hook();
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <COE_initDefaultValues+0xd0>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	4798      	blx	r3
 8007f0c:	e000      	b.n	8007f10 <COE_initDefaultValues+0xc8>
      return;
 8007f0e:	bf00      	nop
   }
}
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bdb0      	pop	{r4, r5, r7, pc}
 8007f16:	bf00      	nop
 8007f18:	2000154c 	.word	0x2000154c
 8007f1c:	080168f4 	.word	0x080168f4

08007f20 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d006      	beq.n	8007f44 <COE_pdoPack+0x24>
 8007f36:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <COE_pdoPack+0xb8>)
 8007f38:	4a28      	ldr	r2, [pc, #160]	; (8007fdc <COE_pdoPack+0xbc>)
 8007f3a:	f240 61fa 	movw	r1, #1786	; 0x6fa
 8007f3e:	4828      	ldr	r0, [pc, #160]	; (8007fe0 <COE_pdoPack+0xc0>)
 8007f40:	f00a fff4 	bl	8012f2c <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8007f44:	2300      	movs	r3, #0
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
 8007f48:	e03c      	b.n	8007fc4 <COE_pdoPack+0xa4>
   {
      const _objd * obj = mappings[ix].obj;
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	461a      	mov	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4413      	add	r3, r2
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	4613      	mov	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d022      	beq.n	8007fbe <COE_pdoPack+0x9e>
      {
         if (obj->bitlength > 64)
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	889b      	ldrh	r3, [r3, #4]
 8007f7c:	2b40      	cmp	r3, #64	; 0x40
 8007f7e:	d90d      	bls.n	8007f9c <COE_pdoPack+0x7c>
         {
            memcpy (
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	08db      	lsrs	r3, r3, #3
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	18d0      	adds	r0, r2, r3
               obj->data,
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	889b      	ldrh	r3, [r3, #4]
 8007f90:	3307      	adds	r3, #7
            memcpy (
 8007f92:	08db      	lsrs	r3, r3, #3
 8007f94:	461a      	mov	r2, r3
 8007f96:	f00b f92c 	bl	80131f2 <memcpy>
 8007f9a:	e010      	b.n	8007fbe <COE_pdoPack+0x9e>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 8007f9c:	6a38      	ldr	r0, [r7, #32]
 8007f9e:	f7ff fdfb 	bl	8007b98 <COE_getValue>
 8007fa2:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	889b      	ldrh	r3, [r3, #4]
            COE_bitsliceSet (
 8007faa:	4619      	mov	r1, r3
 8007fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fb0:	e9cd 2300 	strd	r2, r3, [sp]
 8007fb4:	460a      	mov	r2, r1
 8007fb6:	69f9      	ldr	r1, [r7, #28]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff fccc 	bl	8007956 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	dbbe      	blt.n	8007f4a <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	0801492c 	.word	0x0801492c
 8007fdc:	08014d44 	.word	0x08014d44
 8007fe0:	08014904 	.word	0x08014904

08007fe4 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d006      	beq.n	8008008 <COE_pdoUnpack+0x24>
 8007ffa:	4b26      	ldr	r3, [pc, #152]	; (8008094 <COE_pdoUnpack+0xb0>)
 8007ffc:	4a26      	ldr	r2, [pc, #152]	; (8008098 <COE_pdoUnpack+0xb4>)
 8007ffe:	f240 7129 	movw	r1, #1833	; 0x729
 8008002:	4826      	ldr	r0, [pc, #152]	; (800809c <COE_pdoUnpack+0xb8>)
 8008004:	f00a ff92 	bl	8012f2c <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8008008:	2300      	movs	r3, #0
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
 800800c:	e039      	b.n	8008082 <COE_pdoUnpack+0x9e>
   {
      const _objd * obj = mappings[ix].obj;
 800800e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008010:	4613      	mov	r3, r2
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	461a      	mov	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8008022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008024:	4613      	mov	r3, r2
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	461a      	mov	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01f      	beq.n	800807c <COE_pdoUnpack+0x98>
      {
         if (obj->bitlength > 64)
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	889b      	ldrh	r3, [r3, #4]
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	d90d      	bls.n	8008060 <COE_pdoUnpack+0x7c>
         {
            memcpy (
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	08db      	lsrs	r3, r3, #3
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	18d1      	adds	r1, r2, r3
               BITS2BYTES (obj->bitlength)
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	889b      	ldrh	r3, [r3, #4]
 8008054:	3307      	adds	r3, #7
            memcpy (
 8008056:	08db      	lsrs	r3, r3, #3
 8008058:	461a      	mov	r2, r3
 800805a:	f00b f8ca 	bl	80131f2 <memcpy>
 800805e:	e00d      	b.n	800807c <COE_pdoUnpack+0x98>
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	889b      	ldrh	r3, [r3, #4]
            uint64_t value = COE_bitsliceGet (
 8008064:	461a      	mov	r2, r3
 8008066:	69f9      	ldr	r1, [r7, #28]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7ff fbd9 	bl	8007820 <COE_bitsliceGet>
 800806e:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 8008072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008076:	6a38      	ldr	r0, [r7, #32]
 8008078:	f7ff fe4a 	bl	8007d10 <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	3301      	adds	r3, #1
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	dbc1      	blt.n	800800e <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	3728      	adds	r7, #40	; 0x28
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0801492c 	.word	0x0801492c
 8008098:	08014d50 	.word	0x08014d50
 800809c:	08014904 	.word	0x08014904

080080a0 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	80fb      	strh	r3, [r7, #6]
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fd fbb5 	bl	800581c <SDO_findobject>
 80080b2:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ba:	d101      	bne.n	80080c0 <COE_maxSub+0x20>
      return 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	e01b      	b.n	80080f8 <COE_maxSub+0x58>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 80080c0:	4a0f      	ldr	r2, [pc, #60]	; (8008100 <COE_maxSub+0x60>)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	4413      	add	r3, r2
 80080c8:	330c      	adds	r3, #12
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <COE_maxSub+0x44>
 80080d2:	4a0b      	ldr	r2, [pc, #44]	; (8008100 <COE_maxSub+0x60>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	4413      	add	r3, r2
 80080da:	330c      	adds	r3, #12
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	e007      	b.n	80080f4 <COE_maxSub+0x54>
 80080e4:	4a06      	ldr	r2, [pc, #24]	; (8008100 <COE_maxSub+0x60>)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	4413      	add	r3, r2
 80080ec:	330c      	adds	r3, #12
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 80080f6:	7afb      	ldrb	r3, [r7, #11]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	080168f4 	.word	0x080168f4

08008104 <ESC_read_csr>:

#define BIT(x)	(1U << (x))

/* ESC read CSR function */
static void ESC_read_csr (uint16_t address, void *buf, uint16_t len)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	80fb      	strh	r3, [r7, #6]
 8008110:	4613      	mov	r3, r2
 8008112:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   value = (LAN9252_ESC_CSR_CMD_READ | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 8008114:	88bb      	ldrh	r3, [r7, #4]
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	461a      	mov	r2, r3
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	4313      	orrs	r3, r2
 800811e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008122:	60fb      	str	r3, [r7, #12]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4619      	mov	r1, r3
 8008128:	f44f 7041 	mov.w	r0, #772	; 0x304
 800812c:	f7fb fa12 	bl	8003554 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 8008130:	f44f 7041 	mov.w	r0, #772	; 0x304
 8008134:	f7fb f9ce 	bl	80034d4 <lan9252_read_32>
 8008138:	4603      	mov	r3, r0
 800813a:	60fb      	str	r3, [r7, #12]
   } while (value & LAN9252_ESC_CSR_CMD_BUSY);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dbf6      	blt.n	8008130 <ESC_read_csr+0x2c>

   value = lan9252_read_32 (LAN9252_ESC_CSR_DATA_REG);
 8008142:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008146:	f7fb f9c5 	bl	80034d4 <lan9252_read_32>
 800814a:	4603      	mov	r3, r0
 800814c:	60fb      	str	r3, [r7, #12]
   memcpy(buf, (uint8_t *)&value, len);
 800814e:	88ba      	ldrh	r2, [r7, #4]
 8008150:	f107 030c 	add.w	r3, r7, #12
 8008154:	4619      	mov	r1, r3
 8008156:	6838      	ldr	r0, [r7, #0]
 8008158:	f00b f84b 	bl	80131f2 <memcpy>
}
 800815c:	bf00      	nop
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <ESC_write_csr>:

/* ESC write CSR function */
static void ESC_write_csr (uint16_t address, void *buf, uint16_t len)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	6039      	str	r1, [r7, #0]
 800816e:	80fb      	strh	r3, [r7, #6]
 8008170:	4613      	mov	r3, r2
 8008172:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   memcpy((uint8_t*)&value, buf,len);
 8008174:	88ba      	ldrh	r2, [r7, #4]
 8008176:	f107 030c 	add.w	r3, r7, #12
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	4618      	mov	r0, r3
 800817e:	f00b f838 	bl	80131f2 <memcpy>
   lan9252_write_32 (LAN9252_ESC_CSR_DATA_REG, value);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4619      	mov	r1, r3
 8008186:	f44f 7040 	mov.w	r0, #768	; 0x300
 800818a:	f7fb f9e3 	bl	8003554 <lan9252_write_32>
   value = (LAN9252_ESC_CSR_CMD_WRITE | LAN9252_ESC_CSR_CMD_SIZE(len) | address);
 800818e:	88bb      	ldrh	r3, [r7, #4]
 8008190:	041b      	lsls	r3, r3, #16
 8008192:	461a      	mov	r2, r3
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	4313      	orrs	r3, r2
 8008198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800819c:	60fb      	str	r3, [r7, #12]
   lan9252_write_32 (LAN9252_ESC_CSR_CMD_REG, value);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f44f 7041 	mov.w	r0, #772	; 0x304
 80081a6:	f7fb f9d5 	bl	8003554 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_CSR_CMD_REG);
 80081aa:	f44f 7041 	mov.w	r0, #772	; 0x304
 80081ae:	f7fb f991 	bl	80034d4 <lan9252_read_32>
 80081b2:	4603      	mov	r3, r0
 80081b4:	60fb      	str	r3, [r7, #12]
   } while(value & LAN9252_ESC_CSR_CMD_BUSY);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dbf6      	blt.n	80081aa <ESC_write_csr+0x46>
}
 80081bc:	bf00      	nop
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <ESC_read_pram>:

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b08a      	sub	sp, #40	; 0x28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	4603      	mov	r3, r0
 80081ce:	6039      	str	r1, [r7, #0]
 80081d0:	80fb      	strh	r3, [r7, #6]
 80081d2:	4613      	mov	r3, r2
 80081d4:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	61bb      	str	r3, [r7, #24]
   uint16_t quotient, remainder, byte_offset = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	847b      	strh	r3, [r7, #34]	; 0x22
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t *buffer = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 80081e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80081e6:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80081ea:	f7fb f9b3 	bl	8003554 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 80081ee:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80081f2:	f7fb f96f 	bl	80034d4 <lan9252_read_32>
 80081f6:	4603      	mov	r3, r0
 80081f8:	60bb      	str	r3, [r7, #8]
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dbf6      	blt.n	80081ee <ESC_read_pram+0x28>

   lan9252_write_32 (LAN9252_ESC_PRAM_RD_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 8008200:	88bb      	ldrh	r3, [r7, #4]
 8008202:	041a      	lsls	r2, r3, #16
 8008204:	88fb      	ldrh	r3, [r7, #6]
 8008206:	4313      	orrs	r3, r2
 8008208:	4619      	mov	r1, r3
 800820a:	f44f 7042 	mov.w	r0, #776	; 0x308
 800820e:	f7fb f9a1 	bl	8003554 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_RD_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 8008212:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008216:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800821a:	f7fb f99b 	bl	8003554 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	74fb      	strb	r3, [r7, #19]

   /* Transfer data */
   while (len > 0)
 8008228:	e0c0      	b.n	80083ac <ESC_read_pram+0x1e6>
   {
      /* Wait for read availability */
      if (byte_offset > 0)
 800822a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <ESC_read_pram+0x7e>
      {
         quotient = len/4;
 8008230:	88bb      	ldrh	r3, [r7, #4]
 8008232:	089b      	lsrs	r3, r3, #2
 8008234:	84fb      	strh	r3, [r7, #38]	; 0x26
         remainder = len - quotient*4;
 8008236:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	b29b      	uxth	r3, r3
 800823c:	88ba      	ldrh	r2, [r7, #4]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008242:	e011      	b.n	8008268 <ESC_read_pram+0xa2>
      }
      else
      {
         quotient = (len + first_byte_position)/4;
 8008244:	88ba      	ldrh	r2, [r7, #4]
 8008246:	7cfb      	ldrb	r3, [r7, #19]
 8008248:	4413      	add	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	da00      	bge.n	8008250 <ESC_read_pram+0x8a>
 800824e:	3303      	adds	r3, #3
 8008250:	109b      	asrs	r3, r3, #2
 8008252:	84fb      	strh	r3, [r7, #38]	; 0x26
         remainder = (len + first_byte_position) - quotient*4;
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	b29a      	uxth	r2, r3
 8008258:	88bb      	ldrh	r3, [r7, #4]
 800825a:	4413      	add	r3, r2
 800825c:	b29a      	uxth	r2, r3
 800825e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	b29b      	uxth	r3, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (remainder != 0)
 8008268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <ESC_read_pram+0xae>
      {
         quotient++;
 800826e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008270:	3301      	adds	r3, #1
 8008272:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      fifo_range = MIN(quotient,16);
 8008274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008276:	2b10      	cmp	r3, #16
 8008278:	bf28      	it	cs
 800827a:	2310      	movcs	r3, #16
 800827c:	b29b      	uxth	r3, r3
 800827e:	74bb      	strb	r3, [r7, #18]

      do
      {
         value = lan9252_read_32 (LAN9252_ESC_PRAM_RD_CMD_REG);
 8008280:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8008284:	f7fb f926 	bl	80034d4 <lan9252_read_32>
 8008288:	4603      	mov	r3, r0
 800828a:	60bb      	str	r3, [r7, #8]
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0f4      	beq.n	8008280 <ESC_read_pram+0xba>
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	f003 021f 	and.w	r2, r3, #31
 800829e:	7cbb      	ldrb	r3, [r7, #18]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d3ed      	bcc.n	8008280 <ESC_read_pram+0xba>

      /* Fifo size */
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	747b      	strb	r3, [r7, #17]

      /* Transfer data size */
      size = 3 + 4*fifo_size;
 80082b0:	7c7b      	ldrb	r3, [r7, #17]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	3303      	adds	r3, #3
 80082b6:	60fb      	str	r3, [r7, #12]

      /* Allocate buffer */
      buffer = (uint8_t *)pvPortMalloc(size);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f00a fc4d 	bl	8012b58 <pvPortMalloc>
 80082be:	4603      	mov	r3, r0
 80082c0:	617b      	str	r3, [r7, #20]

      /* Reset fifo count */
      fifo_cnt = fifo_size;
 80082c2:	7c7b      	ldrb	r3, [r7, #17]
 80082c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

      /* Reset buffer */
      memset(buffer,0,size);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	461a      	mov	r2, r3
 80082cc:	2100      	movs	r1, #0
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f00a ff9d 	bl	801320e <memset>

      /* Transfer batch of data */
      lan9252_read_data ((uint8_t *)buffer, LAN9252_ESC_CMD_SERIAL_READ, size);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	2103      	movs	r1, #3
 80082dc:	6978      	ldr	r0, [r7, #20]
 80082de:	f7fb f8bf 	bl	8003460 <lan9252_read_data>

      i = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
      while (fifo_cnt > 0 && len > 0)
 80082e6:	e057      	b.n	8008398 <ESC_read_pram+0x1d2>
      {
         value = buffer[i] | (buffer[i+1] << 8) | (buffer[i+2] << 16) | (buffer[i+3] << 24);
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4413      	add	r3, r2
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3301      	adds	r3, #1
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4413      	add	r3, r2
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	ea41 0203 	orr.w	r2, r1, r3
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	3302      	adds	r3, #2
 8008306:	6979      	ldr	r1, [r7, #20]
 8008308:	440b      	add	r3, r1
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	431a      	orrs	r2, r3
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	3303      	adds	r3, #3
 8008314:	6979      	ldr	r1, [r7, #20]
 8008316:	440b      	add	r3, r1
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	061b      	lsls	r3, r3, #24
 800831c:	4313      	orrs	r3, r2
 800831e:	60bb      	str	r3, [r7, #8]

         if (byte_offset > 0)
 8008320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008322:	2b00      	cmp	r3, #0
 8008324:	d011      	beq.n	800834a <ESC_read_pram+0x184>
         {
            temp_len = (len > 4) ? 4: len;
 8008326:	88bb      	ldrh	r3, [r7, #4]
 8008328:	2b04      	cmp	r3, #4
 800832a:	bf28      	it	cs
 800832c:	2304      	movcs	r3, #4
 800832e:	b29b      	uxth	r3, r3
 8008330:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(temp_buf + byte_offset ,&value, temp_len);
 8008334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4413      	add	r3, r2
 800833a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800833e:	f107 0108 	add.w	r1, r7, #8
 8008342:	4618      	mov	r0, r3
 8008344:	f00a ff55 	bl	80131f2 <memcpy>
 8008348:	e012      	b.n	8008370 <ESC_read_pram+0x1aa>
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 800834a:	88ba      	ldrh	r2, [r7, #4]
 800834c:	7cfb      	ldrb	r3, [r7, #19]
 800834e:	f1c3 0304 	rsb	r3, r3, #4
 8008352:	4293      	cmp	r3, r2
 8008354:	bfa8      	it	ge
 8008356:	4613      	movge	r3, r2
 8008358:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 800835c:	7cfb      	ldrb	r3, [r7, #19]
 800835e:	f107 0208 	add.w	r2, r7, #8
 8008362:	4413      	add	r3, r2
 8008364:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008368:	4619      	mov	r1, r3
 800836a:	69b8      	ldr	r0, [r7, #24]
 800836c:	f00a ff41 	bl	80131f2 <memcpy>
         }

         i += 4;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3304      	adds	r3, #4
 8008374:	61fb      	str	r3, [r7, #28]
         fifo_cnt--;
 8008376:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800837a:	3b01      	subs	r3, #1
 800837c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
         len -= temp_len;
 8008380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008384:	b29b      	uxth	r3, r3
 8008386:	88ba      	ldrh	r2, [r7, #4]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	80bb      	strh	r3, [r7, #4]
         byte_offset += temp_len;
 800838c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008390:	b29a      	uxth	r2, r3
 8008392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008394:	4413      	add	r3, r2
 8008396:	847b      	strh	r3, [r7, #34]	; 0x22
      while (fifo_cnt > 0 && len > 0)
 8008398:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <ESC_read_pram+0x1e0>
 80083a0:	88bb      	ldrh	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1a0      	bne.n	80082e8 <ESC_read_pram+0x122>
      }

      vPortFree(buffer);
 80083a6:	6978      	ldr	r0, [r7, #20]
 80083a8:	f00a fca2 	bl	8012cf0 <vPortFree>
   while (len > 0)
 80083ac:	88bb      	ldrh	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f47f af3b 	bne.w	800822a <ESC_read_pram+0x64>
   }
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	3728      	adds	r7, #40	; 0x28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b08a      	sub	sp, #40	; 0x28
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	4603      	mov	r3, r0
 80083c6:	6039      	str	r1, [r7, #0]
 80083c8:	80fb      	strh	r3, [r7, #6]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	61bb      	str	r3, [r7, #24]
   uint16_t quotient, remainder, byte_offset = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	847b      	strh	r3, [r7, #34]	; 0x22
   uint8_t fifo_cnt, fifo_size, fifo_range, first_byte_position, temp_len;
   uint8_t *buffer = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	617b      	str	r3, [r7, #20]
   int i, size;

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_ABORT);
 80083da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80083de:	f44f 7045 	mov.w	r0, #788	; 0x314
 80083e2:	f7fb f8b7 	bl	8003554 <lan9252_write_32>

   do
   {
      value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 80083e6:	f44f 7045 	mov.w	r0, #788	; 0x314
 80083ea:	f7fb f873 	bl	80034d4 <lan9252_read_32>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60bb      	str	r3, [r7, #8]
   } while(value & LAN9252_ESC_PRAM_CMD_BUSY);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dbf6      	blt.n	80083e6 <ESC_write_pram+0x28>

   lan9252_write_32 (LAN9252_ESC_PRAM_WR_ADDR_LEN_REG, (LAN9252_ESC_PRAM_SIZE(len) | LAN9252_ESC_PRAM_ADDR(address)));
 80083f8:	88bb      	ldrh	r3, [r7, #4]
 80083fa:	041a      	lsls	r2, r3, #16
 80083fc:	88fb      	ldrh	r3, [r7, #6]
 80083fe:	4313      	orrs	r3, r2
 8008400:	4619      	mov	r1, r3
 8008402:	f44f 7044 	mov.w	r0, #784	; 0x310
 8008406:	f7fb f8a5 	bl	8003554 <lan9252_write_32>
   lan9252_write_32 (LAN9252_ESC_PRAM_WR_CMD_REG, LAN9252_ESC_PRAM_CMD_BUSY);
 800840a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800840e:	f44f 7045 	mov.w	r0, #788	; 0x314
 8008412:	f7fb f89f 	bl	8003554 <lan9252_write_32>

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 8008416:	88fb      	ldrh	r3, [r7, #6]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0303 	and.w	r3, r3, #3
 800841e:	74fb      	strb	r3, [r7, #19]

   /* Transfer data */
   while (len > 0)
 8008420:	e0c4      	b.n	80085ac <ESC_write_pram+0x1ee>
   {
      /* Wait for write availabiliy */
      if (byte_offset > 0)
 8008422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <ESC_write_pram+0x7e>
      {
         quotient = len/4;
 8008428:	88bb      	ldrh	r3, [r7, #4]
 800842a:	089b      	lsrs	r3, r3, #2
 800842c:	84fb      	strh	r3, [r7, #38]	; 0x26
         remainder = len - quotient*4;
 800842e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	b29b      	uxth	r3, r3
 8008434:	88ba      	ldrh	r2, [r7, #4]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	84bb      	strh	r3, [r7, #36]	; 0x24
 800843a:	e011      	b.n	8008460 <ESC_write_pram+0xa2>
      }
      else
      {
         quotient = (len + first_byte_position)/4;
 800843c:	88ba      	ldrh	r2, [r7, #4]
 800843e:	7cfb      	ldrb	r3, [r7, #19]
 8008440:	4413      	add	r3, r2
 8008442:	2b00      	cmp	r3, #0
 8008444:	da00      	bge.n	8008448 <ESC_write_pram+0x8a>
 8008446:	3303      	adds	r3, #3
 8008448:	109b      	asrs	r3, r3, #2
 800844a:	84fb      	strh	r3, [r7, #38]	; 0x26
         remainder = (len + first_byte_position) - quotient*4;
 800844c:	7cfb      	ldrb	r3, [r7, #19]
 800844e:	b29a      	uxth	r2, r3
 8008450:	88bb      	ldrh	r3, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	b29b      	uxth	r3, r3
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }
      if (remainder != 0)
 8008460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <ESC_write_pram+0xae>
      {
         quotient++;
 8008466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008468:	3301      	adds	r3, #1
 800846a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
      fifo_range = MIN(quotient,16);
 800846c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800846e:	2b10      	cmp	r3, #16
 8008470:	bf28      	it	cs
 8008472:	2310      	movcs	r3, #16
 8008474:	b29b      	uxth	r3, r3
 8008476:	74bb      	strb	r3, [r7, #18]
      do
      {
         value = lan9252_read_32 (LAN9252_ESC_PRAM_WR_CMD_REG);
 8008478:	f44f 7045 	mov.w	r0, #788	; 0x314
 800847c:	f7fb f82a 	bl	80034d4 <lan9252_read_32>
 8008480:	4603      	mov	r3, r0
 8008482:	60bb      	str	r3, [r7, #8]
      }while(!(value & LAN9252_ESC_PRAM_CMD_AVAIL) || (LAN9252_ESC_PRAM_CMD_CNT(value) < fifo_range));
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0f4      	beq.n	8008478 <ESC_write_pram+0xba>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	f003 021f 	and.w	r2, r3, #31
 8008496:	7cbb      	ldrb	r3, [r7, #18]
 8008498:	429a      	cmp	r2, r3
 800849a:	d3ed      	bcc.n	8008478 <ESC_write_pram+0xba>

      /* Fifo size */
      fifo_size = LAN9252_ESC_PRAM_CMD_CNT(value);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 031f 	and.w	r3, r3, #31
 80084a6:	747b      	strb	r3, [r7, #17]

      /* Transfer data size */
      size = 3+4*fifo_size;
 80084a8:	7c7b      	ldrb	r3, [r7, #17]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	3303      	adds	r3, #3
 80084ae:	60fb      	str	r3, [r7, #12]

      /* Allocate buffer */
      buffer = (uint8_t *)pvPortMalloc(size);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f00a fb51 	bl	8012b58 <pvPortMalloc>
 80084b6:	4603      	mov	r3, r0
 80084b8:	617b      	str	r3, [r7, #20]

      /* Reset fifo count */
      fifo_cnt = fifo_size;
 80084ba:	7c7b      	ldrb	r3, [r7, #17]
 80084bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

      /* Reset buffer */
      memset(buffer,0,size);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	461a      	mov	r2, r3
 80084c4:	2100      	movs	r1, #0
 80084c6:	6978      	ldr	r0, [r7, #20]
 80084c8:	f00a fea1 	bl	801320e <memset>

      i = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61fb      	str	r3, [r7, #28]
      while (fifo_cnt > 0 && len > 0)
 80084d0:	e05b      	b.n	800858a <ESC_write_pram+0x1cc>
      {
         value = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	60bb      	str	r3, [r7, #8]
         if (byte_offset > 0)
 80084d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d011      	beq.n	8008500 <ESC_write_pram+0x142>
         {
            temp_len = (len > 4) ? 4: len;
 80084dc:	88bb      	ldrh	r3, [r7, #4]
 80084de:	2b04      	cmp	r3, #4
 80084e0:	bf28      	it	cs
 80084e2:	2304      	movcs	r3, #4
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(&value, (temp_buf + byte_offset), temp_len);
 80084ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	18d1      	adds	r1, r2, r3
 80084f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	4618      	mov	r0, r3
 80084fa:	f00a fe7a 	bl	80131f2 <memcpy>
 80084fe:	e012      	b.n	8008526 <ESC_write_pram+0x168>
         }
         else
         {
            temp_len = (len > (4 - first_byte_position)) ? (4 - first_byte_position) : len;
 8008500:	88ba      	ldrh	r2, [r7, #4]
 8008502:	7cfb      	ldrb	r3, [r7, #19]
 8008504:	f1c3 0304 	rsb	r3, r3, #4
 8008508:	4293      	cmp	r3, r2
 800850a:	bfa8      	it	ge
 800850c:	4613      	movge	r3, r2
 800850e:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 8008512:	7cfb      	ldrb	r3, [r7, #19]
 8008514:	f107 0208 	add.w	r2, r7, #8
 8008518:	4413      	add	r3, r2
 800851a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800851e:	69b9      	ldr	r1, [r7, #24]
 8008520:	4618      	mov	r0, r3
 8008522:	f00a fe66 	bl	80131f2 <memcpy>
         }

         buffer[i] = (value & 0xFF);
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4413      	add	r3, r2
 800852e:	b2ca      	uxtb	r2, r1
 8008530:	701a      	strb	r2, [r3, #0]
         buffer[i+1] = ((value >> 8) & 0xFF);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	0a19      	lsrs	r1, r3, #8
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	3301      	adds	r3, #1
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4413      	add	r3, r2
 800853e:	b2ca      	uxtb	r2, r1
 8008540:	701a      	strb	r2, [r3, #0]
         buffer[i+2] = ((value >> 16) & 0xFF);
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	0c19      	lsrs	r1, r3, #16
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3302      	adds	r3, #2
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4413      	add	r3, r2
 800854e:	b2ca      	uxtb	r2, r1
 8008550:	701a      	strb	r2, [r3, #0]
         buffer[i+3] = ((value >> 24) & 0xFF);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	0e19      	lsrs	r1, r3, #24
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3303      	adds	r3, #3
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4413      	add	r3, r2
 800855e:	b2ca      	uxtb	r2, r1
 8008560:	701a      	strb	r2, [r3, #0]

         i += 4;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	3304      	adds	r3, #4
 8008566:	61fb      	str	r3, [r7, #28]
         fifo_cnt--;
 8008568:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800856c:	3b01      	subs	r3, #1
 800856e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
         len -= temp_len;
 8008572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008576:	b29b      	uxth	r3, r3
 8008578:	88ba      	ldrh	r2, [r7, #4]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	80bb      	strh	r3, [r7, #4]
         byte_offset += temp_len;
 800857e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008582:	b29a      	uxth	r2, r3
 8008584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008586:	4413      	add	r3, r2
 8008588:	847b      	strh	r3, [r7, #34]	; 0x22
      while (fifo_cnt > 0 && len > 0)
 800858a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <ESC_write_pram+0x1da>
 8008592:	88bb      	ldrh	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d19c      	bne.n	80084d2 <ESC_write_pram+0x114>
      }

      /* Transfer batch of data */
      lan9252_write_data ((uint8_t *)buffer, LAN9252_ESC_PRAM_WR_FIFO_REG, size);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	2120      	movs	r1, #32
 80085a0:	6978      	ldr	r0, [r7, #20]
 80085a2:	f7fa ffb7 	bl	8003514 <lan9252_write_data>

      vPortFree(buffer);
 80085a6:	6978      	ldr	r0, [r7, #20]
 80085a8:	f00a fba2 	bl	8012cf0 <vPortFree>
   while (len > 0)
 80085ac:	88bb      	ldrh	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f47f af37 	bne.w	8008422 <ESC_write_pram+0x64>
   }
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	3728      	adds	r7, #40	; 0x28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	80fb      	strh	r3, [r7, #6]
 80085cc:	4613      	mov	r3, r2
 80085ce:	80bb      	strh	r3, [r7, #4]
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d6:	d306      	bcc.n	80085e6 <ESC_read+0x26>
   {
      ESC_read_pram (address, buf, len);
 80085d8:	88ba      	ldrh	r2, [r7, #4]
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fdf1 	bl	80081c6 <ESC_read_pram>
 80085e4:	e038      	b.n	8008658 <ESC_read+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 80085ea:	e032      	b.n	8008652 <ESC_read+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 80085ec:	88bb      	ldrh	r3, [r7, #4]
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	bf28      	it	cs
 80085f2:	2304      	movcs	r3, #4
 80085f4:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <ESC_read+0x46>
         {
            size = 1;
 8008600:	2301      	movs	r3, #1
 8008602:	81fb      	strh	r3, [r7, #14]
 8008604:	e013      	b.n	800862e <ESC_read+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <ESC_read+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 8008610:	89fb      	ldrh	r3, [r7, #14]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <ESC_read+0x5e>
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <ESC_read+0x60>
 800861e:	2302      	movs	r3, #2
 8008620:	81fb      	strh	r3, [r7, #14]
 8008622:	e004      	b.n	800862e <ESC_read+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 8008624:	89fb      	ldrh	r3, [r7, #14]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d101      	bne.n	800862e <ESC_read+0x6e>
         {
            size = 1;
 800862a:	2301      	movs	r3, #1
 800862c:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_read_csr(address, temp_buf, size);
 800862e:	89fa      	ldrh	r2, [r7, #14]
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	68b9      	ldr	r1, [r7, #8]
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff fd65 	bl	8008104 <ESC_read_csr>

         /* next address */
         len -= size;
 800863a:	88ba      	ldrh	r2, [r7, #4]
 800863c:	89fb      	ldrh	r3, [r7, #14]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 8008642:	89fb      	ldrh	r3, [r7, #14]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	4413      	add	r3, r2
 8008648:	60bb      	str	r3, [r7, #8]
         address += size;
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	89fb      	ldrh	r3, [r7, #14]
 800864e:	4413      	add	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 8008652:	88bb      	ldrh	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1c9      	bne.n	80085ec <ESC_read+0x2c>
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 8008658:	2204      	movs	r2, #4
 800865a:	4908      	ldr	r1, [pc, #32]	; (800867c <ESC_read+0xbc>)
 800865c:	f44f 7008 	mov.w	r0, #544	; 0x220
 8008660:	f7ff fd50 	bl	8008104 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 8008664:	4b06      	ldr	r3, [pc, #24]	; (8008680 <ESC_read+0xc0>)
 8008666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800866a:	b29b      	uxth	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	4b04      	ldr	r3, [pc, #16]	; (8008680 <ESC_read+0xc0>)
 8008670:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20001630 	.word	0x20001630
 8008680:	2000154c 	.word	0x2000154c

08008684 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	80fb      	strh	r3, [r7, #6]
 8008690:	4613      	mov	r3, r2
 8008692:	80bb      	strh	r3, [r7, #4]
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869a:	d306      	bcc.n	80086aa <ESC_write+0x26>
   {
      ESC_write_pram(address, buf, len);
 800869c:	88ba      	ldrh	r2, [r7, #4]
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fe8b 	bl	80083be <ESC_write_pram>
 80086a8:	e038      	b.n	800871c <ESC_write+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 80086ae:	e032      	b.n	8008716 <ESC_write+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 80086b0:	88bb      	ldrh	r3, [r7, #4]
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	bf28      	it	cs
 80086b6:	2304      	movcs	r3, #4
 80086b8:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size  and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <ESC_write+0x46>
         {
            size = 1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	81fb      	strh	r3, [r7, #14]
 80086c8:	e013      	b.n	80086f2 <ESC_write+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d009      	beq.n	80086e8 <ESC_write+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 80086d4:	89fb      	ldrh	r3, [r7, #14]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <ESC_write+0x5e>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <ESC_write+0x60>
 80086e2:	2302      	movs	r3, #2
 80086e4:	81fb      	strh	r3, [r7, #14]
 80086e6:	e004      	b.n	80086f2 <ESC_write+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 80086e8:	89fb      	ldrh	r3, [r7, #14]
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d101      	bne.n	80086f2 <ESC_write+0x6e>
         {
            size = 1;
 80086ee:	2301      	movs	r3, #1
 80086f0:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_write_csr(address, temp_buf, size);
 80086f2:	89fa      	ldrh	r2, [r7, #14]
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff fd33 	bl	8008164 <ESC_write_csr>

         /* next address */
         len -= size;
 80086fe:	88ba      	ldrh	r2, [r7, #4]
 8008700:	89fb      	ldrh	r3, [r7, #14]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 8008706:	89fb      	ldrh	r3, [r7, #14]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4413      	add	r3, r2
 800870c:	60bb      	str	r3, [r7, #8]
         address += size;
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	89fb      	ldrh	r3, [r7, #14]
 8008712:	4413      	add	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 8008716:	88bb      	ldrh	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1c9      	bne.n	80086b0 <ESC_write+0x2c>
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 800871c:	2204      	movs	r2, #4
 800871e:	4908      	ldr	r1, [pc, #32]	; (8008740 <ESC_write+0xbc>)
 8008720:	f44f 7008 	mov.w	r0, #544	; 0x220
 8008724:	f7ff fcee 	bl	8008104 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <ESC_write+0xc0>)
 800872a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800872e:	b29b      	uxth	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <ESC_write+0xc0>)
 8008734:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20001630 	.word	0x20001630
 8008744:	2000154c 	.word	0x2000154c

08008748 <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
   uint32_t value;
   uint32_t counter = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
   uint32_t timeout = 1000; // wait 100msec
 8008754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008758:	613b      	str	r3, [r7, #16]

   /* Initialize the Lan9252 driver. */
   lan9252_Init();
 800875a:	f7fa fe77 	bl	800344c <lan9252_Init>

   // start initialization
   // Reset the ecat core here due to evb-lan9252-digio not having any GPIO for that purpose.
   lan9252_write_32(LAN9252_ESC_CMD_RESET_CTL, LAN9252_ESC_RESET_CTRL_RST);
 800875e:	2141      	movs	r1, #65	; 0x41
 8008760:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 8008764:	f7fa fef6 	bl	8003554 <lan9252_write_32>

   // Wait until reset command has been executed
   do
   {
      osDelay(100);
 8008768:	2064      	movs	r0, #100	; 0x64
 800876a:	f007 fdcb 	bl	8010304 <osDelay>
      counter++;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	3301      	adds	r3, #1
 8008772:	617b      	str	r3, [r7, #20]
      value = lan9252_read_32(LAN9252_ESC_CMD_RESET_CTL);
 8008774:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 8008778:	f7fa feac 	bl	80034d4 <lan9252_read_32>
 800877c:	60f8      	str	r0, [r7, #12]
   } while ((value & LAN9252_ESC_RESET_CTRL_RST) && (counter < timeout));
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <ESC_init+0x48>
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	429a      	cmp	r2, r3
 800878e:	d3eb      	bcc.n	8008768 <ESC_init+0x20>

   // Perform byte test
   do
   {
      osDelay(100);
 8008790:	2064      	movs	r0, #100	; 0x64
 8008792:	f007 fdb7 	bl	8010304 <osDelay>
      counter++;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	3301      	adds	r3, #1
 800879a:	617b      	str	r3, [r7, #20]
      value = lan9252_read_32(LAN9252_ESC_CMD_BYTE_TEST);
 800879c:	2064      	movs	r0, #100	; 0x64
 800879e:	f7fa fe99 	bl	80034d4 <lan9252_read_32>
 80087a2:	60f8      	str	r0, [r7, #12]
   } while ((value != LAN9252_ESC_BYTE_TEST_OK) && (counter < timeout));
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4a16      	ldr	r2, [pc, #88]	; (8008800 <ESC_init+0xb8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d003      	beq.n	80087b4 <ESC_init+0x6c>
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d3ed      	bcc.n	8008790 <ESC_init+0x48>

   // Check hardware is ready
   do
   {
      osDelay(100);
 80087b4:	2064      	movs	r0, #100	; 0x64
 80087b6:	f007 fda5 	bl	8010304 <osDelay>
      counter++;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	3301      	adds	r3, #1
 80087be:	617b      	str	r3, [r7, #20]
      value = lan9252_read_32(LAN9252_ESC_CMD_HW_CFG);
 80087c0:	2074      	movs	r0, #116	; 0x74
 80087c2:	f7fa fe87 	bl	80034d4 <lan9252_read_32>
 80087c6:	60f8      	str	r0, [r7, #12]
   } while (!(value & LAN9252_ESC_HW_CFG_READY) && (counter < timeout));
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <ESC_init+0x92>
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d3ec      	bcc.n	80087b4 <ESC_init+0x6c>

   // Check if timeout occured
   if (counter < timeout)
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d209      	bcs.n	80087f6 <ESC_init+0xae>
   {
      // Read the chip identification and revision
      value = lan9252_read_32(LAN9252_ESC_CMD_ID_REV);
 80087e2:	2050      	movs	r0, #80	; 0x50
 80087e4:	f7fa fe76 	bl	80034d4 <lan9252_read_32>
 80087e8:	60f8      	str	r0, [r7, #12]
      DPRINT("Detected chip %x Rev %u \n", ((value >> 16) & 0xFFFF), (value & 0xFFFF));

      // Set AL event mask
      value = (ESCREG_ALEVENT_CONTROL |
 80087ea:	f240 3311 	movw	r3, #785	; 0x311
 80087ee:	60fb      	str	r3, [r7, #12]
               ESCREG_ALEVENT_SMCHANGE |
               ESCREG_ALEVENT_SM0 |
               ESCREG_ALEVENT_SM1);
      ESC_ALeventmaskwrite(value);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7fb fd3b 	bl	800426c <ESC_ALeventmaskwrite>
   }
   else
   {
      DPRINT("Timeout occurred during reset \n");
   }
}
 80087f6:	bf00      	nop
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	87654321 	.word	0x87654321

08008804 <SpiDma_Init>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

bool SpiDma_Init (tSpiDmaModule * const me)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
   bool ret = true;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]

   /* Create the spiDma event group. */
   spiDma_event = xEventGroupCreate();
 8008810:	f007 fd8c 	bl	801032c <xEventGroupCreate>
 8008814:	4603      	mov	r3, r0
 8008816:	4a0e      	ldr	r2, [pc, #56]	; (8008850 <SpiDma_Init+0x4c>)
 8008818:	6013      	str	r3, [r2, #0]

   /* Was the event group created successfully? */
   if (NULL == spiDma_event) {
 800881a:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <SpiDma_Init+0x4c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <SpiDma_Init+0x22>
      ret = false;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
   }

   /* Clear the buffer. */
   bzero (SPIDMA_Rx_Buffer, SPIDMA_RX_SIZE);
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <SpiDma_Init+0x50>)
 8008828:	4618      	mov	r0, r3
 800882a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882e:	461a      	mov	r2, r3
 8008830:	2100      	movs	r1, #0
 8008832:	f00a fcec 	bl	801320e <memset>
   bzero (SPIDMA_Tx_Buffer, SPIDMA_TX_SIZE);
 8008836:	4b08      	ldr	r3, [pc, #32]	; (8008858 <SpiDma_Init+0x54>)
 8008838:	4618      	mov	r0, r3
 800883a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800883e:	461a      	mov	r2, r3
 8008840:	2100      	movs	r1, #0
 8008842:	f00a fce4 	bl	801320e <memset>

   return ret;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20002040 	.word	0x20002040
 8008854:	20007f88 	.word	0x20007f88
 8008858:	20007e88 	.word	0x20007e88

0800885c <SpiDma_CsPinChangeState>:
{
   return ((me->states != SPIDMA_IDLE) ? true : false);
}

void SpiDma_CsPinChangeState (tSpiDmaModule * const me, bool state)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
   GPIO_PinState pinSt = GPIO_PIN_RESET;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]

   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <SpiDma_CsPinChangeState+0x1c>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	e006      	b.n	8008886 <SpiDma_CsPinChangeState+0x2a>
      ((GPIO_PIN_RESET == me->config.csActiveLevel) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
   pinSt = (true == state) ? (me->config.csActiveLevel) : 
 8008886:	73fb      	strb	r3, [r7, #15]
   
   HAL_GPIO_WritePin (me->config.csPort, me->config.csPin, pinSt);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6858      	ldr	r0, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	891b      	ldrh	r3, [r3, #8]
 8008890:	7bfa      	ldrb	r2, [r7, #15]
 8008892:	4619      	mov	r1, r3
 8008894:	f002 fff4 	bl	800b880 <HAL_GPIO_WritePin>
}
 8008898:	bf00      	nop
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <SpiDma_write>:

bool SpiDma_write (tSpiDmaModule * const me, uint8_t * data_ptr, uint16_t len)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
   bool ret = true;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
   EventBits_t bits = (EventBits_t)0U; 
 80088b2:	2300      	movs	r3, #0
 80088b4:	613b      	str	r3, [r7, #16]

   /* Verify the parameters input. */
   if (NULL == me)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <SpiDma_write+0x22>
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
 80088bc:	2300      	movs	r3, #0
 80088be:	75fb      	strb	r3, [r7, #23]
 80088c0:	e00a      	b.n	80088d8 <SpiDma_write+0x38>
   }
   else if (NULL == data_ptr)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d102      	bne.n	80088ce <SpiDma_write+0x2e>
   {
      /* Pointer to data array is NULL. */
      ret = false;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75fb      	strb	r3, [r7, #23]
 80088cc:	e004      	b.n	80088d8 <SpiDma_write+0x38>
   }
   else if (0 >= len)
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <SpiDma_write+0x38>
   {
      /* The length of data input is equal 0. */
      ret = false;
 80088d4:	2300      	movs	r3, #0
 80088d6:	75fb      	strb	r3, [r7, #23]
   }

   /* If the params input are valid, send data to DMA to transfer this to slave.*/
   if (ret)
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d023      	beq.n	8008926 <SpiDma_write+0x86>
   {
      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_ptr, len);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f00a fc83 	bl	80131f2 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_Transmit_DMA (me->spiModule, me->ptrTxArr, len);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6958      	ldr	r0, [r3, #20]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	4619      	mov	r1, r3
 80088f8:	f005 f98e 	bl	800dc18 <HAL_SPI_Transmit_DMA>

      /* Change state into TX when the Spi  */
      me->states = SPIDMA_TX;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	741a      	strb	r2, [r3, #16]

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_TX_DONE, pdTRUE, pdFALSE, (me->timeOut/portTICK_PERIOD_MS));
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <SpiDma_write+0x90>)
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8c1b      	ldrh	r3, [r3, #32]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	2201      	movs	r2, #1
 8008910:	2101      	movs	r1, #1
 8008912:	f007 fd23 	bl	801035c <xEventGroupWaitBits>
 8008916:	6138      	str	r0, [r7, #16]

      /* Update new state. */

      if (SPIDMA_TX_DONE != (bits & SPIDMA_TX_DONE))
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <SpiDma_write+0x86>
      {
         ret = false;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
      }
   }

   /* Return state. */
   return ret;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20002040 	.word	0x20002040

08008934 <SpiDma_read>:

bool SpiDma_read (tSpiDmaModule * const me, uint8_t * data_rx_ptr, uint8_t * data_tx_dummy, uint16_t len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af02      	add	r7, sp, #8
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	807b      	strh	r3, [r7, #2]
   bool ret = true;
 8008942:	2301      	movs	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]
   EventBits_t bits = (EventBits_t)0U; 
 8008946:	2300      	movs	r3, #0
 8008948:	613b      	str	r3, [r7, #16]

   /* Verify the parameters input. */
   if (NULL == me)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <SpiDma_read+0x22>
   {
      /* Pointer to the module SpiDma is NULL. */
      ret = false;
 8008950:	2300      	movs	r3, #0
 8008952:	75fb      	strb	r3, [r7, #23]
 8008954:	e00d      	b.n	8008972 <SpiDma_read+0x3e>
   }
   else if ((NULL == data_rx_ptr) || (NULL == data_tx_dummy))
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <SpiDma_read+0x2e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <SpiDma_read+0x34>
   {
      /* Pointer to data array is NULL. */
      ret = false;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]
 8008966:	e004      	b.n	8008972 <SpiDma_read+0x3e>
   }
   else if (0 >= len)
 8008968:	887b      	ldrh	r3, [r7, #2]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <SpiDma_read+0x3e>
   {
      /* The length of data input is equal 0. */
      ret = false;
 800896e:	2300      	movs	r3, #0
 8008970:	75fb      	strb	r3, [r7, #23]
   }
   
   /* If the params input are valid, send data to DMA to transfer dummy to read data from slave.*/
   if (ret)
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02b      	beq.n	80089d0 <SpiDma_read+0x9c>
   {
      /* Copy the data to TX buffer. */
      memcpy (me->ptrTxArr, data_tx_dummy, len);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	887a      	ldrh	r2, [r7, #2]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4618      	mov	r0, r3
 8008982:	f00a fc36 	bl	80131f2 <memcpy>

      /* Start transmit data via DMA. */
      HAL_SPI_TransmitReceive_DMA (me->spiModule, me->ptrTxArr, me->ptrRxArr, len);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6958      	ldr	r0, [r3, #20]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6999      	ldr	r1, [r3, #24]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	887b      	ldrh	r3, [r7, #2]
 8008994:	f005 fa4c 	bl	800de30 <HAL_SPI_TransmitReceive_DMA>

      /* Change state into TX. */
      me->states = SPIDMA_RX;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2202      	movs	r2, #2
 800899c:	741a      	strb	r2, [r3, #16]

      /* Blocking the currently executing task until SPI transmit data is finished. */
      bits = xEventGroupWaitBits (spiDma_event, SPIDMA_RX_DONE, pdTRUE, pdFALSE, (me->timeOut/portTICK_PERIOD_MS));
 800899e:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <SpiDma_read+0xa8>)
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8c1b      	ldrh	r3, [r3, #32]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2300      	movs	r3, #0
 80089aa:	2201      	movs	r2, #1
 80089ac:	2102      	movs	r1, #2
 80089ae:	f007 fcd5 	bl	801035c <xEventGroupWaitBits>
 80089b2:	6138      	str	r0, [r7, #16]

      /* Update new state. */
      if (SPIDMA_RX_DONE != (bits & SPIDMA_RX_DONE))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <SpiDma_read+0x8e>
      {
         ret = false;
 80089be:	2300      	movs	r3, #0
 80089c0:	75fb      	strb	r3, [r7, #23]
      }

      /* Copy data to data array return. */
      memcpy (data_rx_ptr, me->ptrRxArr, len);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	887a      	ldrh	r2, [r7, #2]
 80089c8:	4619      	mov	r1, r3
 80089ca:	68b8      	ldr	r0, [r7, #8]
 80089cc:	f00a fc11 	bl	80131f2 <memcpy>
   }

   /* Return state. */
   return ret;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20002040 	.word	0x20002040

080089e0 <SpiDma_WriteCompleteIrq>:


void SpiDma_WriteCompleteIrq (tSpiDmaModule * const me)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]

   /* Write data complete, change the state of this module to TxEnd. */
   me->states = SPIDMA_IDLE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	741a      	strb	r2, [r3, #16]

   /* Set bit to inform the TX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_TX_DONE, &xHigherPriorityTaskWoken);
 80089f2:	4b06      	ldr	r3, [pc, #24]	; (8008a0c <SpiDma_WriteCompleteIrq+0x2c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f107 020c 	add.w	r2, r7, #12
 80089fa:	2101      	movs	r1, #1
 80089fc:	4618      	mov	r0, r3
 80089fe:	f007 fe35 	bl	801066c <xEventGroupSetBitsFromISR>
}  
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20002040 	.word	0x20002040

08008a10 <SpiDma_ReadCompleteIrq>:

void SpiDma_ReadCompleteIrq (tSpiDmaModule * const me)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
   /* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

   /* Read data complete, change the state of this module to RxEnd. */
   me->states = SPIDMA_IDLE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	741a      	strb	r2, [r3, #16]

   /* Set bit to inform the RX is finish. */
   xEventGroupSetBitsFromISR (spiDma_event, SPIDMA_RX_DONE, &xHigherPriorityTaskWoken);
 8008a22:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <SpiDma_ReadCompleteIrq+0x2c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f107 020c 	add.w	r2, r7, #12
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f007 fe1d 	bl	801066c <xEventGroupSetBitsFromISR>
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20002040 	.word	0x20002040

08008a40 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
   SpiDma_WriteCompleteIrq (&spiDmaModule);
 8008a48:	4803      	ldr	r0, [pc, #12]	; (8008a58 <HAL_SPI_TxCpltCallback+0x18>)
 8008a4a:	f7ff ffc9 	bl	80089e0 <SpiDma_WriteCompleteIrq>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000a9c 	.word	0x20000a9c

08008a5c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
   SpiDma_ReadCompleteIrq (&spiDmaModule);
 8008a64:	4803      	ldr	r0, [pc, #12]	; (8008a74 <HAL_SPI_TxRxCpltCallback+0x18>)
 8008a66:	f7ff ffd3 	bl	8008a10 <SpiDma_ReadCompleteIrq>
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000a9c 	.word	0x20000a9c

08008a78 <cb_get_inputs>:
/*---------------------------------------------------------------------------------------------------------------------
 *                                            FUNCTION DEFINATIONS
 *-------------------------------------------------------------------------------------------------------------------*/

void cb_get_inputs (void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0

}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <cb_set_outputs>:

void cb_set_outputs (void)
{
 8008a86:	b480      	push	{r7}
 8008a88:	af00      	add	r7, sp, #0

}
 8008a8a:	bf00      	nop
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <ethCat_object_download_hook>:

uint32_t ethCat_object_download_hook ( uint16_t index,
                                       uint8_t subindex,
                                       uint16_t flags)
{
 8008a94:	b5b0      	push	{r4, r5, r7, lr}
 8008a96:	b08a      	sub	sp, #40	; 0x28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	80fb      	strh	r3, [r7, #6]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	717b      	strb	r3, [r7, #5]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	807b      	strh	r3, [r7, #2]
   uint8_t md80id = Obj.md80_Command[0];
 8008aa6:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <ethCat_object_download_hook+0x88>)
 8008aa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint8_t cmd = Obj.md80_Command[1];
 8008ab0:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <ethCat_object_download_hook+0x88>)
 8008ab2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8008ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   uint8_t length = Obj.md80_Command[2];
 8008aba:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <ethCat_object_download_hook+0x88>)
 8008abc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8008ac0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   uint8_t dataCmd[24U] = {0u};
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	f107 0310 	add.w	r3, r7, #16
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	609a      	str	r2, [r3, #8]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	611a      	str	r2, [r3, #16]

   /* Copy command data.*/
   memcpy (dataCmd, (uint8_t *)&Obj.md80_Command[3], sizeof(dataCmd));
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <ethCat_object_download_hook+0x88>)
 8008ada:	f107 040c 	add.w	r4, r7, #12
 8008ade:	f103 0577 	add.w	r5, r3, #119	; 0x77
 8008ae2:	6828      	ldr	r0, [r5, #0]
 8008ae4:	6869      	ldr	r1, [r5, #4]
 8008ae6:	68aa      	ldr	r2, [r5, #8]
 8008ae8:	68eb      	ldr	r3, [r5, #12]
 8008aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aec:	6928      	ldr	r0, [r5, #16]
 8008aee:	6969      	ldr	r1, [r5, #20]
 8008af0:	c403      	stmia	r4!, {r0, r1}
   
   /* Determine if Host send new command to md80s. */
   if (ETHCAT_MD80_COMMAND == index)
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	f242 0202 	movw	r2, #8194	; 0x2002
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d109      	bne.n	8008b10 <ethCat_object_download_hook+0x7c>
   {
      App_Md80_UpdateCmd (md80id, cmd, length, dataCmd);
 8008afc:	f107 030c 	add.w	r3, r7, #12
 8008b00:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008b04:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008b08:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8008b0c:	f7f8 fb7e 	bl	800120c <App_Md80_UpdateCmd>
   else 
   {
      /* Another command. */
   }

   return (0);
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3728      	adds	r7, #40	; 0x28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bdb0      	pop	{r4, r5, r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20002044 	.word	0x20002044

08008b20 <ethCat_check_dc_handler>:

uint16_t ethCat_check_dc_handler (void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
   uint16_t ret = 0u;
 8008b26:	2300      	movs	r3, #0
 8008b28:	80fb      	strh	r3, [r7, #6]

   return ret;
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <ethCat_hw_eep_handler>:

void ethCat_hw_eep_handler (void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0

}
 8008b3c:	bf00      	nop
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
	...

08008b48 <ethCat_Init>:

void ethCat_Init (void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
      .esc_hw_interrupt_disable = NULL,
      .esc_hw_eep_handler = ethCat_hw_eep_handler,
      .esc_check_dc_handler = ethCat_check_dc_handler,
   };

   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_RESET);
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b52:	4809      	ldr	r0, [pc, #36]	; (8008b78 <ethCat_Init+0x30>)
 8008b54:	f002 fe94 	bl	800b880 <HAL_GPIO_WritePin>

   /* Delay */
   osDelay(ETHCAT_REST_DURATION);
 8008b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b5c:	f007 fbd2 	bl	8010304 <osDelay>
   HAL_GPIO_WritePin (LAN_Reset_CMD_GPIO_Port, LAN_Reset_CMD_Pin, GPIO_PIN_SET);
 8008b60:	2201      	movs	r2, #1
 8008b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b66:	4804      	ldr	r0, [pc, #16]	; (8008b78 <ethCat_Init+0x30>)
 8008b68:	f002 fe8a 	bl	800b880 <HAL_GPIO_WritePin>

   /* Initialize the EtherCat module. */
   ecat_slv_init (&ethCat_cfg);
 8008b6c:	4803      	ldr	r0, [pc, #12]	; (8008b7c <ethCat_Init+0x34>)
 8008b6e:	f7fb fab1 	bl	80040d4 <ecat_slv_init>
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	48000400 	.word	0x48000400
 8008b7c:	20000ac0 	.word	0x20000ac0

08008b80 <ethCat_Task>:

void ethCat_Task (void const * argument)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
   /* Initialize the modules which used by this application. */
   ethCat_Init();
 8008b88:	f7ff ffde 	bl	8008b48 <ethCat_Init>

   /* Sit in main loop of this task. */
   for (;;)
   {
      /* Run main function of etherCat. */
      ecat_slv();
 8008b8c:	f7fb fa98 	bl	80040c0 <ecat_slv>

      /* Delay tasks. */
      osDelay(ETHCAT_TASK_DELAY_MS);
 8008b90:	2001      	movs	r0, #1
 8008b92:	f007 fbb7 	bl	8010304 <osDelay>
      ecat_slv();
 8008b96:	e7f9      	b.n	8008b8c <ethCat_Task+0xc>

08008b98 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8008b9c:	bf00      	nop
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
	...

08008ba8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008ba8:	b5b0      	push	{r4, r5, r7, lr}
 8008baa:	b090      	sub	sp, #64	; 0x40
 8008bac:	af00      	add	r7, sp, #0
  /* definition and creation of appTestTask */
//  osThreadDef(appTestTask, testTask, osPriorityNormal, 0, 128);
//  appTestTaskHandle = osThreadCreate(osThread(appTestTask), NULL);

  /* definition and creation of ethCatSlvTask */
  osThreadDef(ethCatSlvTask, ethCat_Task, osPriorityHigh, 0, 512);
 8008bae:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <MX_FREERTOS_Init+0x70>)
 8008bb0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8008bb4:	461d      	mov	r5, r3
 8008bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	6023      	str	r3, [r4, #0]
  ethCatSlvTaskHandle = osThreadCreate(osThread(ethCatSlvTask), NULL);
 8008bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f007 fb76 	bl	80102b6 <osThreadCreate>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4a13      	ldr	r2, [pc, #76]	; (8008c1c <MX_FREERTOS_Init+0x74>)
 8008bce:	6013      	str	r3, [r2, #0]

  /* definition and creation of canIdle */
  osThreadDef(canIdle, canIdleTask, osPriorityHigh, 0, 512);
 8008bd0:	4b13      	ldr	r3, [pc, #76]	; (8008c20 <MX_FREERTOS_Init+0x78>)
 8008bd2:	f107 0418 	add.w	r4, r7, #24
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	6023      	str	r3, [r4, #0]
  canIdleHandle = osThreadCreate(osThread(canIdle), NULL);
 8008be0:	f107 0318 	add.w	r3, r7, #24
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f007 fb65 	bl	80102b6 <osThreadCreate>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4a0d      	ldr	r2, [pc, #52]	; (8008c24 <MX_FREERTOS_Init+0x7c>)
 8008bf0:	6013      	str	r3, [r2, #0]

  /* definition and creation of appMd80 */
  osThreadDef(appMd80, AppMd80_Task, osPriorityNormal, 0, 1424);
 8008bf2:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <MX_FREERTOS_Init+0x80>)
 8008bf4:	1d3c      	adds	r4, r7, #4
 8008bf6:	461d      	mov	r5, r3
 8008bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	6023      	str	r3, [r4, #0]
  appMd80Handle = osThreadCreate(osThread(appMd80), NULL);
 8008c00:	1d3b      	adds	r3, r7, #4
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f007 fb56 	bl	80102b6 <osThreadCreate>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4a07      	ldr	r2, [pc, #28]	; (8008c2c <MX_FREERTOS_Init+0x84>)
 8008c0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008c10:	bf00      	nop
 8008c12:	3740      	adds	r7, #64	; 0x40
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bdb0      	pop	{r4, r5, r7, pc}
 8008c18:	080149a0 	.word	0x080149a0
 8008c1c:	200020f0 	.word	0x200020f0
 8008c20:	080149b4 	.word	0x080149b4
 8008c24:	200020f4 	.word	0x200020f4
 8008c28:	080149c8 	.word	0x080149c8
 8008c2c:	200020f8 	.word	0x200020f8

08008c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008c36:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <MX_DMA_Init+0x60>)
 8008c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3a:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <MX_DMA_Init+0x60>)
 8008c3c:	f043 0304 	orr.w	r3, r3, #4
 8008c40:	6493      	str	r3, [r2, #72]	; 0x48
 8008c42:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <MX_DMA_Init+0x60>)
 8008c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008c4e:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <MX_DMA_Init+0x60>)
 8008c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c52:	4a0f      	ldr	r2, [pc, #60]	; (8008c90 <MX_DMA_Init+0x60>)
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	6493      	str	r3, [r2, #72]	; 0x48
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <MX_DMA_Init+0x60>)
 8008c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8008c66:	2200      	movs	r2, #0
 8008c68:	2105      	movs	r1, #5
 8008c6a:	200b      	movs	r0, #11
 8008c6c:	f000 ffb2 	bl	8009bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008c70:	200b      	movs	r0, #11
 8008c72:	f000 ffd9 	bl	8009c28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8008c76:	2200      	movs	r2, #0
 8008c78:	2105      	movs	r1, #5
 8008c7a:	200c      	movs	r0, #12
 8008c7c:	f000 ffaa 	bl	8009bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008c80:	200c      	movs	r0, #12
 8008c82:	f000 ffd1 	bl	8009c28 <HAL_NVIC_EnableIRQ>

}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40021000 	.word	0x40021000

08008c94 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8008c98:	4b20      	ldr	r3, [pc, #128]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008c9a:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <MX_FDCAN1_Init+0x8c>)
 8008c9c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8008ca4:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008caa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8008cac:	4b1b      	ldr	r3, [pc, #108]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8008cb8:	4b18      	ldr	r3, [pc, #96]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8008cbe:	4b17      	ldr	r3, [pc, #92]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8008cc4:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 43;
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008ccc:	222b      	movs	r2, #43	; 0x2b
 8008cce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 106;
 8008cd0:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cd2:	226a      	movs	r2, #106	; 0x6a
 8008cd4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 43;
 8008cd6:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cd8:	222b      	movs	r2, #43	; 0x2b
 8008cda:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cde:	2206      	movs	r2, #6
 8008ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 7;
 8008ce2:	4b0e      	ldr	r3, [pc, #56]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 17;
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cea:	2211      	movs	r2, #17
 8008cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 7;
 8008cee:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8008cf4:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8008cfa:	4b08      	ldr	r3, [pc, #32]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8008d06:	4805      	ldr	r0, [pc, #20]	; (8008d1c <MX_FDCAN1_Init+0x88>)
 8008d08:	f001 fb18 	bl	800a33c <HAL_FDCAN_Init>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8008d12:	f000 fa99 	bl	8009248 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8008d16:	bf00      	nop
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	200020fc 	.word	0x200020fc
 8008d20:	40006400 	.word	0x40006400

08008d24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b09e      	sub	sp, #120	; 0x78
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	609a      	str	r2, [r3, #8]
 8008d38:	60da      	str	r2, [r3, #12]
 8008d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d3c:	f107 0310 	add.w	r3, r7, #16
 8008d40:	2254      	movs	r2, #84	; 0x54
 8008d42:	2100      	movs	r1, #0
 8008d44:	4618      	mov	r0, r3
 8008d46:	f00a fa62 	bl	801320e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <HAL_FDCAN_MspInit+0xd4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d14c      	bne.n	8008dee <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8008d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d5e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d60:	f107 0310 	add.w	r3, r7, #16
 8008d64:	4618      	mov	r0, r3
 8008d66:	f004 f8f3 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8008d70:	f000 fa6a 	bl	8009248 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008d74:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <HAL_FDCAN_MspInit+0xd8>)
 8008d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d78:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <HAL_FDCAN_MspInit+0xd8>)
 8008d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8008d80:	4b1e      	ldr	r3, [pc, #120]	; (8008dfc <HAL_FDCAN_MspInit+0xd8>)
 8008d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d8c:	4b1b      	ldr	r3, [pc, #108]	; (8008dfc <HAL_FDCAN_MspInit+0xd8>)
 8008d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d90:	4a1a      	ldr	r2, [pc, #104]	; (8008dfc <HAL_FDCAN_MspInit+0xd8>)
 8008d92:	f043 0302 	orr.w	r3, r3, #2
 8008d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d98:	4b18      	ldr	r3, [pc, #96]	; (8008dfc <HAL_FDCAN_MspInit+0xd8>)
 8008d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN_RX_Pin|FDCAN_TX_Pin;
 8008da4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008da8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008daa:	2302      	movs	r3, #2
 8008dac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008db2:	2302      	movs	r3, #2
 8008db4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008db6:	2309      	movs	r3, #9
 8008db8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	480f      	ldr	r0, [pc, #60]	; (8008e00 <HAL_FDCAN_MspInit+0xdc>)
 8008dc2:	f002 fb07 	bl	800b3d4 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <HAL_FDCAN_MspInit+0xe0>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4a0e      	ldr	r2, [pc, #56]	; (8008e04 <HAL_FDCAN_MspInit+0xe0>)
 8008dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd0:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <HAL_FDCAN_MspInit+0xe0>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	4a0b      	ldr	r2, [pc, #44]	; (8008e04 <HAL_FDCAN_MspInit+0xe0>)
 8008dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ddc:	6053      	str	r3, [r2, #4]

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8008dde:	2200      	movs	r2, #0
 8008de0:	2105      	movs	r1, #5
 8008de2:	2015      	movs	r0, #21
 8008de4:	f000 fef6 	bl	8009bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8008de8:	2015      	movs	r0, #21
 8008dea:	f000 ff1d 	bl	8009c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8008dee:	bf00      	nop
 8008df0:	3778      	adds	r7, #120	; 0x78
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40006400 	.word	0x40006400
 8008dfc:	40021000 	.word	0x40021000
 8008e00:	48000400 	.word	0x48000400
 8008e04:	40010000 	.word	0x40010000

08008e08 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08c      	sub	sp, #48	; 0x30
 8008e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e0e:	f107 031c 	add.w	r3, r7, #28
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	609a      	str	r2, [r3, #8]
 8008e1a:	60da      	str	r2, [r3, #12]
 8008e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e1e:	4b7b      	ldr	r3, [pc, #492]	; (800900c <MX_GPIO_Init+0x204>)
 8008e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e22:	4a7a      	ldr	r2, [pc, #488]	; (800900c <MX_GPIO_Init+0x204>)
 8008e24:	f043 0304 	orr.w	r3, r3, #4
 8008e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e2a:	4b78      	ldr	r3, [pc, #480]	; (800900c <MX_GPIO_Init+0x204>)
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e36:	4b75      	ldr	r3, [pc, #468]	; (800900c <MX_GPIO_Init+0x204>)
 8008e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3a:	4a74      	ldr	r2, [pc, #464]	; (800900c <MX_GPIO_Init+0x204>)
 8008e3c:	f043 0320 	orr.w	r3, r3, #32
 8008e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e42:	4b72      	ldr	r3, [pc, #456]	; (800900c <MX_GPIO_Init+0x204>)
 8008e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e4e:	4b6f      	ldr	r3, [pc, #444]	; (800900c <MX_GPIO_Init+0x204>)
 8008e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e52:	4a6e      	ldr	r2, [pc, #440]	; (800900c <MX_GPIO_Init+0x204>)
 8008e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e5a:	4b6c      	ldr	r3, [pc, #432]	; (800900c <MX_GPIO_Init+0x204>)
 8008e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e62:	613b      	str	r3, [r7, #16]
 8008e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e66:	4b69      	ldr	r3, [pc, #420]	; (800900c <MX_GPIO_Init+0x204>)
 8008e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6a:	4a68      	ldr	r2, [pc, #416]	; (800900c <MX_GPIO_Init+0x204>)
 8008e6c:	f043 0301 	orr.w	r3, r3, #1
 8008e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e72:	4b66      	ldr	r3, [pc, #408]	; (800900c <MX_GPIO_Init+0x204>)
 8008e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e7e:	4b63      	ldr	r3, [pc, #396]	; (800900c <MX_GPIO_Init+0x204>)
 8008e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e82:	4a62      	ldr	r2, [pc, #392]	; (800900c <MX_GPIO_Init+0x204>)
 8008e84:	f043 0302 	orr.w	r3, r3, #2
 8008e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e8a:	4b60      	ldr	r3, [pc, #384]	; (800900c <MX_GPIO_Init+0x204>)
 8008e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e96:	4b5d      	ldr	r3, [pc, #372]	; (800900c <MX_GPIO_Init+0x204>)
 8008e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9a:	4a5c      	ldr	r2, [pc, #368]	; (800900c <MX_GPIO_Init+0x204>)
 8008e9c:	f043 0308 	orr.w	r3, r3, #8
 8008ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ea2:	4b5a      	ldr	r3, [pc, #360]	; (800900c <MX_GPIO_Init+0x204>)
 8008ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8008eae:	2201      	movs	r2, #1
 8008eb0:	2110      	movs	r1, #16
 8008eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008eb6:	f002 fce3 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2110      	movs	r1, #16
 8008ebe:	4854      	ldr	r0, [pc, #336]	; (8009010 <MX_GPIO_Init+0x208>)
 8008ec0:	f002 fcde 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	4852      	ldr	r0, [pc, #328]	; (8009014 <MX_GPIO_Init+0x20c>)
 8008eca:	f002 fcd9 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_Reset_CMD_Pin|EXT_LED_Pin, GPIO_PIN_RESET);
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8008ed4:	484f      	ldr	r0, [pc, #316]	; (8009014 <MX_GPIO_Init+0x20c>)
 8008ed6:	f002 fcd3 	bl	800b880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Ver_D0_Pin|Ver_D1_Pin|Ver_A_Pin;
 8008eda:	f246 0301 	movw	r3, #24577	; 0x6001
 8008ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ee8:	f107 031c 	add.w	r3, r7, #28
 8008eec:	4619      	mov	r1, r3
 8008eee:	4848      	ldr	r0, [pc, #288]	; (8009010 <MX_GPIO_Init+0x208>)
 8008ef0:	f002 fa70 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC3
                           PC5 PC6 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8008ef4:	f649 43ee 	movw	r3, #40174	; 0x9cee
 8008ef8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008efa:	2303      	movs	r3, #3
 8008efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f02:	f107 031c 	add.w	r3, r7, #28
 8008f06:	4619      	mov	r1, r3
 8008f08:	4841      	ldr	r0, [pc, #260]	; (8009010 <MX_GPIO_Init+0x208>)
 8008f0a:	f002 fa63 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008f14:	2303      	movs	r3, #3
 8008f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f1c:	f107 031c 	add.w	r3, r7, #28
 8008f20:	4619      	mov	r1, r3
 8008f22:	483d      	ldr	r0, [pc, #244]	; (8009018 <MX_GPIO_Init+0x210>)
 8008f24:	f002 fa56 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ETC_SYNC1_Pin|ETC_SYNC0_Pin|ETC_IRQ_Pin;
 8008f28:	2307      	movs	r3, #7
 8008f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f30:	2301      	movs	r3, #1
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f34:	f107 031c 	add.w	r3, r7, #28
 8008f38:	4619      	mov	r1, r3
 8008f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f3e:	f002 fa49 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_15;
 8008f42:	f248 1308 	movw	r3, #33032	; 0x8108
 8008f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f50:	f107 031c 	add.w	r3, r7, #28
 8008f54:	4619      	mov	r1, r3
 8008f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f5a:	f002 fa3b 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008f5e:	2310      	movs	r3, #16
 8008f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f62:	2301      	movs	r3, #1
 8008f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f66:	2301      	movs	r3, #1
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008f6e:	f107 031c 	add.w	r3, r7, #28
 8008f72:	4619      	mov	r1, r3
 8008f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f78:	f002 fa2c 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f80:	2301      	movs	r3, #1
 8008f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8008f8c:	f107 031c 	add.w	r3, r7, #28
 8008f90:	4619      	mov	r1, r3
 8008f92:	481f      	ldr	r0, [pc, #124]	; (8009010 <MX_GPIO_Init+0x208>)
 8008f94:	f002 fa1e 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8008fa8:	f107 031c 	add.w	r3, r7, #28
 8008fac:	4619      	mov	r1, r3
 8008fae:	4819      	ldr	r0, [pc, #100]	; (8009014 <MX_GPIO_Init+0x20c>)
 8008fb0:	f002 fa10 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB14 PB15 PB4
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8008fb4:	f24f 43d6 	movw	r3, #62678	; 0xf4d6
 8008fb8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fc2:	f107 031c 	add.w	r3, r7, #28
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4812      	ldr	r0, [pc, #72]	; (8009014 <MX_GPIO_Init+0x20c>)
 8008fca:	f002 fa03 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LAN_Reset_CMD_Pin|EXT_LED_Pin;
 8008fce:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8008fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fe0:	f107 031c 	add.w	r3, r7, #28
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	480b      	ldr	r0, [pc, #44]	; (8009014 <MX_GPIO_Init+0x20c>)
 8008fe8:	f002 f9f4 	bl	800b3d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008fec:	2304      	movs	r3, #4
 8008fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008ff8:	f107 031c 	add.w	r3, r7, #28
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4807      	ldr	r0, [pc, #28]	; (800901c <MX_GPIO_Init+0x214>)
 8009000:	f002 f9e8 	bl	800b3d4 <HAL_GPIO_Init>

}
 8009004:	bf00      	nop
 8009006:	3730      	adds	r7, #48	; 0x30
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40021000 	.word	0x40021000
 8009010:	48000800 	.word	0x48000800
 8009014:	48000400 	.word	0x48000400
 8009018:	48001800 	.word	0x48001800
 800901c:	48000c00 	.word	0x48000c00

08009020 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009024:	4b1b      	ldr	r3, [pc, #108]	; (8009094 <MX_I2C3_Init+0x74>)
 8009026:	4a1c      	ldr	r2, [pc, #112]	; (8009098 <MX_I2C3_Init+0x78>)
 8009028:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20C0EDFF;
 800902a:	4b1a      	ldr	r3, [pc, #104]	; (8009094 <MX_I2C3_Init+0x74>)
 800902c:	4a1b      	ldr	r2, [pc, #108]	; (800909c <MX_I2C3_Init+0x7c>)
 800902e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8009030:	4b18      	ldr	r3, [pc, #96]	; (8009094 <MX_I2C3_Init+0x74>)
 8009032:	2200      	movs	r2, #0
 8009034:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009036:	4b17      	ldr	r3, [pc, #92]	; (8009094 <MX_I2C3_Init+0x74>)
 8009038:	2201      	movs	r2, #1
 800903a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800903c:	4b15      	ldr	r3, [pc, #84]	; (8009094 <MX_I2C3_Init+0x74>)
 800903e:	2200      	movs	r2, #0
 8009040:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8009042:	4b14      	ldr	r3, [pc, #80]	; (8009094 <MX_I2C3_Init+0x74>)
 8009044:	2200      	movs	r2, #0
 8009046:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009048:	4b12      	ldr	r3, [pc, #72]	; (8009094 <MX_I2C3_Init+0x74>)
 800904a:	2200      	movs	r2, #0
 800904c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800904e:	4b11      	ldr	r3, [pc, #68]	; (8009094 <MX_I2C3_Init+0x74>)
 8009050:	2200      	movs	r2, #0
 8009052:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009054:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <MX_I2C3_Init+0x74>)
 8009056:	2200      	movs	r2, #0
 8009058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800905a:	480e      	ldr	r0, [pc, #56]	; (8009094 <MX_I2C3_Init+0x74>)
 800905c:	f002 fc40 	bl	800b8e0 <HAL_I2C_Init>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8009066:	f000 f8ef 	bl	8009248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800906a:	2100      	movs	r1, #0
 800906c:	4809      	ldr	r0, [pc, #36]	; (8009094 <MX_I2C3_Init+0x74>)
 800906e:	f002 fd59 	bl	800bb24 <HAL_I2CEx_ConfigAnalogFilter>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8009078:	f000 f8e6 	bl	8009248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800907c:	2100      	movs	r1, #0
 800907e:	4805      	ldr	r0, [pc, #20]	; (8009094 <MX_I2C3_Init+0x74>)
 8009080:	f002 fdc6 	bl	800bc10 <HAL_I2CEx_ConfigDigitalFilter>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800908a:	f000 f8dd 	bl	8009248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800908e:	bf00      	nop
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20002160 	.word	0x20002160
 8009098:	40007800 	.word	0x40007800
 800909c:	20c0edff 	.word	0x20c0edff

080090a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b09e      	sub	sp, #120	; 0x78
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	605a      	str	r2, [r3, #4]
 80090b2:	609a      	str	r2, [r3, #8]
 80090b4:	60da      	str	r2, [r3, #12]
 80090b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	2254      	movs	r2, #84	; 0x54
 80090be:	2100      	movs	r1, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f00a f8a4 	bl	801320e <memset>
  if(i2cHandle->Instance==I2C3)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1f      	ldr	r2, [pc, #124]	; (8009148 <HAL_I2C_MspInit+0xa8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d137      	bne.n	8009140 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80090d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f003 ff36 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80090ea:	f000 f8ad 	bl	8009248 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80090ee:	4b17      	ldr	r3, [pc, #92]	; (800914c <HAL_I2C_MspInit+0xac>)
 80090f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f2:	4a16      	ldr	r2, [pc, #88]	; (800914c <HAL_I2C_MspInit+0xac>)
 80090f4:	f043 0304 	orr.w	r3, r3, #4
 80090f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <HAL_I2C_MspInit+0xac>)
 80090fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800910a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800910c:	2312      	movs	r3, #18
 800910e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009110:	2300      	movs	r3, #0
 8009112:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009114:	2300      	movs	r3, #0
 8009116:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8009118:	2308      	movs	r3, #8
 800911a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800911c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009120:	4619      	mov	r1, r3
 8009122:	480b      	ldr	r0, [pc, #44]	; (8009150 <HAL_I2C_MspInit+0xb0>)
 8009124:	f002 f956 	bl	800b3d4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <HAL_I2C_MspInit+0xac>)
 800912a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912c:	4a07      	ldr	r2, [pc, #28]	; (800914c <HAL_I2C_MspInit+0xac>)
 800912e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009132:	6593      	str	r3, [r2, #88]	; 0x58
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <HAL_I2C_MspInit+0xac>)
 8009136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8009140:	bf00      	nop
 8009142:	3778      	adds	r7, #120	; 0x78
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	40007800 	.word	0x40007800
 800914c:	40021000 	.word	0x40021000
 8009150:	48000800 	.word	0x48000800

08009154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009158:	f000 fc37 	bl	80099ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800915c:	f000 f813 	bl	8009186 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009160:	f7ff fe52 	bl	8008e08 <MX_GPIO_Init>
  MX_DMA_Init();
 8009164:	f7ff fd64 	bl	8008c30 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8009168:	f7ff fd94 	bl	8008c94 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800916c:	f000 f87c 	bl	8009268 <MX_SPI1_Init>
  MX_I2C3_Init();
 8009170:	f7ff ff56 	bl	8009020 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8009174:	f000 fb00 	bl	8009778 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8009178:	f000 fba2 	bl	80098c0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800917c:	f7ff fd14 	bl	8008ba8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8009180:	f007 f892 	bl	80102a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009184:	e7fe      	b.n	8009184 <main+0x30>

08009186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b094      	sub	sp, #80	; 0x50
 800918a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800918c:	f107 0318 	add.w	r3, r7, #24
 8009190:	2238      	movs	r2, #56	; 0x38
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f00a f83a 	bl	801320e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800919a:	1d3b      	adds	r3, r7, #4
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	605a      	str	r2, [r3, #4]
 80091a2:	609a      	str	r2, [r3, #8]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091ac:	f002 fec0 	bl	800bf30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80091b0:	2321      	movs	r3, #33	; 0x21
 80091b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80091b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80091ba:	2301      	movs	r3, #1
 80091bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091be:	2302      	movs	r3, #2
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091c2:	2303      	movs	r3, #3
 80091c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80091c6:	2304      	movs	r3, #4
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80091ca:	234b      	movs	r3, #75	; 0x4b
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091ce:	2302      	movs	r3, #2
 80091d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80091d2:	2308      	movs	r3, #8
 80091d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80091d6:	2302      	movs	r3, #2
 80091d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091da:	f107 0318 	add.w	r3, r7, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 ff5a 	bl	800c098 <HAL_RCC_OscConfig>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <SystemClock_Config+0x68>
  {
    Error_Handler();
 80091ea:	f000 f82d 	bl	8009248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091ee:	230f      	movs	r3, #15
 80091f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091f2:	2303      	movs	r3, #3
 80091f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80091fa:	2300      	movs	r3, #0
 80091fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	2104      	movs	r1, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f003 fb58 	bl	800c8bc <HAL_RCC_ClockConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8009212:	f000 f819 	bl	8009248 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8009216:	f003 fe2b 	bl	800ce70 <HAL_RCC_EnableCSS>
}
 800921a:	bf00      	nop
 800921c:	3750      	adds	r7, #80	; 0x50
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a04      	ldr	r2, [pc, #16]	; (8009244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d101      	bne.n	800923a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009236:	f000 fbe1 	bl	80099fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	40012c00 	.word	0x40012c00

08009248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800924c:	b672      	cpsid	i
}
 800924e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009250:	e7fe      	b.n	8009250 <Error_Handler+0x8>

08009252 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800926c:	4b1b      	ldr	r3, [pc, #108]	; (80092dc <MX_SPI1_Init+0x74>)
 800926e:	4a1c      	ldr	r2, [pc, #112]	; (80092e0 <MX_SPI1_Init+0x78>)
 8009270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009272:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <MX_SPI1_Init+0x74>)
 8009274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800927a:	4b18      	ldr	r3, [pc, #96]	; (80092dc <MX_SPI1_Init+0x74>)
 800927c:	2200      	movs	r2, #0
 800927e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009280:	4b16      	ldr	r3, [pc, #88]	; (80092dc <MX_SPI1_Init+0x74>)
 8009282:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009286:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009288:	4b14      	ldr	r3, [pc, #80]	; (80092dc <MX_SPI1_Init+0x74>)
 800928a:	2200      	movs	r2, #0
 800928c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <MX_SPI1_Init+0x74>)
 8009290:	2200      	movs	r2, #0
 8009292:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009294:	4b11      	ldr	r3, [pc, #68]	; (80092dc <MX_SPI1_Init+0x74>)
 8009296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800929a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <MX_SPI1_Init+0x74>)
 800929e:	2208      	movs	r2, #8
 80092a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80092a2:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <MX_SPI1_Init+0x74>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <MX_SPI1_Init+0x74>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ae:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <MX_SPI1_Init+0x74>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80092b4:	4b09      	ldr	r3, [pc, #36]	; (80092dc <MX_SPI1_Init+0x74>)
 80092b6:	2207      	movs	r2, #7
 80092b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <MX_SPI1_Init+0x74>)
 80092bc:	2200      	movs	r2, #0
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <MX_SPI1_Init+0x74>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80092c6:	4805      	ldr	r0, [pc, #20]	; (80092dc <MX_SPI1_Init+0x74>)
 80092c8:	f004 faa8 	bl	800d81c <HAL_SPI_Init>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80092d2:	f7ff ffb9 	bl	8009248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80092d6:	bf00      	nop
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200021ac 	.word	0x200021ac
 80092e0:	40013000 	.word	0x40013000

080092e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08a      	sub	sp, #40	; 0x28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092ec:	f107 0314 	add.w	r3, r7, #20
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	605a      	str	r2, [r3, #4]
 80092f6:	609a      	str	r2, [r3, #8]
 80092f8:	60da      	str	r2, [r3, #12]
 80092fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a41      	ldr	r2, [pc, #260]	; (8009408 <HAL_SPI_MspInit+0x124>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d17c      	bne.n	8009400 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009306:	4b41      	ldr	r3, [pc, #260]	; (800940c <HAL_SPI_MspInit+0x128>)
 8009308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930a:	4a40      	ldr	r2, [pc, #256]	; (800940c <HAL_SPI_MspInit+0x128>)
 800930c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009310:	6613      	str	r3, [r2, #96]	; 0x60
 8009312:	4b3e      	ldr	r3, [pc, #248]	; (800940c <HAL_SPI_MspInit+0x128>)
 8009314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800931e:	4b3b      	ldr	r3, [pc, #236]	; (800940c <HAL_SPI_MspInit+0x128>)
 8009320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009322:	4a3a      	ldr	r2, [pc, #232]	; (800940c <HAL_SPI_MspInit+0x128>)
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800932a:	4b38      	ldr	r3, [pc, #224]	; (800940c <HAL_SPI_MspInit+0x128>)
 800932c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009336:	23e0      	movs	r3, #224	; 0xe0
 8009338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933a:	2302      	movs	r3, #2
 800933c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009342:	2303      	movs	r3, #3
 8009344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009346:	2305      	movs	r3, #5
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800934a:	f107 0314 	add.w	r3, r7, #20
 800934e:	4619      	mov	r1, r3
 8009350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009354:	f002 f83e 	bl	800b3d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8009358:	4b2d      	ldr	r3, [pc, #180]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 800935a:	4a2e      	ldr	r2, [pc, #184]	; (8009414 <HAL_SPI_MspInit+0x130>)
 800935c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800935e:	4b2c      	ldr	r3, [pc, #176]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 8009360:	220a      	movs	r2, #10
 8009362:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009364:	4b2a      	ldr	r3, [pc, #168]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 8009366:	2200      	movs	r2, #0
 8009368:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800936a:	4b29      	ldr	r3, [pc, #164]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 800936c:	2200      	movs	r2, #0
 800936e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009370:	4b27      	ldr	r3, [pc, #156]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 8009372:	2280      	movs	r2, #128	; 0x80
 8009374:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009376:	4b26      	ldr	r3, [pc, #152]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 8009378:	2200      	movs	r2, #0
 800937a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800937c:	4b24      	ldr	r3, [pc, #144]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 800937e:	2200      	movs	r2, #0
 8009380:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8009382:	4b23      	ldr	r3, [pc, #140]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 8009384:	2200      	movs	r2, #0
 8009386:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009388:	4b21      	ldr	r3, [pc, #132]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 800938a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800938e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8009390:	481f      	ldr	r0, [pc, #124]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 8009392:	f000 fc61 	bl	8009c58 <HAL_DMA_Init>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800939c:	f7ff ff54 	bl	8009248 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a1b      	ldr	r2, [pc, #108]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 80093a4:	659a      	str	r2, [r3, #88]	; 0x58
 80093a6:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <HAL_SPI_MspInit+0x12c>)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 80093ac:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093ae:	4a1b      	ldr	r2, [pc, #108]	; (800941c <HAL_SPI_MspInit+0x138>)
 80093b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80093b2:	4b19      	ldr	r3, [pc, #100]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093b4:	220b      	movs	r2, #11
 80093b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093b8:	4b17      	ldr	r3, [pc, #92]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093ba:	2210      	movs	r2, #16
 80093bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093be:	4b16      	ldr	r3, [pc, #88]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80093c4:	4b14      	ldr	r3, [pc, #80]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093c6:	2280      	movs	r2, #128	; 0x80
 80093c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093ca:	4b13      	ldr	r3, [pc, #76]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093d0:	4b11      	ldr	r3, [pc, #68]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80093d6:	4b10      	ldr	r3, [pc, #64]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093d8:	2200      	movs	r2, #0
 80093da:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80093dc:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80093e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80093e4:	480c      	ldr	r0, [pc, #48]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093e6:	f000 fc37 	bl	8009c58 <HAL_DMA_Init>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80093f0:	f7ff ff2a 	bl	8009248 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a08      	ldr	r2, [pc, #32]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093f8:	655a      	str	r2, [r3, #84]	; 0x54
 80093fa:	4a07      	ldr	r2, [pc, #28]	; (8009418 <HAL_SPI_MspInit+0x134>)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009400:	bf00      	nop
 8009402:	3728      	adds	r7, #40	; 0x28
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40013000 	.word	0x40013000
 800940c:	40021000 	.word	0x40021000
 8009410:	20002210 	.word	0x20002210
 8009414:	40020008 	.word	0x40020008
 8009418:	20002270 	.word	0x20002270
 800941c:	4002001c 	.word	0x4002001c

08009420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <HAL_MspInit+0x4c>)
 8009428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800942a:	4a10      	ldr	r2, [pc, #64]	; (800946c <HAL_MspInit+0x4c>)
 800942c:	f043 0301 	orr.w	r3, r3, #1
 8009430:	6613      	str	r3, [r2, #96]	; 0x60
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <HAL_MspInit+0x4c>)
 8009434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <HAL_MspInit+0x4c>)
 8009440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009442:	4a0a      	ldr	r2, [pc, #40]	; (800946c <HAL_MspInit+0x4c>)
 8009444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009448:	6593      	str	r3, [r2, #88]	; 0x58
 800944a:	4b08      	ldr	r3, [pc, #32]	; (800946c <HAL_MspInit+0x4c>)
 800944c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	210f      	movs	r1, #15
 800945a:	f06f 0001 	mvn.w	r0, #1
 800945e:	f000 fbb9 	bl	8009bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	40021000 	.word	0x40021000

08009470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08c      	sub	sp, #48	; 0x30
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009480:	4b2c      	ldr	r3, [pc, #176]	; (8009534 <HAL_InitTick+0xc4>)
 8009482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009484:	4a2b      	ldr	r2, [pc, #172]	; (8009534 <HAL_InitTick+0xc4>)
 8009486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800948a:	6613      	str	r3, [r2, #96]	; 0x60
 800948c:	4b29      	ldr	r3, [pc, #164]	; (8009534 <HAL_InitTick+0xc4>)
 800948e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009494:	60bb      	str	r3, [r7, #8]
 8009496:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009498:	f107 020c 	add.w	r2, r7, #12
 800949c:	f107 0310 	add.w	r3, r7, #16
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f003 fca2 	bl	800cdec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80094a8:	f003 fc8a 	bl	800cdc0 <HAL_RCC_GetPCLK2Freq>
 80094ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80094ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b0:	4a21      	ldr	r2, [pc, #132]	; (8009538 <HAL_InitTick+0xc8>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0c9b      	lsrs	r3, r3, #18
 80094b8:	3b01      	subs	r3, #1
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80094bc:	4b1f      	ldr	r3, [pc, #124]	; (800953c <HAL_InitTick+0xcc>)
 80094be:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_InitTick+0xd0>)
 80094c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80094c2:	4b1e      	ldr	r3, [pc, #120]	; (800953c <HAL_InitTick+0xcc>)
 80094c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80094c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80094ca:	4a1c      	ldr	r2, [pc, #112]	; (800953c <HAL_InitTick+0xcc>)
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80094d0:	4b1a      	ldr	r3, [pc, #104]	; (800953c <HAL_InitTick+0xcc>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094d6:	4b19      	ldr	r3, [pc, #100]	; (800953c <HAL_InitTick+0xcc>)
 80094d8:	2200      	movs	r2, #0
 80094da:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80094dc:	4817      	ldr	r0, [pc, #92]	; (800953c <HAL_InitTick+0xcc>)
 80094de:	f005 f979 	bl	800e7d4 <HAL_TIM_Base_Init>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80094e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11b      	bne.n	8009528 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80094f0:	4812      	ldr	r0, [pc, #72]	; (800953c <HAL_InitTick+0xcc>)
 80094f2:	f005 fa63 	bl	800e9bc <HAL_TIM_Base_Start_IT>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80094fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009500:	2b00      	cmp	r3, #0
 8009502:	d111      	bne.n	8009528 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009504:	2019      	movs	r0, #25
 8009506:	f000 fb8f 	bl	8009c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b0f      	cmp	r3, #15
 800950e:	d808      	bhi.n	8009522 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8009510:	2200      	movs	r2, #0
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	2019      	movs	r0, #25
 8009516:	f000 fb5d 	bl	8009bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800951a:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <HAL_InitTick+0xd4>)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e002      	b.n	8009528 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8009528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800952c:	4618      	mov	r0, r3
 800952e:	3730      	adds	r7, #48	; 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	40021000 	.word	0x40021000
 8009538:	431bde83 	.word	0x431bde83
 800953c:	200022d0 	.word	0x200022d0
 8009540:	40012c00 	.word	0x40012c00
 8009544:	20000b14 	.word	0x20000b14

08009548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800954c:	f003 fca0 	bl	800ce90 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009550:	e7fe      	b.n	8009550 <NMI_Handler+0x8>

08009552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009552:	b480      	push	{r7}
 8009554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009556:	e7fe      	b.n	8009556 <HardFault_Handler+0x4>

08009558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800955c:	e7fe      	b.n	800955c <MemManage_Handler+0x4>

0800955e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800955e:	b480      	push	{r7}
 8009560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009562:	e7fe      	b.n	8009562 <BusFault_Handler+0x4>

08009564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009568:	e7fe      	b.n	8009568 <UsageFault_Handler+0x4>

0800956a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800956a:	b480      	push	{r7}
 800956c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800957c:	4802      	ldr	r0, [pc, #8]	; (8009588 <DMA1_Channel1_IRQHandler+0x10>)
 800957e:	f000 fd8d 	bl	800a09c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20002210 	.word	0x20002210

0800958c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8009590:	4802      	ldr	r0, [pc, #8]	; (800959c <DMA1_Channel2_IRQHandler+0x10>)
 8009592:	f000 fd83 	bl	800a09c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20002270 	.word	0x20002270

080095a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80095a4:	4802      	ldr	r0, [pc, #8]	; (80095b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80095a6:	f001 fc8b 	bl	800aec0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200020fc 	.word	0x200020fc

080095b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80095b8:	4802      	ldr	r0, [pc, #8]	; (80095c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80095ba:	f005 fabf 	bl	800eb3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200022d0 	.word	0x200022d0

080095c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80095c8:	b480      	push	{r7}
 80095ca:	af00      	add	r7, sp, #0
  return 1;
 80095cc:	2301      	movs	r3, #1
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <_kill>:

int _kill(int pid, int sig)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80095e2:	f009 fcc1 	bl	8012f68 <__errno>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2216      	movs	r2, #22
 80095ea:	601a      	str	r2, [r3, #0]
  return -1;
 80095ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <_exit>:

void _exit (int status)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009600:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff ffe7 	bl	80095d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800960a:	e7fe      	b.n	800960a <_exit+0x12>

0800960c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	e00a      	b.n	8009634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800961e:	f3af 8000 	nop.w
 8009622:	4601      	mov	r1, r0
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	60ba      	str	r2, [r7, #8]
 800962a:	b2ca      	uxtb	r2, r1
 800962c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	3301      	adds	r3, #1
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	429a      	cmp	r2, r3
 800963a:	dbf0      	blt.n	800961e <_read+0x12>
  }

  return len;
 800963c:	687b      	ldr	r3, [r7, #4]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b086      	sub	sp, #24
 800964a:	af00      	add	r7, sp, #0
 800964c:	60f8      	str	r0, [r7, #12]
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e009      	b.n	800966c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	60ba      	str	r2, [r7, #8]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	3301      	adds	r3, #1
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	dbf1      	blt.n	8009658 <_write+0x12>
  }
  return len;
 8009674:	687b      	ldr	r3, [r7, #4]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <_close>:

int _close(int file)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80096a6:	605a      	str	r2, [r3, #4]
  return 0;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <_isatty>:

int _isatty(int file)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b083      	sub	sp, #12
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80096be:	2301      	movs	r3, #1
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80096f0:	4a14      	ldr	r2, [pc, #80]	; (8009744 <_sbrk+0x5c>)
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <_sbrk+0x60>)
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80096fc:	4b13      	ldr	r3, [pc, #76]	; (800974c <_sbrk+0x64>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <_sbrk+0x64>)
 8009706:	4a12      	ldr	r2, [pc, #72]	; (8009750 <_sbrk+0x68>)
 8009708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800970a:	4b10      	ldr	r3, [pc, #64]	; (800974c <_sbrk+0x64>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4413      	add	r3, r2
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	429a      	cmp	r2, r3
 8009716:	d207      	bcs.n	8009728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009718:	f009 fc26 	bl	8012f68 <__errno>
 800971c:	4603      	mov	r3, r0
 800971e:	220c      	movs	r2, #12
 8009720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009726:	e009      	b.n	800973c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <_sbrk+0x64>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <_sbrk+0x64>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4413      	add	r3, r2
 8009736:	4a05      	ldr	r2, [pc, #20]	; (800974c <_sbrk+0x64>)
 8009738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800973a:	68fb      	ldr	r3, [r7, #12]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20020000 	.word	0x20020000
 8009748:	00000400 	.word	0x00000400
 800974c:	2000231c 	.word	0x2000231c
 8009750:	20007888 	.word	0x20007888

08009754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <SystemInit+0x20>)
 800975a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975e:	4a05      	ldr	r2, [pc, #20]	; (8009774 <SystemInit+0x20>)
 8009760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009768:	bf00      	nop
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	e000ed00 	.word	0xe000ed00

08009778 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800977c:	4b22      	ldr	r3, [pc, #136]	; (8009808 <MX_USART1_UART_Init+0x90>)
 800977e:	4a23      	ldr	r2, [pc, #140]	; (800980c <MX_USART1_UART_Init+0x94>)
 8009780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009782:	4b21      	ldr	r3, [pc, #132]	; (8009808 <MX_USART1_UART_Init+0x90>)
 8009784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800978a:	4b1f      	ldr	r3, [pc, #124]	; (8009808 <MX_USART1_UART_Init+0x90>)
 800978c:	2200      	movs	r2, #0
 800978e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009790:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <MX_USART1_UART_Init+0x90>)
 8009792:	2200      	movs	r2, #0
 8009794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009796:	4b1c      	ldr	r3, [pc, #112]	; (8009808 <MX_USART1_UART_Init+0x90>)
 8009798:	2200      	movs	r2, #0
 800979a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800979c:	4b1a      	ldr	r3, [pc, #104]	; (8009808 <MX_USART1_UART_Init+0x90>)
 800979e:	220c      	movs	r2, #12
 80097a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80097a8:	4b17      	ldr	r3, [pc, #92]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097ae:	4b16      	ldr	r3, [pc, #88]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80097b4:	4b14      	ldr	r3, [pc, #80]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097bc:	2200      	movs	r2, #0
 80097be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80097c0:	4811      	ldr	r0, [pc, #68]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097c2:	f005 fc51 	bl	800f068 <HAL_UART_Init>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80097cc:	f7ff fd3c 	bl	8009248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097d0:	2100      	movs	r1, #0
 80097d2:	480d      	ldr	r0, [pc, #52]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097d4:	f006 fbae 	bl	800ff34 <HAL_UARTEx_SetTxFifoThreshold>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80097de:	f7ff fd33 	bl	8009248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097e2:	2100      	movs	r1, #0
 80097e4:	4808      	ldr	r0, [pc, #32]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097e6:	f006 fc31 	bl	801004c <HAL_UARTEx_SetRxFifoThreshold>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80097f0:	f7ff fd2a 	bl	8009248 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80097f4:	4804      	ldr	r0, [pc, #16]	; (8009808 <MX_USART1_UART_Init+0x90>)
 80097f6:	f006 fb35 	bl	800fe64 <HAL_UARTEx_DisableFifoMode>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009800:	f7ff fd22 	bl	8009248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009804:	bf00      	nop
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20002320 	.word	0x20002320
 800980c:	40013800 	.word	0x40013800

08009810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b09e      	sub	sp, #120	; 0x78
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800981c:	2200      	movs	r2, #0
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	605a      	str	r2, [r3, #4]
 8009822:	609a      	str	r2, [r3, #8]
 8009824:	60da      	str	r2, [r3, #12]
 8009826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009828:	f107 0310 	add.w	r3, r7, #16
 800982c:	2254      	movs	r2, #84	; 0x54
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f009 fcec 	bl	801320e <memset>
  if(uartHandle->Instance==USART1)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1f      	ldr	r2, [pc, #124]	; (80098b8 <HAL_UART_MspInit+0xa8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d137      	bne.n	80098b0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009840:	2301      	movs	r3, #1
 8009842:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	4618      	mov	r0, r3
 800984e:	f003 fb7f 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009858:	f7ff fcf6 	bl	8009248 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800985c:	4b17      	ldr	r3, [pc, #92]	; (80098bc <HAL_UART_MspInit+0xac>)
 800985e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009860:	4a16      	ldr	r2, [pc, #88]	; (80098bc <HAL_UART_MspInit+0xac>)
 8009862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009866:	6613      	str	r3, [r2, #96]	; 0x60
 8009868:	4b14      	ldr	r3, [pc, #80]	; (80098bc <HAL_UART_MspInit+0xac>)
 800986a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800986c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009870:	60fb      	str	r3, [r7, #12]
 8009872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009874:	4b11      	ldr	r3, [pc, #68]	; (80098bc <HAL_UART_MspInit+0xac>)
 8009876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009878:	4a10      	ldr	r2, [pc, #64]	; (80098bc <HAL_UART_MspInit+0xac>)
 800987a:	f043 0301 	orr.w	r3, r3, #1
 800987e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009880:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <HAL_UART_MspInit+0xac>)
 8009882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	60bb      	str	r3, [r7, #8]
 800988a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800988c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009890:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009892:	2302      	movs	r3, #2
 8009894:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009896:	2300      	movs	r3, #0
 8009898:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800989a:	2300      	movs	r3, #0
 800989c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800989e:	2307      	movs	r3, #7
 80098a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80098a6:	4619      	mov	r1, r3
 80098a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098ac:	f001 fd92 	bl	800b3d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80098b0:	bf00      	nop
 80098b2:	3778      	adds	r7, #120	; 0x78
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	40013800 	.word	0x40013800
 80098bc:	40021000 	.word	0x40021000

080098c0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80098c4:	4b10      	ldr	r3, [pc, #64]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098c6:	4a11      	ldr	r2, [pc, #68]	; (800990c <MX_USB_PCD_Init+0x4c>)
 80098c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098ca:	4b0f      	ldr	r3, [pc, #60]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098cc:	2208      	movs	r2, #8
 80098ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098d0:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098d2:	2202      	movs	r2, #2
 80098d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098d8:	2202      	movs	r2, #2
 80098da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098de:	2200      	movs	r2, #0
 80098e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098ee:	4b06      	ldr	r3, [pc, #24]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098f4:	4804      	ldr	r0, [pc, #16]	; (8009908 <MX_USB_PCD_Init+0x48>)
 80098f6:	f002 f9ff 	bl	800bcf8 <HAL_PCD_Init>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8009900:	f7ff fca2 	bl	8009248 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8009904:	bf00      	nop
 8009906:	bd80      	pop	{r7, pc}
 8009908:	200023b0 	.word	0x200023b0
 800990c:	40005c00 	.word	0x40005c00

08009910 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b098      	sub	sp, #96	; 0x60
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009918:	f107 030c 	add.w	r3, r7, #12
 800991c:	2254      	movs	r2, #84	; 0x54
 800991e:	2100      	movs	r1, #0
 8009920:	4618      	mov	r0, r3
 8009922:	f009 fc74 	bl	801320e <memset>
  if(pcdHandle->Instance==USB)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a11      	ldr	r2, [pc, #68]	; (8009970 <HAL_PCD_MspInit+0x60>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d11a      	bne.n	8009966 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009934:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009936:	2300      	movs	r3, #0
 8009938:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800993a:	f107 030c 	add.w	r3, r7, #12
 800993e:	4618      	mov	r0, r3
 8009940:	f003 fb06 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800994a:	f7ff fc7d 	bl	8009248 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <HAL_PCD_MspInit+0x64>)
 8009950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009952:	4a08      	ldr	r2, [pc, #32]	; (8009974 <HAL_PCD_MspInit+0x64>)
 8009954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009958:	6593      	str	r3, [r2, #88]	; 0x58
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <HAL_PCD_MspInit+0x64>)
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009962:	60bb      	str	r3, [r7, #8]
 8009964:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009966:	bf00      	nop
 8009968:	3760      	adds	r7, #96	; 0x60
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	40005c00 	.word	0x40005c00
 8009974:	40021000 	.word	0x40021000

08009978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009978:	480d      	ldr	r0, [pc, #52]	; (80099b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800997a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800997c:	480d      	ldr	r0, [pc, #52]	; (80099b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800997e:	490e      	ldr	r1, [pc, #56]	; (80099b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009980:	4a0e      	ldr	r2, [pc, #56]	; (80099bc <LoopForever+0xe>)
  movs r3, #0
 8009982:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009984:	e002      	b.n	800998c <LoopCopyDataInit>

08009986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800998a:	3304      	adds	r3, #4

0800998c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800998c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800998e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009990:	d3f9      	bcc.n	8009986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009992:	4a0b      	ldr	r2, [pc, #44]	; (80099c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009994:	4c0b      	ldr	r4, [pc, #44]	; (80099c4 <LoopForever+0x16>)
  movs r3, #0
 8009996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009998:	e001      	b.n	800999e <LoopFillZerobss>

0800999a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800999a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800999c:	3204      	adds	r2, #4

0800999e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800999e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80099a0:	d3fb      	bcc.n	800999a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80099a2:	f7ff fed7 	bl	8009754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80099a6:	f009 fbed 	bl	8013184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80099aa:	f7ff fbd3 	bl	8009154 <main>

080099ae <LoopForever>:

LoopForever:
    b LoopForever
 80099ae:	e7fe      	b.n	80099ae <LoopForever>
  ldr   r0, =_estack
 80099b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80099b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80099b8:	20000b84 	.word	0x20000b84
  ldr r2, =_sidata
 80099bc:	08016be8 	.word	0x08016be8
  ldr r2, =_sbss
 80099c0:	20000b88 	.word	0x20000b88
  ldr r4, =_ebss
 80099c4:	20007888 	.word	0x20007888

080099c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80099c8:	e7fe      	b.n	80099c8 <ADC1_2_IRQHandler>

080099ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80099d4:	2003      	movs	r0, #3
 80099d6:	f000 f8dd 	bl	8009b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80099da:	200f      	movs	r0, #15
 80099dc:	f7ff fd48 	bl	8009470 <HAL_InitTick>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	71fb      	strb	r3, [r7, #7]
 80099ea:	e001      	b.n	80099f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80099ec:	f7ff fd18 	bl	8009420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80099f0:	79fb      	ldrb	r3, [r7, #7]

}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099fc:	b480      	push	{r7}
 80099fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009a00:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <HAL_IncTick+0x1c>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <HAL_IncTick+0x20>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	4a03      	ldr	r2, [pc, #12]	; (8009a18 <HAL_IncTick+0x1c>)
 8009a0c:	6013      	str	r3, [r2, #0]
}
 8009a0e:	bf00      	nop
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	200026a4 	.word	0x200026a4
 8009a1c:	20000b18 	.word	0x20000b18

08009a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
  return uwTick;
 8009a24:	4b03      	ldr	r3, [pc, #12]	; (8009a34 <HAL_GetTick+0x14>)
 8009a26:	681b      	ldr	r3, [r3, #0]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	200026a4 	.word	0x200026a4

08009a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a48:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <__NVIC_SetPriorityGrouping+0x44>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009a54:	4013      	ands	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009a6a:	4a04      	ldr	r2, [pc, #16]	; (8009a7c <__NVIC_SetPriorityGrouping+0x44>)
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	60d3      	str	r3, [r2, #12]
}
 8009a70:	bf00      	nop
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	e000ed00 	.word	0xe000ed00

08009a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a80:	b480      	push	{r7}
 8009a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a84:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <__NVIC_GetPriorityGrouping+0x18>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	0a1b      	lsrs	r3, r3, #8
 8009a8a:	f003 0307 	and.w	r3, r3, #7
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	e000ed00 	.word	0xe000ed00

08009a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	db0b      	blt.n	8009ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	f003 021f 	and.w	r2, r3, #31
 8009ab4:	4907      	ldr	r1, [pc, #28]	; (8009ad4 <__NVIC_EnableIRQ+0x38>)
 8009ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	2001      	movs	r0, #1
 8009abe:	fa00 f202 	lsl.w	r2, r0, r2
 8009ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	e000e100 	.word	0xe000e100

08009ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	db0a      	blt.n	8009b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	490c      	ldr	r1, [pc, #48]	; (8009b24 <__NVIC_SetPriority+0x4c>)
 8009af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af6:	0112      	lsls	r2, r2, #4
 8009af8:	b2d2      	uxtb	r2, r2
 8009afa:	440b      	add	r3, r1
 8009afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b00:	e00a      	b.n	8009b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	4908      	ldr	r1, [pc, #32]	; (8009b28 <__NVIC_SetPriority+0x50>)
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	3b04      	subs	r3, #4
 8009b10:	0112      	lsls	r2, r2, #4
 8009b12:	b2d2      	uxtb	r2, r2
 8009b14:	440b      	add	r3, r1
 8009b16:	761a      	strb	r2, [r3, #24]
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	e000e100 	.word	0xe000e100
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b089      	sub	sp, #36	; 0x24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f1c3 0307 	rsb	r3, r3, #7
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	bf28      	it	cs
 8009b4a:	2304      	movcs	r3, #4
 8009b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	3304      	adds	r3, #4
 8009b52:	2b06      	cmp	r3, #6
 8009b54:	d902      	bls.n	8009b5c <NVIC_EncodePriority+0x30>
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	3b03      	subs	r3, #3
 8009b5a:	e000      	b.n	8009b5e <NVIC_EncodePriority+0x32>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6a:	43da      	mvns	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	401a      	ands	r2, r3
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7e:	43d9      	mvns	r1, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b84:	4313      	orrs	r3, r2
         );
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3724      	adds	r7, #36	; 0x24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
	...

08009b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b07      	cmp	r3, #7
 8009ba0:	d00f      	beq.n	8009bc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b06      	cmp	r3, #6
 8009ba6:	d00c      	beq.n	8009bc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	d009      	beq.n	8009bc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d006      	beq.n	8009bc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d003      	beq.n	8009bc2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009bba:	21a6      	movs	r1, #166	; 0xa6
 8009bbc:	4804      	ldr	r0, [pc, #16]	; (8009bd0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009bbe:	f7ff fb48 	bl	8009252 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff ff38 	bl	8009a38 <__NVIC_SetPriorityGrouping>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	080149dc 	.word	0x080149dc

08009bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b0f      	cmp	r3, #15
 8009be6:	d903      	bls.n	8009bf0 <HAL_NVIC_SetPriority+0x1c>
 8009be8:	21be      	movs	r1, #190	; 0xbe
 8009bea:	480e      	ldr	r0, [pc, #56]	; (8009c24 <HAL_NVIC_SetPriority+0x50>)
 8009bec:	f7ff fb31 	bl	8009252 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b0f      	cmp	r3, #15
 8009bf4:	d903      	bls.n	8009bfe <HAL_NVIC_SetPriority+0x2a>
 8009bf6:	21bf      	movs	r1, #191	; 0xbf
 8009bf8:	480a      	ldr	r0, [pc, #40]	; (8009c24 <HAL_NVIC_SetPriority+0x50>)
 8009bfa:	f7ff fb2a 	bl	8009252 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8009bfe:	f7ff ff3f 	bl	8009a80 <__NVIC_GetPriorityGrouping>
 8009c02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	6978      	ldr	r0, [r7, #20]
 8009c0a:	f7ff ff8f 	bl	8009b2c <NVIC_EncodePriority>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c14:	4611      	mov	r1, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff ff5e 	bl	8009ad8 <__NVIC_SetPriority>
}
 8009c1c:	bf00      	nop
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	080149dc 	.word	0x080149dc

08009c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da03      	bge.n	8009c42 <HAL_NVIC_EnableIRQ+0x1a>
 8009c3a:	21d2      	movs	r1, #210	; 0xd2
 8009c3c:	4805      	ldr	r0, [pc, #20]	; (8009c54 <HAL_NVIC_EnableIRQ+0x2c>)
 8009c3e:	f7ff fb08 	bl	8009252 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff ff28 	bl	8009a9c <__NVIC_EnableIRQ>
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	080149dc 	.word	0x080149dc

08009c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e184      	b.n	8009f74 <HAL_DMA_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a70      	ldr	r2, [pc, #448]	; (8009e30 <HAL_DMA_Init+0x1d8>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d04e      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a6e      	ldr	r2, [pc, #440]	; (8009e34 <HAL_DMA_Init+0x1dc>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d049      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a6d      	ldr	r2, [pc, #436]	; (8009e38 <HAL_DMA_Init+0x1e0>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d044      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a6b      	ldr	r2, [pc, #428]	; (8009e3c <HAL_DMA_Init+0x1e4>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d03f      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a6a      	ldr	r2, [pc, #424]	; (8009e40 <HAL_DMA_Init+0x1e8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d03a      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a68      	ldr	r2, [pc, #416]	; (8009e44 <HAL_DMA_Init+0x1ec>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d035      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a67      	ldr	r2, [pc, #412]	; (8009e48 <HAL_DMA_Init+0x1f0>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d030      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a65      	ldr	r2, [pc, #404]	; (8009e4c <HAL_DMA_Init+0x1f4>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d02b      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a64      	ldr	r2, [pc, #400]	; (8009e50 <HAL_DMA_Init+0x1f8>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d026      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a62      	ldr	r2, [pc, #392]	; (8009e54 <HAL_DMA_Init+0x1fc>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d021      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a61      	ldr	r2, [pc, #388]	; (8009e58 <HAL_DMA_Init+0x200>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d01c      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a5f      	ldr	r2, [pc, #380]	; (8009e5c <HAL_DMA_Init+0x204>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d017      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a5e      	ldr	r2, [pc, #376]	; (8009e60 <HAL_DMA_Init+0x208>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d012      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a5c      	ldr	r2, [pc, #368]	; (8009e64 <HAL_DMA_Init+0x20c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00d      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a5b      	ldr	r2, [pc, #364]	; (8009e68 <HAL_DMA_Init+0x210>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d008      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a59      	ldr	r2, [pc, #356]	; (8009e6c <HAL_DMA_Init+0x214>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <HAL_DMA_Init+0xba>
 8009d0a:	21a3      	movs	r1, #163	; 0xa3
 8009d0c:	4858      	ldr	r0, [pc, #352]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009d0e:	f7ff faa0 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <HAL_DMA_Init+0xdc>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	d008      	beq.n	8009d34 <HAL_DMA_Init+0xdc>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d2a:	d003      	beq.n	8009d34 <HAL_DMA_Init+0xdc>
 8009d2c:	21a4      	movs	r1, #164	; 0xa4
 8009d2e:	4850      	ldr	r0, [pc, #320]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009d30:	f7ff fa8f 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b40      	cmp	r3, #64	; 0x40
 8009d3a:	d007      	beq.n	8009d4c <HAL_DMA_Init+0xf4>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_DMA_Init+0xf4>
 8009d44:	21a5      	movs	r1, #165	; 0xa5
 8009d46:	484a      	ldr	r0, [pc, #296]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009d48:	f7ff fa83 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	2b80      	cmp	r3, #128	; 0x80
 8009d52:	d007      	beq.n	8009d64 <HAL_DMA_Init+0x10c>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_DMA_Init+0x10c>
 8009d5c:	21a6      	movs	r1, #166	; 0xa6
 8009d5e:	4844      	ldr	r0, [pc, #272]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009d60:	f7ff fa77 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00d      	beq.n	8009d88 <HAL_DMA_Init+0x130>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d74:	d008      	beq.n	8009d88 <HAL_DMA_Init+0x130>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d7e:	d003      	beq.n	8009d88 <HAL_DMA_Init+0x130>
 8009d80:	21a7      	movs	r1, #167	; 0xa7
 8009d82:	483b      	ldr	r0, [pc, #236]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009d84:	f7ff fa65 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00d      	beq.n	8009dac <HAL_DMA_Init+0x154>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d98:	d008      	beq.n	8009dac <HAL_DMA_Init+0x154>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009da2:	d003      	beq.n	8009dac <HAL_DMA_Init+0x154>
 8009da4:	21a8      	movs	r1, #168	; 0xa8
 8009da6:	4832      	ldr	r0, [pc, #200]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009da8:	f7ff fa53 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d007      	beq.n	8009dc4 <HAL_DMA_Init+0x16c>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d003      	beq.n	8009dc4 <HAL_DMA_Init+0x16c>
 8009dbc:	21a9      	movs	r1, #169	; 0xa9
 8009dbe:	482c      	ldr	r0, [pc, #176]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009dc0:	f7ff fa47 	bl	8009252 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d012      	beq.n	8009df2 <HAL_DMA_Init+0x19a>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd4:	d00d      	beq.n	8009df2 <HAL_DMA_Init+0x19a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dde:	d008      	beq.n	8009df2 <HAL_DMA_Init+0x19a>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009de8:	d003      	beq.n	8009df2 <HAL_DMA_Init+0x19a>
 8009dea:	21aa      	movs	r1, #170	; 0xaa
 8009dec:	4820      	ldr	r0, [pc, #128]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009dee:	f7ff fa30 	bl	8009252 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b73      	cmp	r3, #115	; 0x73
 8009df8:	d903      	bls.n	8009e02 <HAL_DMA_Init+0x1aa>
 8009dfa:	21ac      	movs	r1, #172	; 0xac
 8009dfc:	481c      	ldr	r0, [pc, #112]	; (8009e70 <HAL_DMA_Init+0x218>)
 8009dfe:	f7ff fa28 	bl	8009252 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	4b1a      	ldr	r3, [pc, #104]	; (8009e74 <HAL_DMA_Init+0x21c>)
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d83a      	bhi.n	8009e84 <HAL_DMA_Init+0x22c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <HAL_DMA_Init+0x220>)
 8009e16:	4413      	add	r3, r2
 8009e18:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <HAL_DMA_Init+0x224>)
 8009e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1e:	091b      	lsrs	r3, r3, #4
 8009e20:	009a      	lsls	r2, r3, #2
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <HAL_DMA_Init+0x228>)
 8009e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8009e2c:	e039      	b.n	8009ea2 <HAL_DMA_Init+0x24a>
 8009e2e:	bf00      	nop
 8009e30:	40020008 	.word	0x40020008
 8009e34:	4002001c 	.word	0x4002001c
 8009e38:	40020030 	.word	0x40020030
 8009e3c:	40020044 	.word	0x40020044
 8009e40:	40020058 	.word	0x40020058
 8009e44:	4002006c 	.word	0x4002006c
 8009e48:	40020080 	.word	0x40020080
 8009e4c:	40020094 	.word	0x40020094
 8009e50:	40020408 	.word	0x40020408
 8009e54:	4002041c 	.word	0x4002041c
 8009e58:	40020430 	.word	0x40020430
 8009e5c:	40020444 	.word	0x40020444
 8009e60:	40020458 	.word	0x40020458
 8009e64:	4002046c 	.word	0x4002046c
 8009e68:	40020480 	.word	0x40020480
 8009e6c:	40020494 	.word	0x40020494
 8009e70:	08014a18 	.word	0x08014a18
 8009e74:	40020407 	.word	0x40020407
 8009e78:	bffdfff8 	.word	0xbffdfff8
 8009e7c:	cccccccd 	.word	0xcccccccd
 8009e80:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b3c      	ldr	r3, [pc, #240]	; (8009f7c <HAL_DMA_Init+0x324>)
 8009e8c:	4413      	add	r3, r2
 8009e8e:	4a3c      	ldr	r2, [pc, #240]	; (8009f80 <HAL_DMA_Init+0x328>)
 8009e90:	fba2 2303 	umull	r2, r3, r2, r3
 8009e94:	091b      	lsrs	r3, r3, #4
 8009e96:	009a      	lsls	r2, r3, #2
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a39      	ldr	r2, [pc, #228]	; (8009f84 <HAL_DMA_Init+0x32c>)
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ebc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9bf 	bl	800a278 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f02:	d102      	bne.n	8009f0a <HAL_DMA_Init+0x2b2>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009f1e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d010      	beq.n	8009f4a <HAL_DMA_Init+0x2f2>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d80c      	bhi.n	8009f4a <HAL_DMA_Init+0x2f2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f9df 	bl	800a2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009f46:	605a      	str	r2, [r3, #4]
 8009f48:	e008      	b.n	8009f5c <HAL_DMA_Init+0x304>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	bffdfbf8 	.word	0xbffdfbf8
 8009f80:	cccccccd 	.word	0xcccccccd
 8009f84:	40020400 	.word	0x40020400

08009f88 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <HAL_DMA_Start_IT+0x20>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fa6:	d304      	bcc.n	8009fb2 <HAL_DMA_Start_IT+0x2a>
 8009fa8:	f240 11ab 	movw	r1, #427	; 0x1ab
 8009fac:	483a      	ldr	r0, [pc, #232]	; (800a098 <HAL_DMA_Start_IT+0x110>)
 8009fae:	f7ff f950 	bl	8009252 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_DMA_Start_IT+0x38>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e066      	b.n	800a08e <HAL_DMA_Start_IT+0x106>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d155      	bne.n	800a080 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0201 	bic.w	r2, r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 f8fe 	bl	800a1fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 020e 	orr.w	r2, r2, #14
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	e00f      	b.n	800a038 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0204 	bic.w	r2, r2, #4
 800a026:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 020a 	orr.w	r2, r2, #10
 800a036:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d007      	beq.n	800a056 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a054:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a06c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0201 	orr.w	r2, r2, #1
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e005      	b.n	800a08c <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a088:	2302      	movs	r3, #2
 800a08a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	08014a18 	.word	0x08014a18

0800a09c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b8:	f003 031f 	and.w	r3, r3, #31
 800a0bc:	2204      	movs	r2, #4
 800a0be:	409a      	lsls	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d026      	beq.n	800a116 <HAL_DMA_IRQHandler+0x7a>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d021      	beq.n	800a116 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d107      	bne.n	800a0f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f022 0204 	bic.w	r2, r2, #4
 800a0ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f4:	f003 021f 	and.w	r2, r3, #31
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	2104      	movs	r1, #4
 800a0fe:	fa01 f202 	lsl.w	r2, r1, r2
 800a102:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d071      	beq.n	800a1f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a114:	e06c      	b.n	800a1f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11a:	f003 031f 	and.w	r3, r3, #31
 800a11e:	2202      	movs	r2, #2
 800a120:	409a      	lsls	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4013      	ands	r3, r2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d02e      	beq.n	800a188 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d029      	beq.n	800a188 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 020a 	bic.w	r2, r2, #10
 800a150:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15e:	f003 021f 	and.w	r2, r3, #31
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	2102      	movs	r1, #2
 800a168:	fa01 f202 	lsl.w	r2, r1, r2
 800a16c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d038      	beq.n	800a1f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a186:	e033      	b.n	800a1f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	f003 031f 	and.w	r3, r3, #31
 800a190:	2208      	movs	r2, #8
 800a192:	409a      	lsls	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4013      	ands	r3, r2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d02a      	beq.n	800a1f2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f003 0308 	and.w	r3, r3, #8
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d025      	beq.n	800a1f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 020e 	bic.w	r2, r2, #14
 800a1b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ba:	f003 021f 	and.w	r2, r3, #31
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	fa01 f202 	lsl.w	r2, r1, r2
 800a1c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
}
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	607a      	str	r2, [r7, #4]
 800a206:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a210:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a222:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a228:	f003 021f 	and.w	r2, r3, #31
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	2101      	movs	r1, #1
 800a232:	fa01 f202 	lsl.w	r2, r1, r2
 800a236:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	2b10      	cmp	r3, #16
 800a246:	d108      	bne.n	800a25a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a258:	e007      	b.n	800a26a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	60da      	str	r2, [r3, #12]
}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
	...

0800a278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	461a      	mov	r2, r3
 800a286:	4b16      	ldr	r3, [pc, #88]	; (800a2e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a288:	429a      	cmp	r2, r3
 800a28a:	d802      	bhi.n	800a292 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a28c:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e001      	b.n	800a296 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a292:	4b15      	ldr	r3, [pc, #84]	; (800a2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a294:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	3b08      	subs	r3, #8
 800a2a2:	4a12      	ldr	r2, [pc, #72]	; (800a2ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a8:	091b      	lsrs	r3, r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b0:	089b      	lsrs	r3, r3, #2
 800a2b2:	009a      	lsls	r2, r3, #2
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a0b      	ldr	r2, [pc, #44]	; (800a2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a2c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	409a      	lsls	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40020407 	.word	0x40020407
 800a2e4:	40020800 	.word	0x40020800
 800a2e8:	40020820 	.word	0x40020820
 800a2ec:	cccccccd 	.word	0xcccccccd
 800a2f0:	40020880 	.word	0x40020880

0800a2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4b0b      	ldr	r3, [pc, #44]	; (800a334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	461a      	mov	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a08      	ldr	r2, [pc, #32]	; (800a338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a316:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	f003 031f 	and.w	r3, r3, #31
 800a320:	2201      	movs	r2, #1
 800a322:	409a      	lsls	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a328:	bf00      	nop
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	1000823f 	.word	0x1000823f
 800a338:	40020940 	.word	0x40020940

0800a33c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e296      	b.n	800a87c <HAL_FDCAN_Init+0x540>
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a8f      	ldr	r2, [pc, #572]	; (800a590 <HAL_FDCAN_Init+0x254>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00e      	beq.n	800a376 <HAL_FDCAN_Init+0x3a>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a8d      	ldr	r2, [pc, #564]	; (800a594 <HAL_FDCAN_Init+0x258>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d009      	beq.n	800a376 <HAL_FDCAN_Init+0x3a>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a8c      	ldr	r2, [pc, #560]	; (800a598 <HAL_FDCAN_Init+0x25c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d004      	beq.n	800a376 <HAL_FDCAN_Init+0x3a>
 800a36c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800a370:	488a      	ldr	r0, [pc, #552]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a372:	f7fe ff6e 	bl	8009252 <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a85      	ldr	r2, [pc, #532]	; (800a590 <HAL_FDCAN_Init+0x254>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d144      	bne.n	800a40a <HAL_FDCAN_Init+0xce>
  {
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d040      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d03c      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d038      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d034      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d030      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b05      	cmp	r3, #5
 800a3ae:	d02c      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2b06      	cmp	r3, #6
 800a3b6:	d028      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	2b07      	cmp	r3, #7
 800a3be:	d024      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d020      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	2b09      	cmp	r3, #9
 800a3ce:	d01c      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	2b0a      	cmp	r3, #10
 800a3d6:	d018      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	2b0b      	cmp	r3, #11
 800a3de:	d014      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2b0c      	cmp	r3, #12
 800a3e6:	d010      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	2b0d      	cmp	r3, #13
 800a3ee:	d00c      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b0e      	cmp	r3, #14
 800a3f6:	d008      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	2b0f      	cmp	r3, #15
 800a3fe:	d004      	beq.n	800a40a <HAL_FDCAN_Init+0xce>
 800a400:	f240 112d 	movw	r1, #301	; 0x12d
 800a404:	4865      	ldr	r0, [pc, #404]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a406:	f7fe ff24 	bl	8009252 <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00e      	beq.n	800a430 <HAL_FDCAN_Init+0xf4>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41a:	d009      	beq.n	800a430 <HAL_FDCAN_Init+0xf4>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a424:	d004      	beq.n	800a430 <HAL_FDCAN_Init+0xf4>
 800a426:	f240 112f 	movw	r1, #303	; 0x12f
 800a42a:	485c      	ldr	r0, [pc, #368]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a42c:	f7fe ff11 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d014      	beq.n	800a462 <HAL_FDCAN_Init+0x126>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d010      	beq.n	800a462 <HAL_FDCAN_Init+0x126>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d00c      	beq.n	800a462 <HAL_FDCAN_Init+0x126>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d008      	beq.n	800a462 <HAL_FDCAN_Init+0x126>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2b04      	cmp	r3, #4
 800a456:	d004      	beq.n	800a462 <HAL_FDCAN_Init+0x126>
 800a458:	f44f 7198 	mov.w	r1, #304	; 0x130
 800a45c:	484f      	ldr	r0, [pc, #316]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a45e:	f7fe fef8 	bl	8009252 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	7c1b      	ldrb	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d008      	beq.n	800a47c <HAL_FDCAN_Init+0x140>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7c1b      	ldrb	r3, [r3, #16]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d004      	beq.n	800a47c <HAL_FDCAN_Init+0x140>
 800a472:	f240 1131 	movw	r1, #305	; 0x131
 800a476:	4849      	ldr	r0, [pc, #292]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a478:	f7fe feeb 	bl	8009252 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	7c5b      	ldrb	r3, [r3, #17]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d008      	beq.n	800a496 <HAL_FDCAN_Init+0x15a>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7c5b      	ldrb	r3, [r3, #17]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d004      	beq.n	800a496 <HAL_FDCAN_Init+0x15a>
 800a48c:	f44f 7199 	mov.w	r1, #306	; 0x132
 800a490:	4842      	ldr	r0, [pc, #264]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a492:	f7fe fede 	bl	8009252 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7c9b      	ldrb	r3, [r3, #18]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d008      	beq.n	800a4b0 <HAL_FDCAN_Init+0x174>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	7c9b      	ldrb	r3, [r3, #18]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d004      	beq.n	800a4b0 <HAL_FDCAN_Init+0x174>
 800a4a6:	f240 1133 	movw	r1, #307	; 0x133
 800a4aa:	483c      	ldr	r0, [pc, #240]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a4ac:	f7fe fed1 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d004      	beq.n	800a4c2 <HAL_FDCAN_Init+0x186>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c0:	d904      	bls.n	800a4cc <HAL_FDCAN_Init+0x190>
 800a4c2:	f44f 719a 	mov.w	r1, #308	; 0x134
 800a4c6:	4835      	ldr	r0, [pc, #212]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a4c8:	f7fe fec3 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <HAL_FDCAN_Init+0x1a0>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b80      	cmp	r3, #128	; 0x80
 800a4da:	d904      	bls.n	800a4e6 <HAL_FDCAN_Init+0x1aa>
 800a4dc:	f240 1135 	movw	r1, #309	; 0x135
 800a4e0:	482e      	ldr	r0, [pc, #184]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a4e2:	f7fe feb6 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <HAL_FDCAN_Init+0x1bc>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f6:	d904      	bls.n	800a502 <HAL_FDCAN_Init+0x1c6>
 800a4f8:	f44f 719b 	mov.w	r1, #310	; 0x136
 800a4fc:	4827      	ldr	r0, [pc, #156]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a4fe:	f7fe fea8 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <HAL_FDCAN_Init+0x1d6>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	2b80      	cmp	r3, #128	; 0x80
 800a510:	d904      	bls.n	800a51c <HAL_FDCAN_Init+0x1e0>
 800a512:	f240 1137 	movw	r1, #311	; 0x137
 800a516:	4821      	ldr	r0, [pc, #132]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a518:	f7fe fe9b 	bl	8009252 <assert_failed>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a524:	d13c      	bne.n	800a5a0 <HAL_FDCAN_Init+0x264>
  {
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_FDCAN_Init+0x1fa>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b20      	cmp	r3, #32
 800a534:	d904      	bls.n	800a540 <HAL_FDCAN_Init+0x204>
 800a536:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800a53a:	4818      	ldr	r0, [pc, #96]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a53c:	f7fe fe89 	bl	8009252 <assert_failed>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a544:	2b00      	cmp	r3, #0
 800a546:	d003      	beq.n	800a550 <HAL_FDCAN_Init+0x214>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54c:	2b10      	cmp	r3, #16
 800a54e:	d904      	bls.n	800a55a <HAL_FDCAN_Init+0x21e>
 800a550:	f240 113b 	movw	r1, #315	; 0x13b
 800a554:	4811      	ldr	r0, [pc, #68]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a556:	f7fe fe7c 	bl	8009252 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_FDCAN_Init+0x22e>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	2b20      	cmp	r3, #32
 800a568:	d904      	bls.n	800a574 <HAL_FDCAN_Init+0x238>
 800a56a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800a56e:	480b      	ldr	r0, [pc, #44]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a570:	f7fe fe6f 	bl	8009252 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <HAL_FDCAN_Init+0x248>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a580:	2b10      	cmp	r3, #16
 800a582:	d90d      	bls.n	800a5a0 <HAL_FDCAN_Init+0x264>
 800a584:	f240 113d 	movw	r1, #317	; 0x13d
 800a588:	4804      	ldr	r0, [pc, #16]	; (800a59c <HAL_FDCAN_Init+0x260>)
 800a58a:	f7fe fe62 	bl	8009252 <assert_failed>
 800a58e:	e007      	b.n	800a5a0 <HAL_FDCAN_Init+0x264>
 800a590:	40006400 	.word	0x40006400
 800a594:	40006800 	.word	0x40006800
 800a598:	40006c00 	.word	0x40006c00
 800a59c:	08014a50 	.word	0x08014a50
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	2b1c      	cmp	r3, #28
 800a5a6:	d904      	bls.n	800a5b2 <HAL_FDCAN_Init+0x276>
 800a5a8:	f240 113f 	movw	r1, #319	; 0x13f
 800a5ac:	4887      	ldr	r0, [pc, #540]	; (800a7cc <HAL_FDCAN_Init+0x490>)
 800a5ae:	f7fe fe50 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	2b08      	cmp	r3, #8
 800a5b8:	d904      	bls.n	800a5c4 <HAL_FDCAN_Init+0x288>
 800a5ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5be:	4883      	ldr	r0, [pc, #524]	; (800a7cc <HAL_FDCAN_Init+0x490>)
 800a5c0:	f7fe fe47 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <HAL_FDCAN_Init+0x2a4>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5d4:	d004      	beq.n	800a5e0 <HAL_FDCAN_Init+0x2a4>
 800a5d6:	f240 1141 	movw	r1, #321	; 0x141
 800a5da:	487c      	ldr	r0, [pc, #496]	; (800a7cc <HAL_FDCAN_Init+0x490>)
 800a5dc:	f7fe fe39 	bl	8009252 <assert_failed>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d106      	bne.n	800a5fa <HAL_FDCAN_Init+0x2be>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fe fb95 	bl	8008d24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	699a      	ldr	r2, [r3, #24]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0210 	bic.w	r2, r2, #16
 800a608:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a60a:	f7ff fa09 	bl	8009a20 <HAL_GetTick>
 800a60e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a610:	e012      	b.n	800a638 <HAL_FDCAN_Init+0x2fc>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a612:	f7ff fa05 	bl	8009a20 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b0a      	cmp	r3, #10
 800a61e:	d90b      	bls.n	800a638 <HAL_FDCAN_Init+0x2fc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a624:	f043 0201 	orr.w	r2, r3, #1
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2203      	movs	r2, #3
 800a630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e121      	b.n	800a87c <HAL_FDCAN_Init+0x540>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f003 0308 	and.w	r3, r3, #8
 800a642:	2b08      	cmp	r3, #8
 800a644:	d0e5      	beq.n	800a612 <HAL_FDCAN_Init+0x2d6>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	699a      	ldr	r2, [r3, #24]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f042 0201 	orr.w	r2, r2, #1
 800a654:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a656:	f7ff f9e3 	bl	8009a20 <HAL_GetTick>
 800a65a:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a65c:	e012      	b.n	800a684 <HAL_FDCAN_Init+0x348>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a65e:	f7ff f9df 	bl	8009a20 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	2b0a      	cmp	r3, #10
 800a66a:	d90b      	bls.n	800a684 <HAL_FDCAN_Init+0x348>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a670:	f043 0201 	orr.w	r2, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2203      	movs	r2, #3
 800a67c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	e0fb      	b.n	800a87c <HAL_FDCAN_Init+0x540>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0e5      	beq.n	800a65e <HAL_FDCAN_Init+0x322>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	699a      	ldr	r2, [r3, #24]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0202 	orr.w	r2, r2, #2
 800a6a0:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a4a      	ldr	r2, [pc, #296]	; (800a7d0 <HAL_FDCAN_Init+0x494>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d103      	bne.n	800a6b4 <HAL_FDCAN_Init+0x378>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800a6ac:	4a49      	ldr	r2, [pc, #292]	; (800a7d4 <HAL_FDCAN_Init+0x498>)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	7c1b      	ldrb	r3, [r3, #16]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d108      	bne.n	800a6ce <HAL_FDCAN_Init+0x392>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	699a      	ldr	r2, [r3, #24]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ca:	619a      	str	r2, [r3, #24]
 800a6cc:	e007      	b.n	800a6de <HAL_FDCAN_Init+0x3a2>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	699a      	ldr	r2, [r3, #24]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7c5b      	ldrb	r3, [r3, #17]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d108      	bne.n	800a6f8 <HAL_FDCAN_Init+0x3bc>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6f4:	619a      	str	r2, [r3, #24]
 800a6f6:	e007      	b.n	800a708 <HAL_FDCAN_Init+0x3cc>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	699a      	ldr	r2, [r3, #24]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a706:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	7c9b      	ldrb	r3, [r3, #18]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d108      	bne.n	800a722 <HAL_FDCAN_Init+0x3e6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	699a      	ldr	r2, [r3, #24]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a71e:	619a      	str	r2, [r3, #24]
 800a720:	e007      	b.n	800a732 <HAL_FDCAN_Init+0x3f6>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a730:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800a756:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	691a      	ldr	r2, [r3, #16]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f022 0210 	bic.w	r2, r2, #16
 800a766:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d108      	bne.n	800a782 <HAL_FDCAN_Init+0x446>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	699a      	ldr	r2, [r3, #24]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f042 0204 	orr.w	r2, r2, #4
 800a77e:	619a      	str	r2, [r3, #24]
 800a780:	e032      	b.n	800a7e8 <HAL_FDCAN_Init+0x4ac>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d02e      	beq.n	800a7e8 <HAL_FDCAN_Init+0x4ac>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d022      	beq.n	800a7d8 <HAL_FDCAN_Init+0x49c>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	699a      	ldr	r2, [r3, #24]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7a0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f042 0210 	orr.w	r2, r2, #16
 800a7b0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d116      	bne.n	800a7e8 <HAL_FDCAN_Init+0x4ac>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f042 0220 	orr.w	r2, r2, #32
 800a7c8:	619a      	str	r2, [r3, #24]
 800a7ca:	e00d      	b.n	800a7e8 <HAL_FDCAN_Init+0x4ac>
 800a7cc:	08014a50 	.word	0x08014a50
 800a7d0:	40006400 	.word	0x40006400
 800a7d4:	40006500 	.word	0x40006500
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699a      	ldr	r2, [r3, #24]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f042 0220 	orr.w	r2, r2, #32
 800a7e6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a7f8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a800:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	3b01      	subs	r3, #1
 800a80a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a810:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a812:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a81c:	d115      	bne.n	800a84a <HAL_FDCAN_Init+0x50e>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a822:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	3b01      	subs	r3, #1
 800a82a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a82c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	3b01      	subs	r3, #1
 800a834:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a836:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	3b01      	subs	r3, #1
 800a840:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a846:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a848:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fccf 	bl	800b204 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b01      	cmp	r3, #1
 800a896:	d110      	bne.n	800a8ba <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 0201 	bic.w	r2, r2, #1
 800a8ae:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e006      	b.n	800a8c8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8be:	f043 0204 	orr.w	r2, r3, #4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
  }
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  uint32_t PutIndex;

  /* Check function parameters */
  assert_param(IS_FDCAN_ID_TYPE(pTxHeader->IdType));
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f0:	d004      	beq.n	800a8fc <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
 800a8f2:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800a8f6:	487e      	ldr	r0, [pc, #504]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800a8f8:	f7fe fcab 	bl	8009252 <assert_failed>
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <HAL_FDCAN_AddMessageToTxFifoQ+0x46>
  {
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x7FFU));
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a90c:	d30f      	bcc.n	800a92e <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
 800a90e:	f640 0143 	movw	r1, #2115	; 0x843
 800a912:	4877      	ldr	r0, [pc, #476]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800a914:	f7fe fc9d 	bl	8009252 <assert_failed>
 800a918:	e009      	b.n	800a92e <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->Identifier, 0x1FFFFFFFU));
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a922:	d304      	bcc.n	800a92e <HAL_FDCAN_AddMessageToTxFifoQ+0x5a>
 800a924:	f640 0147 	movw	r1, #2119	; 0x847
 800a928:	4871      	ldr	r0, [pc, #452]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800a92a:	f7fe fc92 	bl	8009252 <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_TYPE(pTxHeader->TxFrameType));
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d009      	beq.n	800a94a <HAL_FDCAN_AddMessageToTxFifoQ+0x76>
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93e:	d004      	beq.n	800a94a <HAL_FDCAN_AddMessageToTxFifoQ+0x76>
 800a940:	f640 0149 	movw	r1, #2121	; 0x849
 800a944:	486a      	ldr	r0, [pc, #424]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800a946:	f7fe fc84 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_DLC(pTxHeader->DataLength));
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d04f      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95a:	d04a      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a964:	d045      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a96e:	d040      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a978:	d03b      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a982:	d036      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a98c:	d031      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800a996:	d02c      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a9a0:	d027      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800a9aa:	d022      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800a9b4:	d01d      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800a9be:	d018      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a9c8:	d013      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800a9d2:	d00e      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800a9dc:	d009      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800a9e6:	d004      	beq.n	800a9f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x11e>
 800a9e8:	f640 014a 	movw	r1, #2122	; 0x84a
 800a9ec:	4840      	ldr	r0, [pc, #256]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800a9ee:	f7fe fc30 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_ESI(pTxHeader->ErrorStateIndicator));
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <HAL_FDCAN_AddMessageToTxFifoQ+0x13a>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa02:	d004      	beq.n	800aa0e <HAL_FDCAN_AddMessageToTxFifoQ+0x13a>
 800aa04:	f640 014b 	movw	r1, #2123	; 0x84b
 800aa08:	4839      	ldr	r0, [pc, #228]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800aa0a:	f7fe fc22 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d009      	beq.n	800aa2a <HAL_FDCAN_AddMessageToTxFifoQ+0x156>
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa1e:	d004      	beq.n	800aa2a <HAL_FDCAN_AddMessageToTxFifoQ+0x156>
 800aa20:	f640 014c 	movw	r1, #2124	; 0x84c
 800aa24:	4832      	ldr	r0, [pc, #200]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800aa26:	f7fe fc14 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <HAL_FDCAN_AddMessageToTxFifoQ+0x172>
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa3a:	d004      	beq.n	800aa46 <HAL_FDCAN_AddMessageToTxFifoQ+0x172>
 800aa3c:	f640 014d 	movw	r1, #2125	; 0x84d
 800aa40:	482b      	ldr	r0, [pc, #172]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800aa42:	f7fe fc06 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d009      	beq.n	800aa62 <HAL_FDCAN_AddMessageToTxFifoQ+0x18e>
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa56:	d004      	beq.n	800aa62 <HAL_FDCAN_AddMessageToTxFifoQ+0x18e>
 800aa58:	f640 014e 	movw	r1, #2126	; 0x84e
 800aa5c:	4824      	ldr	r0, [pc, #144]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800aa5e:	f7fe fbf8 	bl	8009252 <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	2bff      	cmp	r3, #255	; 0xff
 800aa68:	d904      	bls.n	800aa74 <HAL_FDCAN_AddMessageToTxFifoQ+0x1a0>
 800aa6a:	f640 014f 	movw	r1, #2127	; 0x84f
 800aa6e:	4820      	ldr	r0, [pc, #128]	; (800aaf0 <HAL_FDCAN_AddMessageToTxFifoQ+0x21c>)
 800aa70:	f7fe fbef 	bl	8009252 <assert_failed>

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d12c      	bne.n	800aada <HAL_FDCAN_AddMessageToTxFifoQ+0x206>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800aa88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d007      	beq.n	800aaa0 <HAL_FDCAN_AddMessageToTxFifoQ+0x1cc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e023      	b.n	800aae8 <HAL_FDCAN_AddMessageToTxFifoQ+0x214>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f000 fc10 	bl	800b2dc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2101      	movs	r1, #1
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	fa01 f202 	lsl.w	r2, r1, r2
 800aac8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800aacc:	2201      	movs	r2, #1
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	409a      	lsls	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e006      	b.n	800aae8 <HAL_FDCAN_AddMessageToTxFifoQ+0x214>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aade:	f043 0208 	orr.w	r2, r3, #8
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
  }
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08014a50 	.word	0x08014a50

0800aaf4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08a      	sub	sp, #40	; 0x28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab08:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b40      	cmp	r3, #64	; 0x40
 800ab0e:	d007      	beq.n	800ab20 <HAL_FDCAN_GetRxMessage+0x2c>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b41      	cmp	r3, #65	; 0x41
 800ab14:	d004      	beq.n	800ab20 <HAL_FDCAN_GetRxMessage+0x2c>
 800ab16:	f640 01b6 	movw	r1, #2230	; 0x8b6
 800ab1a:	4867      	ldr	r0, [pc, #412]	; (800acb8 <HAL_FDCAN_GetRxMessage+0x1c4>)
 800ab1c:	f7fe fb99 	bl	8009252 <assert_failed>

  if (state == HAL_FDCAN_STATE_BUSY)
 800ab20:	7efb      	ldrb	r3, [r7, #27]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	f040 80bc 	bne.w	800aca0 <HAL_FDCAN_GetRxMessage+0x1ac>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b40      	cmp	r3, #64	; 0x40
 800ab2c:	d121      	bne.n	800ab72 <HAL_FDCAN_GetRxMessage+0x7e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d107      	bne.n	800ab4e <HAL_FDCAN_GetRxMessage+0x5a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e0af      	b.n	800acae <HAL_FDCAN_GetRxMessage+0x1ba>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab56:	0a1b      	lsrs	r3, r3, #8
 800ab58:	f003 0303 	and.w	r3, r3, #3
 800ab5c:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ab62:	69fa      	ldr	r2, [r7, #28]
 800ab64:	4613      	mov	r3, r2
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	4413      	add	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	440b      	add	r3, r1
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab70:	e020      	b.n	800abb4 <HAL_FDCAN_GetRxMessage+0xc0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab7a:	f003 030f 	and.w	r3, r3, #15
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d107      	bne.n	800ab92 <HAL_FDCAN_GetRxMessage+0x9e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e08d      	b.n	800acae <HAL_FDCAN_GetRxMessage+0x1ba>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aba6:	69fa      	ldr	r2, [r7, #28]
 800aba8:	4613      	mov	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	4413      	add	r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	440b      	add	r3, r1
 800abb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d107      	bne.n	800abd8 <HAL_FDCAN_GetRxMessage+0xe4>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	0c9b      	lsrs	r3, r3, #18
 800abce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e005      	b.n	800abe4 <HAL_FDCAN_GetRxMessage+0xf0>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	3304      	adds	r3, #4
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	0e1b      	lsrs	r3, r3, #24
 800ac36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	0fda      	lsrs	r2, r3, #31
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800ac52:	2300      	movs	r3, #0
 800ac54:	623b      	str	r3, [r7, #32]
 800ac56:	e00a      	b.n	800ac6e <HAL_FDCAN_GetRxMessage+0x17a>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	440b      	add	r3, r1
 800ac64:	7812      	ldrb	r2, [r2, #0]
 800ac66:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	623b      	str	r3, [r7, #32]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	0c1b      	lsrs	r3, r3, #16
 800ac74:	4a11      	ldr	r2, [pc, #68]	; (800acbc <HAL_FDCAN_GetRxMessage+0x1c8>)
 800ac76:	5cd3      	ldrb	r3, [r2, r3]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d3eb      	bcc.n	800ac58 <HAL_FDCAN_GetRxMessage+0x164>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2b40      	cmp	r3, #64	; 0x40
 800ac84:	d105      	bne.n	800ac92 <HAL_FDCAN_GetRxMessage+0x19e>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69fa      	ldr	r2, [r7, #28]
 800ac8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800ac90:	e004      	b.n	800ac9c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e006      	b.n	800acae <HAL_FDCAN_GetRxMessage+0x1ba>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca4:	f043 0208 	orr.w	r2, r3, #8
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
  }
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3728      	adds	r7, #40	; 0x28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	08014a50 	.word	0x08014a50
 800acbc:	08016acc 	.word	0x08016acc

0800acc0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800acd2:	75fb      	strb	r3, [r7, #23]
  uint32_t ITs_lines_selection;

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d004      	beq.n	800ace8 <HAL_FDCAN_ActivateNotification+0x28>
 800acde:	f640 2189 	movw	r1, #2697	; 0xa89
 800ace2:	4876      	ldr	r0, [pc, #472]	; (800aebc <HAL_FDCAN_ActivateNotification+0x1fc>)
 800ace4:	f7fe fab5 	bl	8009252 <assert_failed>
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <HAL_FDCAN_ActivateNotification+0x48>
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <HAL_FDCAN_ActivateNotification+0x3e>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b07      	cmp	r3, #7
 800acfc:	d904      	bls.n	800ad08 <HAL_FDCAN_ActivateNotification+0x48>
 800acfe:	f640 218c 	movw	r1, #2700	; 0xa8c
 800ad02:	486e      	ldr	r0, [pc, #440]	; (800aebc <HAL_FDCAN_ActivateNotification+0x1fc>)
 800ad04:	f7fe faa5 	bl	8009252 <assert_failed>
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d003      	beq.n	800ad16 <HAL_FDCAN_ActivateNotification+0x56>
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	f040 80c8 	bne.w	800aea6 <HAL_FDCAN_ActivateNotification+0x1e6>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	f003 0307 	and.w	r3, r3, #7
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d004      	beq.n	800ad32 <HAL_FDCAN_ActivateNotification+0x72>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d03b      	beq.n	800adaa <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <HAL_FDCAN_ActivateNotification+0x86>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d031      	beq.n	800adaa <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d027      	beq.n	800adaa <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <HAL_FDCAN_ActivateNotification+0xae>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	f003 0308 	and.w	r3, r3, #8
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01d      	beq.n	800adaa <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d004      	beq.n	800ad82 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f003 0310 	and.w	r3, r3, #16
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d013      	beq.n	800adaa <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d004      	beq.n	800ad96 <HAL_FDCAN_ActivateNotification+0xd6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f003 0320 	and.w	r3, r3, #32
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <HAL_FDCAN_ActivateNotification+0xea>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00c      	beq.n	800adba <HAL_FDCAN_ActivateNotification+0xfa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d107      	bne.n	800adba <HAL_FDCAN_ActivateNotification+0xfa>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f042 0201 	orr.w	r2, r2, #1
 800adb8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <HAL_FDCAN_ActivateNotification+0x10e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d13b      	bne.n	800ae46 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <HAL_FDCAN_ActivateNotification+0x122>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d131      	bne.n	800ae46 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <HAL_FDCAN_ActivateNotification+0x136>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f003 0304 	and.w	r3, r3, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d127      	bne.n	800ae46 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d004      	beq.n	800ae0a <HAL_FDCAN_ActivateNotification+0x14a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d11d      	bne.n	800ae46 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <HAL_FDCAN_ActivateNotification+0x15e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f003 0310 	and.w	r3, r3, #16
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d113      	bne.n	800ae46 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <HAL_FDCAN_ActivateNotification+0x172>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d109      	bne.n	800ae46 <HAL_FDCAN_ActivateNotification+0x186>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00c      	beq.n	800ae56 <HAL_FDCAN_ActivateNotification+0x196>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <HAL_FDCAN_ActivateNotification+0x196>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f042 0202 	orr.w	r2, r2, #2
 800ae54:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <HAL_FDCAN_ActivateNotification+0x1b4>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <HAL_FDCAN_ActivateNotification+0x1d2>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e006      	b.n	800aeb4 <HAL_FDCAN_ActivateNotification+0x1f4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeaa:	f043 0202 	orr.w	r2, r3, #2
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
  }
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	08014a50 	.word	0x08014a50

0800aec0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08a      	sub	sp, #40	; 0x28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aece:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800aed2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aedc:	4013      	ands	r3, r2
 800aede:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	6a3a      	ldr	r2, [r7, #32]
 800aef4:	4013      	ands	r3, r2
 800aef6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aefe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af02:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0a:	69fa      	ldr	r2, [r7, #28]
 800af0c:	4013      	ands	r3, r2
 800af0e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af16:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800af1a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af22:	69ba      	ldr	r2, [r7, #24]
 800af24:	4013      	ands	r3, r2
 800af26:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800af32:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4013      	ands	r3, r2
 800af3e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00d      	beq.n	800af6a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d006      	beq.n	800af6a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2240      	movs	r2, #64	; 0x40
 800af62:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f92e 	bl	800b1c6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01b      	beq.n	800afb0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af82:	2b00      	cmp	r3, #0
 800af84:	d014      	beq.n	800afb0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800af8e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	4013      	ands	r3, r2
 800af9c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afa6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800afa8:	6939      	ldr	r1, [r7, #16]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f8ec 	bl	800b188 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d007      	beq.n	800afc6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afbc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800afbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f8b6 	bl	800b132 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d007      	beq.n	800afdc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6a3a      	ldr	r2, [r7, #32]
 800afd2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800afd4:	6a39      	ldr	r1, [r7, #32]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7f6 fdb4 	bl	8001b44 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800afea:	69f9      	ldr	r1, [r7, #28]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f8ab 	bl	800b148 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00e      	beq.n	800b01e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b016:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f8a0 	bl	800b15e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d01a      	beq.n	800b062 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b036:	2b00      	cmp	r3, #0
 800b038:	d013      	beq.n	800b062 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b042:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4013      	ands	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2280      	movs	r2, #128	; 0x80
 800b058:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f888 	bl	800b172 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00e      	beq.n	800b08e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d007      	beq.n	800b08e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b086:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f888 	bl	800b19e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00e      	beq.n	800b0ba <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b0b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f87c 	bl	800b1b2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d011      	beq.n	800b0ec <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d007      	beq.n	800b102 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800b0fa:	6979      	ldr	r1, [r7, #20]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f876 	bl	800b1ee <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	431a      	orrs	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f858 	bl	800b1da <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800b12a:	bf00      	nop
 800b12c:	3728      	adds	r7, #40	; 0x28
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800b166:	bf00      	nop
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800b192:	bf00      	nop
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800b1e2:	bf00      	nop
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b083      	sub	sp, #12
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800b20c:	4b30      	ldr	r3, [pc, #192]	; (800b2d0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800b20e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a2f      	ldr	r2, [pc, #188]	; (800b2d4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d103      	bne.n	800b222 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b220:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a2c      	ldr	r2, [pc, #176]	; (800b2d8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d103      	bne.n	800b234 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800b232:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b242:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24a:	041a      	lsls	r2, r3, #16
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	430a      	orrs	r2, r1
 800b252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b268:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	061a      	lsls	r2, r3, #24
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	430a      	orrs	r2, r1
 800b278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e005      	b.n	800b2b6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	60fb      	str	r3, [r7, #12]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d3f3      	bcc.n	800b2aa <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800b2c2:	bf00      	nop
 800b2c4:	bf00      	nop
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	4000a400 	.word	0x4000a400
 800b2d4:	40006800 	.word	0x40006800
 800b2d8:	40006c00 	.word	0x40006c00

0800b2dc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b089      	sub	sp, #36	; 0x24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b2fa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b302:	4313      	orrs	r3, r2
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	e00a      	b.n	800b31e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b310:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b316:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b31c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b328:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b32e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b334:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	4613      	mov	r3, r2
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	4413      	add	r3, r2
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	440b      	add	r3, r1
 800b34e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	69fa      	ldr	r2, [r7, #28]
 800b354:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	3304      	adds	r3, #4
 800b35a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	3304      	adds	r3, #4
 800b366:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b368:	2300      	movs	r3, #0
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e020      	b.n	800b3b0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	3303      	adds	r3, #3
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	3302      	adds	r3, #2
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	440b      	add	r3, r1
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b386:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	3301      	adds	r3, #1
 800b38c:	6879      	ldr	r1, [r7, #4]
 800b38e:	440b      	add	r3, r1
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b394:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b396:	6879      	ldr	r1, [r7, #4]
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	440a      	add	r2, r1
 800b39c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b39e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	617b      	str	r3, [r7, #20]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	0c1b      	lsrs	r3, r3, #16
 800b3b6:	4a06      	ldr	r2, [pc, #24]	; (800b3d0 <FDCAN_CopyMessageToRAM+0xf4>)
 800b3b8:	5cd3      	ldrb	r3, [r2, r3]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d3d5      	bcc.n	800b36e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	3724      	adds	r7, #36	; 0x24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	08016acc 	.word	0x08016acc

0800b3d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b3e8:	d01b      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a38      	ldr	r2, [pc, #224]	; (800b4d0 <HAL_GPIO_Init+0xfc>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d017      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a37      	ldr	r2, [pc, #220]	; (800b4d4 <HAL_GPIO_Init+0x100>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d013      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a36      	ldr	r2, [pc, #216]	; (800b4d8 <HAL_GPIO_Init+0x104>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d00f      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a35      	ldr	r2, [pc, #212]	; (800b4dc <HAL_GPIO_Init+0x108>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d00b      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a34      	ldr	r2, [pc, #208]	; (800b4e0 <HAL_GPIO_Init+0x10c>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d007      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a33      	ldr	r2, [pc, #204]	; (800b4e4 <HAL_GPIO_Init+0x110>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d003      	beq.n	800b422 <HAL_GPIO_Init+0x4e>
 800b41a:	21a9      	movs	r1, #169	; 0xa9
 800b41c:	4832      	ldr	r0, [pc, #200]	; (800b4e8 <HAL_GPIO_Init+0x114>)
 800b41e:	f7fd ff18 	bl	8009252 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	b29b      	uxth	r3, r3
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d005      	beq.n	800b438 <HAL_GPIO_Init+0x64>
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	0c1b      	lsrs	r3, r3, #16
 800b432:	041b      	lsls	r3, r3, #16
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <HAL_GPIO_Init+0x6c>
 800b438:	21aa      	movs	r1, #170	; 0xaa
 800b43a:	482b      	ldr	r0, [pc, #172]	; (800b4e8 <HAL_GPIO_Init+0x114>)
 800b43c:	f7fd ff09 	bl	8009252 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 820a 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	f000 8205 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	2b11      	cmp	r3, #17
 800b45a:	f000 8200 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	2b02      	cmp	r3, #2
 800b464:	f000 81fb 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	2b12      	cmp	r3, #18
 800b46e:	f000 81f6 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800b47a:	f000 81f0 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800b486:	f000 81ea 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800b492:	f000 81e4 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800b49e:	f000 81de 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800b4aa:	f000 81d8 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800b4b6:	f000 81d2 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	f000 81cd 	beq.w	800b85e <HAL_GPIO_Init+0x48a>
 800b4c4:	21ab      	movs	r1, #171	; 0xab
 800b4c6:	4808      	ldr	r0, [pc, #32]	; (800b4e8 <HAL_GPIO_Init+0x114>)
 800b4c8:	f7fd fec3 	bl	8009252 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b4cc:	e1c7      	b.n	800b85e <HAL_GPIO_Init+0x48a>
 800b4ce:	bf00      	nop
 800b4d0:	48000400 	.word	0x48000400
 800b4d4:	48000800 	.word	0x48000800
 800b4d8:	48000c00 	.word	0x48000c00
 800b4dc:	48001000 	.word	0x48001000
 800b4e0:	48001400 	.word	0x48001400
 800b4e4:	48001800 	.word	0x48001800
 800b4e8:	08014a8c 	.word	0x08014a8c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 81aa 	beq.w	800b858 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f003 0303 	and.w	r3, r3, #3
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d005      	beq.n	800b51c <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d144      	bne.n	800b5a6 <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00f      	beq.n	800b544 <HAL_GPIO_Init+0x170>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d00b      	beq.n	800b544 <HAL_GPIO_Init+0x170>
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	2b02      	cmp	r3, #2
 800b532:	d007      	beq.n	800b544 <HAL_GPIO_Init+0x170>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d003      	beq.n	800b544 <HAL_GPIO_Init+0x170>
 800b53c:	21bb      	movs	r1, #187	; 0xbb
 800b53e:	488b      	ldr	r0, [pc, #556]	; (800b76c <HAL_GPIO_Init+0x398>)
 800b540:	f7fd fe87 	bl	8009252 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	2203      	movs	r2, #3
 800b550:	fa02 f303 	lsl.w	r3, r2, r3
 800b554:	43db      	mvns	r3, r3
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	4013      	ands	r3, r2
 800b55a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	fa02 f303 	lsl.w	r3, r2, r3
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b57a:	2201      	movs	r2, #1
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	fa02 f303 	lsl.w	r3, r2, r3
 800b582:	43db      	mvns	r3, r3
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	4013      	ands	r3, r2
 800b588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	091b      	lsrs	r3, r3, #4
 800b590:	f003 0201 	and.w	r2, r3, #1
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	fa02 f303 	lsl.w	r3, r2, r3
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f003 0303 	and.w	r3, r3, #3
 800b5ae:	2b03      	cmp	r3, #3
 800b5b0:	d027      	beq.n	800b602 <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00b      	beq.n	800b5d2 <HAL_GPIO_Init+0x1fe>
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d007      	beq.n	800b5d2 <HAL_GPIO_Init+0x1fe>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d003      	beq.n	800b5d2 <HAL_GPIO_Init+0x1fe>
 800b5ca:	21cc      	movs	r1, #204	; 0xcc
 800b5cc:	4867      	ldr	r0, [pc, #412]	; (800b76c <HAL_GPIO_Init+0x398>)
 800b5ce:	f7fd fe40 	bl	8009252 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	2203      	movs	r2, #3
 800b5de:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e2:	43db      	mvns	r3, r3
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f003 0303 	and.w	r3, r3, #3
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d14b      	bne.n	800b6a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b614:	d01b      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a55      	ldr	r2, [pc, #340]	; (800b770 <HAL_GPIO_Init+0x39c>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d017      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a54      	ldr	r2, [pc, #336]	; (800b774 <HAL_GPIO_Init+0x3a0>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d013      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a53      	ldr	r2, [pc, #332]	; (800b778 <HAL_GPIO_Init+0x3a4>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00f      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a52      	ldr	r2, [pc, #328]	; (800b77c <HAL_GPIO_Init+0x3a8>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d00b      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a51      	ldr	r2, [pc, #324]	; (800b780 <HAL_GPIO_Init+0x3ac>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d007      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a50      	ldr	r2, [pc, #320]	; (800b784 <HAL_GPIO_Init+0x3b0>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d003      	beq.n	800b64e <HAL_GPIO_Init+0x27a>
 800b646:	21d9      	movs	r1, #217	; 0xd9
 800b648:	4848      	ldr	r0, [pc, #288]	; (800b76c <HAL_GPIO_Init+0x398>)
 800b64a:	f7fd fe02 	bl	8009252 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b0f      	cmp	r3, #15
 800b654:	d903      	bls.n	800b65e <HAL_GPIO_Init+0x28a>
 800b656:	21da      	movs	r1, #218	; 0xda
 800b658:	4844      	ldr	r0, [pc, #272]	; (800b76c <HAL_GPIO_Init+0x398>)
 800b65a:	f7fd fdfa 	bl	8009252 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	08da      	lsrs	r2, r3, #3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3208      	adds	r2, #8
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f003 0307 	and.w	r3, r3, #7
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	220f      	movs	r2, #15
 800b676:	fa02 f303 	lsl.w	r3, r2, r3
 800b67a:	43db      	mvns	r3, r3
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	4013      	ands	r3, r2
 800b680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	691a      	ldr	r2, [r3, #16]
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	fa02 f303 	lsl.w	r3, r2, r3
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	4313      	orrs	r3, r2
 800b696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	08da      	lsrs	r2, r3, #3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3208      	adds	r2, #8
 800b6a0:	6939      	ldr	r1, [r7, #16]
 800b6a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b6:	43db      	mvns	r3, r3
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	f003 0203 	and.w	r2, r3, #3
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 80b8 	beq.w	800b858 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6e8:	4b27      	ldr	r3, [pc, #156]	; (800b788 <HAL_GPIO_Init+0x3b4>)
 800b6ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ec:	4a26      	ldr	r2, [pc, #152]	; (800b788 <HAL_GPIO_Init+0x3b4>)
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	6613      	str	r3, [r2, #96]	; 0x60
 800b6f4:	4b24      	ldr	r3, [pc, #144]	; (800b788 <HAL_GPIO_Init+0x3b4>)
 800b6f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	60bb      	str	r3, [r7, #8]
 800b6fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b700:	4a22      	ldr	r2, [pc, #136]	; (800b78c <HAL_GPIO_Init+0x3b8>)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	089b      	lsrs	r3, r3, #2
 800b706:	3302      	adds	r3, #2
 800b708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b70c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	220f      	movs	r2, #15
 800b718:	fa02 f303 	lsl.w	r3, r2, r3
 800b71c:	43db      	mvns	r3, r3
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4013      	ands	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b72a:	d031      	beq.n	800b790 <HAL_GPIO_Init+0x3bc>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a10      	ldr	r2, [pc, #64]	; (800b770 <HAL_GPIO_Init+0x39c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d019      	beq.n	800b768 <HAL_GPIO_Init+0x394>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a0f      	ldr	r2, [pc, #60]	; (800b774 <HAL_GPIO_Init+0x3a0>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d013      	beq.n	800b764 <HAL_GPIO_Init+0x390>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a0e      	ldr	r2, [pc, #56]	; (800b778 <HAL_GPIO_Init+0x3a4>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00d      	beq.n	800b760 <HAL_GPIO_Init+0x38c>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a0d      	ldr	r2, [pc, #52]	; (800b77c <HAL_GPIO_Init+0x3a8>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d007      	beq.n	800b75c <HAL_GPIO_Init+0x388>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a0c      	ldr	r2, [pc, #48]	; (800b780 <HAL_GPIO_Init+0x3ac>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d101      	bne.n	800b758 <HAL_GPIO_Init+0x384>
 800b754:	2305      	movs	r3, #5
 800b756:	e01c      	b.n	800b792 <HAL_GPIO_Init+0x3be>
 800b758:	2306      	movs	r3, #6
 800b75a:	e01a      	b.n	800b792 <HAL_GPIO_Init+0x3be>
 800b75c:	2304      	movs	r3, #4
 800b75e:	e018      	b.n	800b792 <HAL_GPIO_Init+0x3be>
 800b760:	2303      	movs	r3, #3
 800b762:	e016      	b.n	800b792 <HAL_GPIO_Init+0x3be>
 800b764:	2302      	movs	r3, #2
 800b766:	e014      	b.n	800b792 <HAL_GPIO_Init+0x3be>
 800b768:	2301      	movs	r3, #1
 800b76a:	e012      	b.n	800b792 <HAL_GPIO_Init+0x3be>
 800b76c:	08014a8c 	.word	0x08014a8c
 800b770:	48000400 	.word	0x48000400
 800b774:	48000800 	.word	0x48000800
 800b778:	48000c00 	.word	0x48000c00
 800b77c:	48001000 	.word	0x48001000
 800b780:	48001400 	.word	0x48001400
 800b784:	48001800 	.word	0x48001800
 800b788:	40021000 	.word	0x40021000
 800b78c:	40010000 	.word	0x40010000
 800b790:	2300      	movs	r3, #0
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	f002 0203 	and.w	r2, r2, #3
 800b798:	0092      	lsls	r2, r2, #2
 800b79a:	4093      	lsls	r3, r2
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b7a2:	4935      	ldr	r1, [pc, #212]	; (800b878 <HAL_GPIO_Init+0x4a4>)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	089b      	lsrs	r3, r3, #2
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7b0:	4b32      	ldr	r3, [pc, #200]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	43db      	mvns	r3, r3
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b7d4:	4a29      	ldr	r2, [pc, #164]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b7da:	4b28      	ldr	r3, [pc, #160]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	43db      	mvns	r3, r3
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b7fe:	4a1f      	ldr	r2, [pc, #124]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b804:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	43db      	mvns	r3, r3
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4013      	ands	r3, r2
 800b812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	4313      	orrs	r3, r2
 800b826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b828:	4a14      	ldr	r2, [pc, #80]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	43db      	mvns	r3, r3
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	4013      	ands	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b852:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <HAL_GPIO_Init+0x4a8>)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	3301      	adds	r3, #1
 800b85c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	fa22 f303 	lsr.w	r3, r2, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f47f ae3f 	bne.w	800b4ec <HAL_GPIO_Init+0x118>
  }
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	40010000 	.word	0x40010000
 800b87c:	40010400 	.word	0x40010400

0800b880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	807b      	strh	r3, [r7, #2]
 800b88c:	4613      	mov	r3, r2
 800b88e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b890:	887b      	ldrh	r3, [r7, #2]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <HAL_GPIO_WritePin+0x20>
 800b896:	887b      	ldrh	r3, [r7, #2]
 800b898:	0c1b      	lsrs	r3, r3, #16
 800b89a:	041b      	lsls	r3, r3, #16
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <HAL_GPIO_WritePin+0x2a>
 800b8a0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b8a4:	480d      	ldr	r0, [pc, #52]	; (800b8dc <HAL_GPIO_WritePin+0x5c>)
 800b8a6:	f7fd fcd4 	bl	8009252 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b8aa:	787b      	ldrb	r3, [r7, #1]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d007      	beq.n	800b8c0 <HAL_GPIO_WritePin+0x40>
 800b8b0:	787b      	ldrb	r3, [r7, #1]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d004      	beq.n	800b8c0 <HAL_GPIO_WritePin+0x40>
 800b8b6:	f240 119b 	movw	r1, #411	; 0x19b
 800b8ba:	4808      	ldr	r0, [pc, #32]	; (800b8dc <HAL_GPIO_WritePin+0x5c>)
 800b8bc:	f7fd fcc9 	bl	8009252 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800b8c0:	787b      	ldrb	r3, [r7, #1]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b8c6:	887a      	ldrh	r2, [r7, #2]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b8cc:	e002      	b.n	800b8d4 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b8ce:	887a      	ldrh	r2, [r7, #2]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b8d4:	bf00      	nop
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	08014a8c 	.word	0x08014a8c

0800b8e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e109      	b.n	800bb06 <HAL_I2C_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a86      	ldr	r2, [pc, #536]	; (800bb10 <HAL_I2C_Init+0x230>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d013      	beq.n	800b924 <HAL_I2C_Init+0x44>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a84      	ldr	r2, [pc, #528]	; (800bb14 <HAL_I2C_Init+0x234>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d00e      	beq.n	800b924 <HAL_I2C_Init+0x44>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a83      	ldr	r2, [pc, #524]	; (800bb18 <HAL_I2C_Init+0x238>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d009      	beq.n	800b924 <HAL_I2C_Init+0x44>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a81      	ldr	r2, [pc, #516]	; (800bb1c <HAL_I2C_Init+0x23c>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d004      	beq.n	800b924 <HAL_I2C_Init+0x44>
 800b91a:	f240 2115 	movw	r1, #533	; 0x215
 800b91e:	4880      	ldr	r0, [pc, #512]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b920:	f7fd fc97 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b92c:	d304      	bcc.n	800b938 <HAL_I2C_Init+0x58>
 800b92e:	f240 2116 	movw	r1, #534	; 0x216
 800b932:	487b      	ldr	r0, [pc, #492]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b934:	f7fd fc8d 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d008      	beq.n	800b952 <HAL_I2C_Init+0x72>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	2b02      	cmp	r3, #2
 800b946:	d004      	beq.n	800b952 <HAL_I2C_Init+0x72>
 800b948:	f240 2117 	movw	r1, #535	; 0x217
 800b94c:	4874      	ldr	r0, [pc, #464]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b94e:	f7fd fc80 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <HAL_I2C_Init+0x8e>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b962:	d004      	beq.n	800b96e <HAL_I2C_Init+0x8e>
 800b964:	f44f 7106 	mov.w	r1, #536	; 0x218
 800b968:	486d      	ldr	r0, [pc, #436]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b96a:	f7fd fc72 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	2bff      	cmp	r3, #255	; 0xff
 800b974:	d904      	bls.n	800b980 <HAL_I2C_Init+0xa0>
 800b976:	f240 2119 	movw	r1, #537	; 0x219
 800b97a:	4869      	ldr	r0, [pc, #420]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b97c:	f7fd fc69 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d020      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d01c      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d018      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d014      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	d010      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	2b05      	cmp	r3, #5
 800b9ae:	d00c      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	2b06      	cmp	r3, #6
 800b9b6:	d008      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	2b07      	cmp	r3, #7
 800b9be:	d004      	beq.n	800b9ca <HAL_I2C_Init+0xea>
 800b9c0:	f240 211a 	movw	r1, #538	; 0x21a
 800b9c4:	4856      	ldr	r0, [pc, #344]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b9c6:	f7fd fc44 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d009      	beq.n	800b9e6 <HAL_I2C_Init+0x106>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b9da:	d004      	beq.n	800b9e6 <HAL_I2C_Init+0x106>
 800b9dc:	f240 211b 	movw	r1, #539	; 0x21b
 800b9e0:	484f      	ldr	r0, [pc, #316]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b9e2:	f7fd fc36 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d009      	beq.n	800ba02 <HAL_I2C_Init+0x122>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9f6:	d004      	beq.n	800ba02 <HAL_I2C_Init+0x122>
 800b9f8:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800b9fc:	4848      	ldr	r0, [pc, #288]	; (800bb20 <HAL_I2C_Init+0x240>)
 800b9fe:	f7fd fc28 	bl	8009252 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7fd fb42 	bl	80090a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2224      	movs	r2, #36	; 0x24
 800ba20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0201 	bic.w	r2, r2, #1
 800ba32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ba40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d107      	bne.n	800ba6a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689a      	ldr	r2, [r3, #8]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba66:	609a      	str	r2, [r3, #8]
 800ba68:	e006      	b.n	800ba78 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689a      	ldr	r2, [r3, #8]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ba76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d104      	bne.n	800ba8a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6812      	ldr	r2, [r2, #0]
 800ba94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ba98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800baac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691a      	ldr	r2, [r3, #16]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	69d9      	ldr	r1, [r3, #28]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a1a      	ldr	r2, [r3, #32]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	430a      	orrs	r2, r1
 800bad6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	40005400 	.word	0x40005400
 800bb14:	40005800 	.word	0x40005800
 800bb18:	40007800 	.word	0x40007800
 800bb1c:	40008400 	.word	0x40008400
 800bb20:	08014ac8 	.word	0x08014ac8

0800bb24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a32      	ldr	r2, [pc, #200]	; (800bbfc <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d012      	beq.n	800bb5e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a30      	ldr	r2, [pc, #192]	; (800bc00 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00d      	beq.n	800bb5e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a2f      	ldr	r2, [pc, #188]	; (800bc04 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d008      	beq.n	800bb5e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a2d      	ldr	r2, [pc, #180]	; (800bc08 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d003      	beq.n	800bb5e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800bb56:	2163      	movs	r1, #99	; 0x63
 800bb58:	482c      	ldr	r0, [pc, #176]	; (800bc0c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800bb5a:	f7fd fb7a 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d007      	beq.n	800bb74 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb6a:	d003      	beq.n	800bb74 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800bb6c:	2164      	movs	r1, #100	; 0x64
 800bb6e:	4827      	ldr	r0, [pc, #156]	; (800bc0c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800bb70:	f7fd fb6f 	bl	8009252 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b20      	cmp	r3, #32
 800bb7e:	d138      	bne.n	800bbf2 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e032      	b.n	800bbf4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2224      	movs	r2, #36	; 0x24
 800bb9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0201 	bic.w	r2, r2, #1
 800bbac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bbbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6819      	ldr	r1, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f042 0201 	orr.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e000      	b.n	800bbf4 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800bbf2:	2302      	movs	r3, #2
  }
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	40005400 	.word	0x40005400
 800bc00:	40005800 	.word	0x40005800
 800bc04:	40007800 	.word	0x40007800
 800bc08:	40008400 	.word	0x40008400
 800bc0c:	08014b00 	.word	0x08014b00

0800bc10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a31      	ldr	r2, [pc, #196]	; (800bce4 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d012      	beq.n	800bc4a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a2f      	ldr	r2, [pc, #188]	; (800bce8 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d00d      	beq.n	800bc4a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a2e      	ldr	r2, [pc, #184]	; (800bcec <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d008      	beq.n	800bc4a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a2c      	ldr	r2, [pc, #176]	; (800bcf0 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d003      	beq.n	800bc4a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800bc42:	2191      	movs	r1, #145	; 0x91
 800bc44:	482b      	ldr	r0, [pc, #172]	; (800bcf4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800bc46:	f7fd fb04 	bl	8009252 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b0f      	cmp	r3, #15
 800bc4e:	d903      	bls.n	800bc58 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 800bc50:	2192      	movs	r1, #146	; 0x92
 800bc52:	4828      	ldr	r0, [pc, #160]	; (800bcf4 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800bc54:	f7fd fafd 	bl	8009252 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b20      	cmp	r3, #32
 800bc62:	d139      	bne.n	800bcd8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d101      	bne.n	800bc72 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800bc6e:	2302      	movs	r3, #2
 800bc70:	e033      	b.n	800bcda <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2224      	movs	r2, #36	; 0x24
 800bc7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f022 0201 	bic.w	r2, r2, #1
 800bc90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bca0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0201 	orr.w	r2, r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e000      	b.n	800bcda <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bcd8:	2302      	movs	r3, #2
  }
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	40005400 	.word	0x40005400
 800bce8:	40005800 	.word	0x40005800
 800bcec:	40007800 	.word	0x40007800
 800bcf0:	40008400 	.word	0x40008400
 800bcf4:	08014b00 	.word	0x08014b00

0800bcf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcfa:	b08b      	sub	sp, #44	; 0x2c
 800bcfc:	af06      	add	r7, sp, #24
 800bcfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e0e0      	b.n	800becc <HAL_PCD_Init+0x1d4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a71      	ldr	r2, [pc, #452]	; (800bed4 <HAL_PCD_Init+0x1dc>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d003      	beq.n	800bd1c <HAL_PCD_Init+0x24>
 800bd14:	2187      	movs	r1, #135	; 0x87
 800bd16:	4870      	ldr	r0, [pc, #448]	; (800bed8 <HAL_PCD_Init+0x1e0>)
 800bd18:	f7fd fa9b 	bl	8009252 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d106      	bne.n	800bd36 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7fd fded 	bl	8009910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2203      	movs	r2, #3
 800bd3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f004 fa5c 	bl	8010200 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73fb      	strb	r3, [r7, #15]
 800bd4c:	e04c      	b.n	800bde8 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	440b      	add	r3, r1
 800bd5e:	3301      	adds	r3, #1
 800bd60:	2201      	movs	r2, #1
 800bd62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	440b      	add	r3, r1
 800bd74:	7bfa      	ldrb	r2, [r7, #15]
 800bd76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bd78:	7bfa      	ldrb	r2, [r7, #15]
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
 800bd7c:	b298      	uxth	r0, r3
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	4613      	mov	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	440b      	add	r3, r1
 800bd8a:	3336      	adds	r3, #54	; 0x36
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	6879      	ldr	r1, [r7, #4]
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	440b      	add	r3, r1
 800bda0:	3303      	adds	r3, #3
 800bda2:	2200      	movs	r2, #0
 800bda4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bda6:	7bfa      	ldrb	r2, [r7, #15]
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	440b      	add	r3, r1
 800bdb4:	3338      	adds	r3, #56	; 0x38
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bdba:	7bfa      	ldrb	r2, [r7, #15]
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	440b      	add	r3, r1
 800bdc8:	333c      	adds	r3, #60	; 0x3c
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bdce:	7bfa      	ldrb	r2, [r7, #15]
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	440b      	add	r3, r1
 800bddc:	3340      	adds	r3, #64	; 0x40
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	3301      	adds	r3, #1
 800bde6:	73fb      	strb	r3, [r7, #15]
 800bde8:	7bfa      	ldrb	r2, [r7, #15]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d3ad      	bcc.n	800bd4e <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]
 800bdf6:	e044      	b.n	800be82 <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bdf8:	7bfa      	ldrb	r2, [r7, #15]
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	440b      	add	r3, r1
 800be06:	f203 1369 	addw	r3, r3, #361	; 0x169
 800be0a:	2200      	movs	r2, #0
 800be0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800be0e:	7bfa      	ldrb	r2, [r7, #15]
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	440b      	add	r3, r1
 800be1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800be20:	7bfa      	ldrb	r2, [r7, #15]
 800be22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800be24:	7bfa      	ldrb	r2, [r7, #15]
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	4613      	mov	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	00db      	lsls	r3, r3, #3
 800be30:	440b      	add	r3, r1
 800be32:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800be36:	2200      	movs	r2, #0
 800be38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800be3a:	7bfa      	ldrb	r2, [r7, #15]
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	440b      	add	r3, r1
 800be48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800be4c:	2200      	movs	r2, #0
 800be4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800be50:	7bfa      	ldrb	r2, [r7, #15]
 800be52:	6879      	ldr	r1, [r7, #4]
 800be54:	4613      	mov	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	440b      	add	r3, r1
 800be5e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800be66:	7bfa      	ldrb	r2, [r7, #15]
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	440b      	add	r3, r1
 800be74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	3301      	adds	r3, #1
 800be80:	73fb      	strb	r3, [r7, #15]
 800be82:	7bfa      	ldrb	r2, [r7, #15]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d3b5      	bcc.n	800bdf8 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	603b      	str	r3, [r7, #0]
 800be92:	687e      	ldr	r6, [r7, #4]
 800be94:	466d      	mov	r5, sp
 800be96:	f106 0410 	add.w	r4, r6, #16
 800be9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	1d33      	adds	r3, r6, #4
 800bea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bea6:	6838      	ldr	r0, [r7, #0]
 800bea8:	f004 f9c5 	bl	8010236 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d102      	bne.n	800beca <HAL_PCD_Init+0x1d2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f809 	bl	800bedc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed4:	40005c00 	.word	0x40005c00
 800bed8:	08014b3c 	.word	0x08014b3c

0800bedc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2201      	movs	r2, #1
 800beee:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f043 0301 	orr.w	r3, r3, #1
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	f043 0302 	orr.w	r3, r3, #2
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00b      	beq.n	800bf56 <HAL_PWREx_ControlVoltageScaling+0x26>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf44:	d007      	beq.n	800bf56 <HAL_PWREx_ControlVoltageScaling+0x26>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf4c:	d003      	beq.n	800bf56 <HAL_PWREx_ControlVoltageScaling+0x26>
 800bf4e:	219d      	movs	r1, #157	; 0x9d
 800bf50:	484d      	ldr	r0, [pc, #308]	; (800c088 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800bf52:	f7fd f97e 	bl	8009252 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d141      	bne.n	800bfe0 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bf5c:	4b4b      	ldr	r3, [pc, #300]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf68:	d131      	bne.n	800bfce <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bf6a:	4b48      	ldr	r3, [pc, #288]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf70:	4a46      	ldr	r2, [pc, #280]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bf7a:	4b44      	ldr	r3, [pc, #272]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bf82:	4a42      	ldr	r2, [pc, #264]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bf84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bf8a:	4b41      	ldr	r3, [pc, #260]	; (800c090 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2232      	movs	r2, #50	; 0x32
 800bf90:	fb02 f303 	mul.w	r3, r2, r3
 800bf94:	4a3f      	ldr	r2, [pc, #252]	; (800c094 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800bf96:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9a:	0c9b      	lsrs	r3, r3, #18
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfa0:	e002      	b.n	800bfa8 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfa8:	4b38      	ldr	r3, [pc, #224]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfb4:	d102      	bne.n	800bfbc <HAL_PWREx_ControlVoltageScaling+0x8c>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f2      	bne.n	800bfa2 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bfbc:	4b33      	ldr	r3, [pc, #204]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfc8:	d158      	bne.n	800c07c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	e057      	b.n	800c07e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bfce:	4b2f      	ldr	r3, [pc, #188]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfd4:	4a2d      	ldr	r2, [pc, #180]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfda:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800bfde:	e04d      	b.n	800c07c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfe6:	d141      	bne.n	800c06c <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bfe8:	4b28      	ldr	r3, [pc, #160]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff4:	d131      	bne.n	800c05a <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bff6:	4b25      	ldr	r3, [pc, #148]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bffc:	4a23      	ldr	r2, [pc, #140]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800bffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c002:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c006:	4b21      	ldr	r3, [pc, #132]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c00e:	4a1f      	ldr	r2, [pc, #124]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c014:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c016:	4b1e      	ldr	r3, [pc, #120]	; (800c090 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2232      	movs	r2, #50	; 0x32
 800c01c:	fb02 f303 	mul.w	r3, r2, r3
 800c020:	4a1c      	ldr	r2, [pc, #112]	; (800c094 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800c022:	fba2 2303 	umull	r2, r3, r2, r3
 800c026:	0c9b      	lsrs	r3, r3, #18
 800c028:	3301      	adds	r3, #1
 800c02a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c02c:	e002      	b.n	800c034 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3b01      	subs	r3, #1
 800c032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c034:	4b15      	ldr	r3, [pc, #84]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c040:	d102      	bne.n	800c048 <HAL_PWREx_ControlVoltageScaling+0x118>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1f2      	bne.n	800c02e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c048:	4b10      	ldr	r3, [pc, #64]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c054:	d112      	bne.n	800c07c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800c056:	2303      	movs	r3, #3
 800c058:	e011      	b.n	800c07e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c05a:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c060:	4a0a      	ldr	r2, [pc, #40]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c066:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c06a:	e007      	b.n	800c07c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c06c:	4b07      	ldr	r3, [pc, #28]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c074:	4a05      	ldr	r2, [pc, #20]	; (800c08c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800c076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c07a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	08014b74 	.word	0x08014b74
 800c08c:	40007000 	.word	0x40007000
 800c090:	20000b10 	.word	0x20000b10
 800c094:	431bde83 	.word	0x431bde83

0800c098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b088      	sub	sp, #32
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f000 bc02 	b.w	800c8b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d022      	beq.n	800c0fa <HAL_RCC_OscConfig+0x62>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d11c      	bne.n	800c0fa <HAL_RCC_OscConfig+0x62>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d116      	bne.n	800c0fa <HAL_RCC_OscConfig+0x62>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 0320 	and.w	r3, r3, #32
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d110      	bne.n	800c0fa <HAL_RCC_OscConfig+0x62>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0308 	and.w	r3, r3, #8
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10a      	bne.n	800c0fa <HAL_RCC_OscConfig+0x62>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d104      	bne.n	800c0fa <HAL_RCC_OscConfig+0x62>
 800c0f0:	f240 1145 	movw	r1, #325	; 0x145
 800c0f4:	4892      	ldr	r0, [pc, #584]	; (800c340 <HAL_RCC_OscConfig+0x2a8>)
 800c0f6:	f7fd f8ac 	bl	8009252 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 8089 	beq.w	800c21a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00e      	beq.n	800c12e <HAL_RCC_OscConfig+0x96>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c118:	d009      	beq.n	800c12e <HAL_RCC_OscConfig+0x96>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c122:	d004      	beq.n	800c12e <HAL_RCC_OscConfig+0x96>
 800c124:	f240 114b 	movw	r1, #331	; 0x14b
 800c128:	4885      	ldr	r0, [pc, #532]	; (800c340 <HAL_RCC_OscConfig+0x2a8>)
 800c12a:	f7fd f892 	bl	8009252 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c12e:	4b85      	ldr	r3, [pc, #532]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f003 030c 	and.w	r3, r3, #12
 800c136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c138:	4b82      	ldr	r3, [pc, #520]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	2b0c      	cmp	r3, #12
 800c146:	d102      	bne.n	800c14e <HAL_RCC_OscConfig+0xb6>
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d002      	beq.n	800c154 <HAL_RCC_OscConfig+0xbc>
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	2b08      	cmp	r3, #8
 800c152:	d10b      	bne.n	800c16c <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c154:	4b7b      	ldr	r3, [pc, #492]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d05b      	beq.n	800c218 <HAL_RCC_OscConfig+0x180>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d157      	bne.n	800c218 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e3a1      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c174:	d106      	bne.n	800c184 <HAL_RCC_OscConfig+0xec>
 800c176:	4b73      	ldr	r3, [pc, #460]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a72      	ldr	r2, [pc, #456]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c17c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	e01d      	b.n	800c1c0 <HAL_RCC_OscConfig+0x128>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c18c:	d10c      	bne.n	800c1a8 <HAL_RCC_OscConfig+0x110>
 800c18e:	4b6d      	ldr	r3, [pc, #436]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a6c      	ldr	r2, [pc, #432]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c198:	6013      	str	r3, [r2, #0]
 800c19a:	4b6a      	ldr	r3, [pc, #424]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a69      	ldr	r2, [pc, #420]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c1a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1a4:	6013      	str	r3, [r2, #0]
 800c1a6:	e00b      	b.n	800c1c0 <HAL_RCC_OscConfig+0x128>
 800c1a8:	4b66      	ldr	r3, [pc, #408]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a65      	ldr	r2, [pc, #404]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c1ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	4b63      	ldr	r3, [pc, #396]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a62      	ldr	r2, [pc, #392]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c1ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d013      	beq.n	800c1f0 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1c8:	f7fd fc2a 	bl	8009a20 <HAL_GetTick>
 800c1cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c1ce:	e008      	b.n	800c1e2 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1d0:	f7fd fc26 	bl	8009a20 <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	2b64      	cmp	r3, #100	; 0x64
 800c1dc:	d901      	bls.n	800c1e2 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	e366      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c1e2:	4b58      	ldr	r3, [pc, #352]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d0f0      	beq.n	800c1d0 <HAL_RCC_OscConfig+0x138>
 800c1ee:	e014      	b.n	800c21a <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1f0:	f7fd fc16 	bl	8009a20 <HAL_GetTick>
 800c1f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c1f6:	e008      	b.n	800c20a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1f8:	f7fd fc12 	bl	8009a20 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	2b64      	cmp	r3, #100	; 0x64
 800c204:	d901      	bls.n	800c20a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e352      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c20a:	4b4e      	ldr	r3, [pc, #312]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1f0      	bne.n	800c1f8 <HAL_RCC_OscConfig+0x160>
 800c216:	e000      	b.n	800c21a <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b00      	cmp	r3, #0
 800c224:	f000 8093 	beq.w	800c34e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d009      	beq.n	800c244 <HAL_RCC_OscConfig+0x1ac>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c238:	d004      	beq.n	800c244 <HAL_RCC_OscConfig+0x1ac>
 800c23a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c23e:	4840      	ldr	r0, [pc, #256]	; (800c340 <HAL_RCC_OscConfig+0x2a8>)
 800c240:	f7fd f807 	bl	8009252 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	2b7f      	cmp	r3, #127	; 0x7f
 800c24a:	d904      	bls.n	800c256 <HAL_RCC_OscConfig+0x1be>
 800c24c:	f240 1181 	movw	r1, #385	; 0x181
 800c250:	483b      	ldr	r0, [pc, #236]	; (800c340 <HAL_RCC_OscConfig+0x2a8>)
 800c252:	f7fc fffe 	bl	8009252 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c256:	4b3b      	ldr	r3, [pc, #236]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f003 030c 	and.w	r3, r3, #12
 800c25e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c260:	4b38      	ldr	r3, [pc, #224]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	f003 0303 	and.w	r3, r3, #3
 800c268:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	2b0c      	cmp	r3, #12
 800c26e:	d102      	bne.n	800c276 <HAL_RCC_OscConfig+0x1de>
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b02      	cmp	r3, #2
 800c274:	d002      	beq.n	800c27c <HAL_RCC_OscConfig+0x1e4>
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	2b04      	cmp	r3, #4
 800c27a:	d11f      	bne.n	800c2bc <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c27c:	4b31      	ldr	r3, [pc, #196]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c284:	2b00      	cmp	r3, #0
 800c286:	d005      	beq.n	800c294 <HAL_RCC_OscConfig+0x1fc>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e30d      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c294:	4b2b      	ldr	r3, [pc, #172]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	061b      	lsls	r3, r3, #24
 800c2a2:	4928      	ldr	r1, [pc, #160]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c2a8:	4b27      	ldr	r3, [pc, #156]	; (800c348 <HAL_RCC_OscConfig+0x2b0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd f8df 	bl	8009470 <HAL_InitTick>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d049      	beq.n	800c34c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e2f9      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d023      	beq.n	800c30c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c2c4:	4b1f      	ldr	r3, [pc, #124]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a1e      	ldr	r2, [pc, #120]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c2ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2d0:	f7fd fba6 	bl	8009a20 <HAL_GetTick>
 800c2d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2d6:	e008      	b.n	800c2ea <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2d8:	f7fd fba2 	bl	8009a20 <HAL_GetTick>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d901      	bls.n	800c2ea <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e2e2      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2ea:	4b16      	ldr	r3, [pc, #88]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d0f0      	beq.n	800c2d8 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2f6:	4b13      	ldr	r3, [pc, #76]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	061b      	lsls	r3, r3, #24
 800c304:	490f      	ldr	r1, [pc, #60]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c306:	4313      	orrs	r3, r2
 800c308:	604b      	str	r3, [r1, #4]
 800c30a:	e020      	b.n	800c34e <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c30c:	4b0d      	ldr	r3, [pc, #52]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a0c      	ldr	r2, [pc, #48]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c318:	f7fd fb82 	bl	8009a20 <HAL_GetTick>
 800c31c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c31e:	e008      	b.n	800c332 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c320:	f7fd fb7e 	bl	8009a20 <HAL_GetTick>
 800c324:	4602      	mov	r2, r0
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d901      	bls.n	800c332 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800c32e:	2303      	movs	r3, #3
 800c330:	e2be      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c332:	4b04      	ldr	r3, [pc, #16]	; (800c344 <HAL_RCC_OscConfig+0x2ac>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1f0      	bne.n	800c320 <HAL_RCC_OscConfig+0x288>
 800c33e:	e006      	b.n	800c34e <HAL_RCC_OscConfig+0x2b6>
 800c340:	08014bb0 	.word	0x08014bb0
 800c344:	40021000 	.word	0x40021000
 800c348:	20000b14 	.word	0x20000b14
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c34c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0308 	and.w	r3, r3, #8
 800c356:	2b00      	cmp	r3, #0
 800c358:	d049      	beq.n	800c3ee <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d008      	beq.n	800c374 <HAL_RCC_OscConfig+0x2dc>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d004      	beq.n	800c374 <HAL_RCC_OscConfig+0x2dc>
 800c36a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800c36e:	48a3      	ldr	r0, [pc, #652]	; (800c5fc <HAL_RCC_OscConfig+0x564>)
 800c370:	f7fc ff6f 	bl	8009252 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01c      	beq.n	800c3b6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c37c:	4ba0      	ldr	r3, [pc, #640]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c37e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c382:	4a9f      	ldr	r2, [pc, #636]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c384:	f043 0301 	orr.w	r3, r3, #1
 800c388:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c38c:	f7fd fb48 	bl	8009a20 <HAL_GetTick>
 800c390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c392:	e008      	b.n	800c3a6 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c394:	f7fd fb44 	bl	8009a20 <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d901      	bls.n	800c3a6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	e284      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c3a6:	4b96      	ldr	r3, [pc, #600]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c3a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0ef      	beq.n	800c394 <HAL_RCC_OscConfig+0x2fc>
 800c3b4:	e01b      	b.n	800c3ee <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3b6:	4b92      	ldr	r3, [pc, #584]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c3b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3bc:	4a90      	ldr	r2, [pc, #576]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c3be:	f023 0301 	bic.w	r3, r3, #1
 800c3c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3c6:	f7fd fb2b 	bl	8009a20 <HAL_GetTick>
 800c3ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c3cc:	e008      	b.n	800c3e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3ce:	f7fd fb27 	bl	8009a20 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d901      	bls.n	800c3e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e267      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c3e0:	4b87      	ldr	r3, [pc, #540]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c3e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3e6:	f003 0302 	and.w	r3, r3, #2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1ef      	bne.n	800c3ce <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 80b7 	beq.w	800c56a <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00c      	beq.n	800c422 <HAL_RCC_OscConfig+0x38a>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d008      	beq.n	800c422 <HAL_RCC_OscConfig+0x38a>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	2b05      	cmp	r3, #5
 800c416:	d004      	beq.n	800c422 <HAL_RCC_OscConfig+0x38a>
 800c418:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c41c:	4877      	ldr	r0, [pc, #476]	; (800c5fc <HAL_RCC_OscConfig+0x564>)
 800c41e:	f7fc ff18 	bl	8009252 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c422:	4b77      	ldr	r3, [pc, #476]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <HAL_RCC_OscConfig+0x39a>
 800c42e:	2301      	movs	r3, #1
 800c430:	e000      	b.n	800c434 <HAL_RCC_OscConfig+0x39c>
 800c432:	2300      	movs	r3, #0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00d      	beq.n	800c454 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c438:	4b71      	ldr	r3, [pc, #452]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43c:	4a70      	ldr	r2, [pc, #448]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c43e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c442:	6593      	str	r3, [r2, #88]	; 0x58
 800c444:	4b6e      	ldr	r3, [pc, #440]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c450:	2301      	movs	r3, #1
 800c452:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c454:	4b6b      	ldr	r3, [pc, #428]	; (800c604 <HAL_RCC_OscConfig+0x56c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d118      	bne.n	800c492 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c460:	4b68      	ldr	r3, [pc, #416]	; (800c604 <HAL_RCC_OscConfig+0x56c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a67      	ldr	r2, [pc, #412]	; (800c604 <HAL_RCC_OscConfig+0x56c>)
 800c466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c46a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c46c:	f7fd fad8 	bl	8009a20 <HAL_GetTick>
 800c470:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c472:	e008      	b.n	800c486 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c474:	f7fd fad4 	bl	8009a20 <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d901      	bls.n	800c486 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e214      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c486:	4b5f      	ldr	r3, [pc, #380]	; (800c604 <HAL_RCC_OscConfig+0x56c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0f0      	beq.n	800c474 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d108      	bne.n	800c4ac <HAL_RCC_OscConfig+0x414>
 800c49a:	4b59      	ldr	r3, [pc, #356]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4a0:	4a57      	ldr	r2, [pc, #348]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4a2:	f043 0301 	orr.w	r3, r3, #1
 800c4a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4aa:	e024      	b.n	800c4f6 <HAL_RCC_OscConfig+0x45e>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	d110      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x43e>
 800c4b4:	4b52      	ldr	r3, [pc, #328]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ba:	4a51      	ldr	r2, [pc, #324]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4bc:	f043 0304 	orr.w	r3, r3, #4
 800c4c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4c4:	4b4e      	ldr	r3, [pc, #312]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ca:	4a4d      	ldr	r2, [pc, #308]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4cc:	f043 0301 	orr.w	r3, r3, #1
 800c4d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4d4:	e00f      	b.n	800c4f6 <HAL_RCC_OscConfig+0x45e>
 800c4d6:	4b4a      	ldr	r3, [pc, #296]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4dc:	4a48      	ldr	r2, [pc, #288]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4de:	f023 0301 	bic.w	r3, r3, #1
 800c4e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4e6:	4b46      	ldr	r3, [pc, #280]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ec:	4a44      	ldr	r2, [pc, #272]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c4ee:	f023 0304 	bic.w	r3, r3, #4
 800c4f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d016      	beq.n	800c52c <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4fe:	f7fd fa8f 	bl	8009a20 <HAL_GetTick>
 800c502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c504:	e00a      	b.n	800c51c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c506:	f7fd fa8b 	bl	8009a20 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	f241 3288 	movw	r2, #5000	; 0x1388
 800c514:	4293      	cmp	r3, r2
 800c516:	d901      	bls.n	800c51c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e1c9      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c51c:	4b38      	ldr	r3, [pc, #224]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0ed      	beq.n	800c506 <HAL_RCC_OscConfig+0x46e>
 800c52a:	e015      	b.n	800c558 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c52c:	f7fd fa78 	bl	8009a20 <HAL_GetTick>
 800c530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c532:	e00a      	b.n	800c54a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c534:	f7fd fa74 	bl	8009a20 <HAL_GetTick>
 800c538:	4602      	mov	r2, r0
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c542:	4293      	cmp	r3, r2
 800c544:	d901      	bls.n	800c54a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e1b2      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c54a:	4b2d      	ldr	r3, [pc, #180]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1ed      	bne.n	800c534 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c558:	7ffb      	ldrb	r3, [r7, #31]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d105      	bne.n	800c56a <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c55e:	4b28      	ldr	r3, [pc, #160]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c562:	4a27      	ldr	r2, [pc, #156]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0320 	and.w	r3, r3, #32
 800c572:	2b00      	cmp	r3, #0
 800c574:	d04f      	beq.n	800c616 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d008      	beq.n	800c590 <HAL_RCC_OscConfig+0x4f8>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d004      	beq.n	800c590 <HAL_RCC_OscConfig+0x4f8>
 800c586:	f240 213b 	movw	r1, #571	; 0x23b
 800c58a:	481c      	ldr	r0, [pc, #112]	; (800c5fc <HAL_RCC_OscConfig+0x564>)
 800c58c:	f7fc fe61 	bl	8009252 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01c      	beq.n	800c5d2 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c598:	4b19      	ldr	r3, [pc, #100]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c59a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c59e:	4a18      	ldr	r2, [pc, #96]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c5a0:	f043 0301 	orr.w	r3, r3, #1
 800c5a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5a8:	f7fd fa3a 	bl	8009a20 <HAL_GetTick>
 800c5ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c5ae:	e008      	b.n	800c5c2 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c5b0:	f7fd fa36 	bl	8009a20 <HAL_GetTick>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	1ad3      	subs	r3, r2, r3
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d901      	bls.n	800c5c2 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	e176      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c5c2:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c5c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0ef      	beq.n	800c5b0 <HAL_RCC_OscConfig+0x518>
 800c5d0:	e021      	b.n	800c616 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c5d2:	4b0b      	ldr	r3, [pc, #44]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c5d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5d8:	4a09      	ldr	r2, [pc, #36]	; (800c600 <HAL_RCC_OscConfig+0x568>)
 800c5da:	f023 0301 	bic.w	r3, r3, #1
 800c5de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e2:	f7fd fa1d 	bl	8009a20 <HAL_GetTick>
 800c5e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c5e8:	e00e      	b.n	800c608 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c5ea:	f7fd fa19 	bl	8009a20 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d907      	bls.n	800c608 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e159      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
 800c5fc:	08014bb0 	.word	0x08014bb0
 800c600:	40021000 	.word	0x40021000
 800c604:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c608:	4b89      	ldr	r3, [pc, #548]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c60a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e9      	bne.n	800c5ea <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00c      	beq.n	800c638 <HAL_RCC_OscConfig+0x5a0>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d008      	beq.n	800c638 <HAL_RCC_OscConfig+0x5a0>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	69db      	ldr	r3, [r3, #28]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d004      	beq.n	800c638 <HAL_RCC_OscConfig+0x5a0>
 800c62e:	f44f 7119 	mov.w	r1, #612	; 0x264
 800c632:	4880      	ldr	r0, [pc, #512]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c634:	f7fc fe0d 	bl	8009252 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	69db      	ldr	r3, [r3, #28]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 8136 	beq.w	800c8ae <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c642:	4b7b      	ldr	r3, [pc, #492]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f003 030c 	and.w	r3, r3, #12
 800c64a:	2b0c      	cmp	r3, #12
 800c64c:	f000 80ea 	beq.w	800c824 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	2b02      	cmp	r3, #2
 800c656:	f040 80bd 	bne.w	800c7d4 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00c      	beq.n	800c67c <HAL_RCC_OscConfig+0x5e4>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	2b02      	cmp	r3, #2
 800c668:	d008      	beq.n	800c67c <HAL_RCC_OscConfig+0x5e4>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a1b      	ldr	r3, [r3, #32]
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d004      	beq.n	800c67c <HAL_RCC_OscConfig+0x5e4>
 800c672:	f240 216e 	movw	r1, #622	; 0x26e
 800c676:	486f      	ldr	r0, [pc, #444]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c678:	f7fc fdeb 	bl	8009252 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <HAL_RCC_OscConfig+0x5f4>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	2b10      	cmp	r3, #16
 800c68a:	d904      	bls.n	800c696 <HAL_RCC_OscConfig+0x5fe>
 800c68c:	f240 216f 	movw	r1, #623	; 0x26f
 800c690:	4868      	ldr	r0, [pc, #416]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c692:	f7fc fdde 	bl	8009252 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69a:	2b07      	cmp	r3, #7
 800c69c:	d903      	bls.n	800c6a6 <HAL_RCC_OscConfig+0x60e>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c6a4:	d904      	bls.n	800c6b0 <HAL_RCC_OscConfig+0x618>
 800c6a6:	f44f 711c 	mov.w	r1, #624	; 0x270
 800c6aa:	4862      	ldr	r0, [pc, #392]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c6ac:	f7fc fdd1 	bl	8009252 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d903      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x628>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	2b1f      	cmp	r3, #31
 800c6be:	d904      	bls.n	800c6ca <HAL_RCC_OscConfig+0x632>
 800c6c0:	f240 2171 	movw	r1, #625	; 0x271
 800c6c4:	485b      	ldr	r0, [pc, #364]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c6c6:	f7fc fdc4 	bl	8009252 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d010      	beq.n	800c6f4 <HAL_RCC_OscConfig+0x65c>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	d00c      	beq.n	800c6f4 <HAL_RCC_OscConfig+0x65c>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6de:	2b06      	cmp	r3, #6
 800c6e0:	d008      	beq.n	800c6f4 <HAL_RCC_OscConfig+0x65c>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e6:	2b08      	cmp	r3, #8
 800c6e8:	d004      	beq.n	800c6f4 <HAL_RCC_OscConfig+0x65c>
 800c6ea:	f240 2172 	movw	r1, #626	; 0x272
 800c6ee:	4851      	ldr	r0, [pc, #324]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c6f0:	f7fc fdaf 	bl	8009252 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d010      	beq.n	800c71e <HAL_RCC_OscConfig+0x686>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c700:	2b04      	cmp	r3, #4
 800c702:	d00c      	beq.n	800c71e <HAL_RCC_OscConfig+0x686>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c708:	2b06      	cmp	r3, #6
 800c70a:	d008      	beq.n	800c71e <HAL_RCC_OscConfig+0x686>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c710:	2b08      	cmp	r3, #8
 800c712:	d004      	beq.n	800c71e <HAL_RCC_OscConfig+0x686>
 800c714:	f240 2173 	movw	r1, #627	; 0x273
 800c718:	4846      	ldr	r0, [pc, #280]	; (800c834 <HAL_RCC_OscConfig+0x79c>)
 800c71a:	f7fc fd9a 	bl	8009252 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c71e:	4b44      	ldr	r3, [pc, #272]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a43      	ldr	r2, [pc, #268]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c72a:	f7fd f979 	bl	8009a20 <HAL_GetTick>
 800c72e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c730:	e008      	b.n	800c744 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c732:	f7fd f975 	bl	8009a20 <HAL_GetTick>
 800c736:	4602      	mov	r2, r0
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d901      	bls.n	800c744 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800c740:	2303      	movs	r3, #3
 800c742:	e0b5      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c744:	4b3a      	ldr	r3, [pc, #232]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1f0      	bne.n	800c732 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c750:	4b37      	ldr	r3, [pc, #220]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c752:	68da      	ldr	r2, [r3, #12]
 800c754:	4b38      	ldr	r3, [pc, #224]	; (800c838 <HAL_RCC_OscConfig+0x7a0>)
 800c756:	4013      	ands	r3, r2
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	6a11      	ldr	r1, [r2, #32]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c760:	3a01      	subs	r2, #1
 800c762:	0112      	lsls	r2, r2, #4
 800c764:	4311      	orrs	r1, r2
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c76a:	0212      	lsls	r2, r2, #8
 800c76c:	4311      	orrs	r1, r2
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c772:	0852      	lsrs	r2, r2, #1
 800c774:	3a01      	subs	r2, #1
 800c776:	0552      	lsls	r2, r2, #21
 800c778:	4311      	orrs	r1, r2
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c77e:	0852      	lsrs	r2, r2, #1
 800c780:	3a01      	subs	r2, #1
 800c782:	0652      	lsls	r2, r2, #25
 800c784:	4311      	orrs	r1, r2
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c78a:	06d2      	lsls	r2, r2, #27
 800c78c:	430a      	orrs	r2, r1
 800c78e:	4928      	ldr	r1, [pc, #160]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c790:	4313      	orrs	r3, r2
 800c792:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c794:	4b26      	ldr	r3, [pc, #152]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a25      	ldr	r2, [pc, #148]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c79a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c79e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7a0:	4b23      	ldr	r3, [pc, #140]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	4a22      	ldr	r2, [pc, #136]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ac:	f7fd f938 	bl	8009a20 <HAL_GetTick>
 800c7b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7b2:	e008      	b.n	800c7c6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7b4:	f7fd f934 	bl	8009a20 <HAL_GetTick>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d901      	bls.n	800c7c6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e074      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7c6:	4b1a      	ldr	r3, [pc, #104]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0f0      	beq.n	800c7b4 <HAL_RCC_OscConfig+0x71c>
 800c7d2:	e06c      	b.n	800c8ae <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7d4:	4b16      	ldr	r3, [pc, #88]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a15      	ldr	r2, [pc, #84]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7de:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c7e0:	4b13      	ldr	r3, [pc, #76]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	4a12      	ldr	r2, [pc, #72]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7e6:	f023 0303 	bic.w	r3, r3, #3
 800c7ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c7ec:	4b10      	ldr	r3, [pc, #64]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	4a0f      	ldr	r2, [pc, #60]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c7f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c7f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7fc:	f7fd f910 	bl	8009a20 <HAL_GetTick>
 800c800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c802:	e008      	b.n	800c816 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c804:	f7fd f90c 	bl	8009a20 <HAL_GetTick>
 800c808:	4602      	mov	r2, r0
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d901      	bls.n	800c816 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e04c      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c816:	4b06      	ldr	r3, [pc, #24]	; (800c830 <HAL_RCC_OscConfig+0x798>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f0      	bne.n	800c804 <HAL_RCC_OscConfig+0x76c>
 800c822:	e044      	b.n	800c8ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	69db      	ldr	r3, [r3, #28]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d107      	bne.n	800c83c <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	e03f      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
 800c830:	40021000 	.word	0x40021000
 800c834:	08014bb0 	.word	0x08014bb0
 800c838:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c83c:	4b1e      	ldr	r3, [pc, #120]	; (800c8b8 <HAL_RCC_OscConfig+0x820>)
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f003 0203 	and.w	r2, r3, #3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d12c      	bne.n	800c8aa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85a:	3b01      	subs	r3, #1
 800c85c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c85e:	429a      	cmp	r2, r3
 800c860:	d123      	bne.n	800c8aa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c86e:	429a      	cmp	r2, r3
 800c870:	d11b      	bne.n	800c8aa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c87e:	429a      	cmp	r2, r3
 800c880:	d113      	bne.n	800c8aa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88c:	085b      	lsrs	r3, r3, #1
 800c88e:	3b01      	subs	r3, #1
 800c890:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c892:	429a      	cmp	r2, r3
 800c894:	d109      	bne.n	800c8aa <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a0:	085b      	lsrs	r3, r3, #1
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d001      	beq.n	800c8ae <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3720      	adds	r7, #32
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	40021000 	.word	0x40021000

0800c8bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e1e2      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 030f 	and.w	r3, r3, #15
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d005      	beq.n	800c8ec <HAL_RCC_ClockConfig+0x30>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f023 030f 	bic.w	r3, r3, #15
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <HAL_RCC_ClockConfig+0x3a>
 800c8ec:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800c8f0:	4869      	ldr	r0, [pc, #420]	; (800ca98 <HAL_RCC_ClockConfig+0x1dc>)
 800c8f2:	f7fc fcae 	bl	8009252 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d031      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d02e      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2b02      	cmp	r3, #2
 800c906:	d02b      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d028      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b04      	cmp	r3, #4
 800c912:	d025      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2b05      	cmp	r3, #5
 800c918:	d022      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b06      	cmp	r3, #6
 800c91e:	d01f      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	2b07      	cmp	r3, #7
 800c924:	d01c      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b08      	cmp	r3, #8
 800c92a:	d019      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2b09      	cmp	r3, #9
 800c930:	d016      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b0a      	cmp	r3, #10
 800c936:	d013      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	2b0b      	cmp	r3, #11
 800c93c:	d010      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b0c      	cmp	r3, #12
 800c942:	d00d      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b0d      	cmp	r3, #13
 800c948:	d00a      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b0e      	cmp	r3, #14
 800c94e:	d007      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	2b0f      	cmp	r3, #15
 800c954:	d004      	beq.n	800c960 <HAL_RCC_ClockConfig+0xa4>
 800c956:	f240 310d 	movw	r1, #781	; 0x30d
 800c95a:	484f      	ldr	r0, [pc, #316]	; (800ca98 <HAL_RCC_ClockConfig+0x1dc>)
 800c95c:	f7fc fc79 	bl	8009252 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c960:	4b4e      	ldr	r3, [pc, #312]	; (800ca9c <HAL_RCC_ClockConfig+0x1e0>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 030f 	and.w	r3, r3, #15
 800c968:	683a      	ldr	r2, [r7, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d910      	bls.n	800c990 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c96e:	4b4b      	ldr	r3, [pc, #300]	; (800ca9c <HAL_RCC_ClockConfig+0x1e0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f023 020f 	bic.w	r2, r3, #15
 800c976:	4949      	ldr	r1, [pc, #292]	; (800ca9c <HAL_RCC_ClockConfig+0x1e0>)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c97e:	4b47      	ldr	r3, [pc, #284]	; (800ca9c <HAL_RCC_ClockConfig+0x1e0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 030f 	and.w	r3, r3, #15
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d001      	beq.n	800c990 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e184      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 808e 	beq.w	800caba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d00c      	beq.n	800c9c0 <HAL_RCC_ClockConfig+0x104>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d008      	beq.n	800c9c0 <HAL_RCC_ClockConfig+0x104>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	2b03      	cmp	r3, #3
 800c9b4:	d004      	beq.n	800c9c0 <HAL_RCC_ClockConfig+0x104>
 800c9b6:	f44f 7149 	mov.w	r1, #804	; 0x324
 800c9ba:	4837      	ldr	r0, [pc, #220]	; (800ca98 <HAL_RCC_ClockConfig+0x1dc>)
 800c9bc:	f7fc fc49 	bl	8009252 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d129      	bne.n	800ca1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c9c8:	4b35      	ldr	r3, [pc, #212]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e160      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c9d8:	f000 fa76 	bl	800cec8 <RCC_GetSysClockFreqFromPLLSource>
 800c9dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	4a30      	ldr	r2, [pc, #192]	; (800caa4 <HAL_RCC_ClockConfig+0x1e8>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d93f      	bls.n	800ca66 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d009      	beq.n	800ca06 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d033      	beq.n	800ca66 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d12f      	bne.n	800ca66 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca06:	4b26      	ldr	r3, [pc, #152]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca0e:	4a24      	ldr	r2, [pc, #144]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ca16:	2380      	movs	r3, #128	; 0x80
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	e024      	b.n	800ca66 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d107      	bne.n	800ca34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca24:	4b1e      	ldr	r3, [pc, #120]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d109      	bne.n	800ca44 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e132      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca34:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e12a      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ca44:	f000 f93a 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800ca48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	4a15      	ldr	r2, [pc, #84]	; (800caa4 <HAL_RCC_ClockConfig+0x1e8>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d909      	bls.n	800ca66 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca52:	4b13      	ldr	r3, [pc, #76]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca5a:	4a11      	ldr	r2, [pc, #68]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ca62:	2380      	movs	r3, #128	; 0x80
 800ca64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ca66:	4b0e      	ldr	r3, [pc, #56]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f023 0203 	bic.w	r2, r3, #3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	490b      	ldr	r1, [pc, #44]	; (800caa0 <HAL_RCC_ClockConfig+0x1e4>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca78:	f7fc ffd2 	bl	8009a20 <HAL_GetTick>
 800ca7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca7e:	e013      	b.n	800caa8 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca80:	f7fc ffce 	bl	8009a20 <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d90a      	bls.n	800caa8 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e101      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
 800ca96:	bf00      	nop
 800ca98:	08014bb0 	.word	0x08014bb0
 800ca9c:	40022000 	.word	0x40022000
 800caa0:	40021000 	.word	0x40021000
 800caa4:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800caa8:	4b7e      	ldr	r3, [pc, #504]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f003 020c 	and.w	r2, r3, #12
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d1e2      	bne.n	800ca80 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 0302 	and.w	r3, r3, #2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d04c      	beq.n	800cb60 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f003 0304 	and.w	r3, r3, #4
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d005      	beq.n	800cade <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cad2:	4b74      	ldr	r3, [pc, #464]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	4a73      	ldr	r2, [pc, #460]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cad8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cadc:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0308 	and.w	r3, r3, #8
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800caea:	4b6e      	ldr	r3, [pc, #440]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800caf2:	4a6c      	ldr	r2, [pc, #432]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800caf4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800caf8:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d024      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	689b      	ldr	r3, [r3, #8]
 800cb06:	2b80      	cmp	r3, #128	; 0x80
 800cb08:	d020      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	2b90      	cmp	r3, #144	; 0x90
 800cb10:	d01c      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	2ba0      	cmp	r3, #160	; 0xa0
 800cb18:	d018      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	2bb0      	cmp	r3, #176	; 0xb0
 800cb20:	d014      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	2bc0      	cmp	r3, #192	; 0xc0
 800cb28:	d010      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	2bd0      	cmp	r3, #208	; 0xd0
 800cb30:	d00c      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	2be0      	cmp	r3, #224	; 0xe0
 800cb38:	d008      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	2bf0      	cmp	r3, #240	; 0xf0
 800cb40:	d004      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x290>
 800cb42:	f240 317b 	movw	r1, #891	; 0x37b
 800cb46:	4858      	ldr	r0, [pc, #352]	; (800cca8 <HAL_RCC_ClockConfig+0x3ec>)
 800cb48:	f7fc fb83 	bl	8009252 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb4c:	4b55      	ldr	r3, [pc, #340]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	4952      	ldr	r1, [pc, #328]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	608b      	str	r3, [r1, #8]
 800cb5e:	e008      	b.n	800cb72 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	2b80      	cmp	r3, #128	; 0x80
 800cb64:	d105      	bne.n	800cb72 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cb66:	4b4f      	ldr	r3, [pc, #316]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	4a4e      	ldr	r2, [pc, #312]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cb6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb72:	4b4e      	ldr	r3, [pc, #312]	; (800ccac <HAL_RCC_ClockConfig+0x3f0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 030f 	and.w	r3, r3, #15
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d21d      	bcs.n	800cbbc <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb80:	4b4a      	ldr	r3, [pc, #296]	; (800ccac <HAL_RCC_ClockConfig+0x3f0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f023 020f 	bic.w	r2, r3, #15
 800cb88:	4948      	ldr	r1, [pc, #288]	; (800ccac <HAL_RCC_ClockConfig+0x3f0>)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cb90:	f7fc ff46 	bl	8009a20 <HAL_GetTick>
 800cb94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb96:	e00a      	b.n	800cbae <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb98:	f7fc ff42 	bl	8009a20 <HAL_GetTick>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d901      	bls.n	800cbae <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e075      	b.n	800cc9a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbae:	4b3f      	ldr	r3, [pc, #252]	; (800ccac <HAL_RCC_ClockConfig+0x3f0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 030f 	and.w	r3, r3, #15
 800cbb6:	683a      	ldr	r2, [r7, #0]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d1ed      	bne.n	800cb98 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0304 	and.w	r3, r3, #4
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d025      	beq.n	800cc14 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d018      	beq.n	800cc02 <HAL_RCC_ClockConfig+0x346>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbd8:	d013      	beq.n	800cc02 <HAL_RCC_ClockConfig+0x346>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cbe2:	d00e      	beq.n	800cc02 <HAL_RCC_ClockConfig+0x346>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cbec:	d009      	beq.n	800cc02 <HAL_RCC_ClockConfig+0x346>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cbf6:	d004      	beq.n	800cc02 <HAL_RCC_ClockConfig+0x346>
 800cbf8:	f240 319d 	movw	r1, #925	; 0x39d
 800cbfc:	482a      	ldr	r0, [pc, #168]	; (800cca8 <HAL_RCC_ClockConfig+0x3ec>)
 800cbfe:	f7fc fb28 	bl	8009252 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc02:	4b28      	ldr	r3, [pc, #160]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	4925      	ldr	r1, [pc, #148]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cc10:	4313      	orrs	r3, r2
 800cc12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0308 	and.w	r3, r3, #8
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d026      	beq.n	800cc6e <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d018      	beq.n	800cc5a <HAL_RCC_ClockConfig+0x39e>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc30:	d013      	beq.n	800cc5a <HAL_RCC_ClockConfig+0x39e>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cc3a:	d00e      	beq.n	800cc5a <HAL_RCC_ClockConfig+0x39e>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cc44:	d009      	beq.n	800cc5a <HAL_RCC_ClockConfig+0x39e>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc4e:	d004      	beq.n	800cc5a <HAL_RCC_ClockConfig+0x39e>
 800cc50:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800cc54:	4814      	ldr	r0, [pc, #80]	; (800cca8 <HAL_RCC_ClockConfig+0x3ec>)
 800cc56:	f7fc fafc 	bl	8009252 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	490e      	ldr	r1, [pc, #56]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cc6e:	f000 f825 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800cc72:	4602      	mov	r2, r0
 800cc74:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <HAL_RCC_ClockConfig+0x3e8>)
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	091b      	lsrs	r3, r3, #4
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	490c      	ldr	r1, [pc, #48]	; (800ccb0 <HAL_RCC_ClockConfig+0x3f4>)
 800cc80:	5ccb      	ldrb	r3, [r1, r3]
 800cc82:	f003 031f 	and.w	r3, r3, #31
 800cc86:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8a:	4a0a      	ldr	r2, [pc, #40]	; (800ccb4 <HAL_RCC_ClockConfig+0x3f8>)
 800cc8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cc8e:	4b0a      	ldr	r3, [pc, #40]	; (800ccb8 <HAL_RCC_ClockConfig+0x3fc>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fc fbec 	bl	8009470 <HAL_InitTick>
 800cc98:	4603      	mov	r3, r0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	40021000 	.word	0x40021000
 800cca8:	08014bb0 	.word	0x08014bb0
 800ccac:	40022000 	.word	0x40022000
 800ccb0:	08016ab4 	.word	0x08016ab4
 800ccb4:	20000b10 	.word	0x20000b10
 800ccb8:	20000b14 	.word	0x20000b14

0800ccbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ccc2:	4b2c      	ldr	r3, [pc, #176]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f003 030c 	and.w	r3, r3, #12
 800ccca:	2b04      	cmp	r3, #4
 800cccc:	d102      	bne.n	800ccd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ccce:	4b2a      	ldr	r3, [pc, #168]	; (800cd78 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ccd0:	613b      	str	r3, [r7, #16]
 800ccd2:	e047      	b.n	800cd64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ccd4:	4b27      	ldr	r3, [pc, #156]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f003 030c 	and.w	r3, r3, #12
 800ccdc:	2b08      	cmp	r3, #8
 800ccde:	d102      	bne.n	800cce6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cce0:	4b25      	ldr	r3, [pc, #148]	; (800cd78 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cce2:	613b      	str	r3, [r7, #16]
 800cce4:	e03e      	b.n	800cd64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cce6:	4b23      	ldr	r3, [pc, #140]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	f003 030c 	and.w	r3, r3, #12
 800ccee:	2b0c      	cmp	r3, #12
 800ccf0:	d136      	bne.n	800cd60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ccf2:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	f003 0303 	and.w	r3, r3, #3
 800ccfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ccfc:	4b1d      	ldr	r3, [pc, #116]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	091b      	lsrs	r3, r3, #4
 800cd02:	f003 030f 	and.w	r3, r3, #15
 800cd06:	3301      	adds	r3, #1
 800cd08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b03      	cmp	r3, #3
 800cd0e:	d10c      	bne.n	800cd2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd10:	4a19      	ldr	r2, [pc, #100]	; (800cd78 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd18:	4a16      	ldr	r2, [pc, #88]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd1a:	68d2      	ldr	r2, [r2, #12]
 800cd1c:	0a12      	lsrs	r2, r2, #8
 800cd1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd22:	fb02 f303 	mul.w	r3, r2, r3
 800cd26:	617b      	str	r3, [r7, #20]
      break;
 800cd28:	e00c      	b.n	800cd44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cd2a:	4a13      	ldr	r2, [pc, #76]	; (800cd78 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd32:	4a10      	ldr	r2, [pc, #64]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd34:	68d2      	ldr	r2, [r2, #12]
 800cd36:	0a12      	lsrs	r2, r2, #8
 800cd38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd3c:	fb02 f303 	mul.w	r3, r2, r3
 800cd40:	617b      	str	r3, [r7, #20]
      break;
 800cd42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cd44:	4b0b      	ldr	r3, [pc, #44]	; (800cd74 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	0e5b      	lsrs	r3, r3, #25
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	3301      	adds	r3, #1
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd5c:	613b      	str	r3, [r7, #16]
 800cd5e:	e001      	b.n	800cd64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cd60:	2300      	movs	r3, #0
 800cd62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cd64:	693b      	ldr	r3, [r7, #16]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	40021000 	.word	0x40021000
 800cd78:	00f42400 	.word	0x00f42400

0800cd7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd80:	4b03      	ldr	r3, [pc, #12]	; (800cd90 <HAL_RCC_GetHCLKFreq+0x14>)
 800cd82:	681b      	ldr	r3, [r3, #0]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	20000b10 	.word	0x20000b10

0800cd94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cd98:	f7ff fff0 	bl	800cd7c <HAL_RCC_GetHCLKFreq>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	0a1b      	lsrs	r3, r3, #8
 800cda4:	f003 0307 	and.w	r3, r3, #7
 800cda8:	4904      	ldr	r1, [pc, #16]	; (800cdbc <HAL_RCC_GetPCLK1Freq+0x28>)
 800cdaa:	5ccb      	ldrb	r3, [r1, r3]
 800cdac:	f003 031f 	and.w	r3, r3, #31
 800cdb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	40021000 	.word	0x40021000
 800cdbc:	08016ac4 	.word	0x08016ac4

0800cdc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cdc4:	f7ff ffda 	bl	800cd7c <HAL_RCC_GetHCLKFreq>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	4b06      	ldr	r3, [pc, #24]	; (800cde4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	0adb      	lsrs	r3, r3, #11
 800cdd0:	f003 0307 	and.w	r3, r3, #7
 800cdd4:	4904      	ldr	r1, [pc, #16]	; (800cde8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cdd6:	5ccb      	ldrb	r3, [r1, r3]
 800cdd8:	f003 031f 	and.w	r3, r3, #31
 800cddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	40021000 	.word	0x40021000
 800cde8:	08016ac4 	.word	0x08016ac4

0800cdec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <HAL_RCC_GetClockConfig+0x1a>
 800cdfc:	f240 41e4 	movw	r1, #1252	; 0x4e4
 800ce00:	4818      	ldr	r0, [pc, #96]	; (800ce64 <HAL_RCC_GetClockConfig+0x78>)
 800ce02:	f7fc fa26 	bl	8009252 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d104      	bne.n	800ce16 <HAL_RCC_GetClockConfig+0x2a>
 800ce0c:	f240 41e5 	movw	r1, #1253	; 0x4e5
 800ce10:	4814      	ldr	r0, [pc, #80]	; (800ce64 <HAL_RCC_GetClockConfig+0x78>)
 800ce12:	f7fc fa1e 	bl	8009252 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220f      	movs	r2, #15
 800ce1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ce1c:	4b12      	ldr	r3, [pc, #72]	; (800ce68 <HAL_RCC_GetClockConfig+0x7c>)
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	f003 0203 	and.w	r2, r3, #3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <HAL_RCC_GetClockConfig+0x7c>)
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ce34:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <HAL_RCC_GetClockConfig+0x7c>)
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ce40:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <HAL_RCC_GetClockConfig+0x7c>)
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	08db      	lsrs	r3, r3, #3
 800ce46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <HAL_RCC_GetClockConfig+0x80>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 020f 	and.w	r2, r3, #15
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	601a      	str	r2, [r3, #0]
}
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	08014bb0 	.word	0x08014bb0
 800ce68:	40021000 	.word	0x40021000
 800ce6c:	40022000 	.word	0x40022000

0800ce70 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800ce74:	4b05      	ldr	r3, [pc, #20]	; (800ce8c <HAL_RCC_EnableCSS+0x1c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a04      	ldr	r2, [pc, #16]	; (800ce8c <HAL_RCC_EnableCSS+0x1c>)
 800ce7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce7e:	6013      	str	r3, [r2, #0]
}
 800ce80:	bf00      	nop
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	40021000 	.word	0x40021000

0800ce90 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ce94:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cea0:	d105      	bne.n	800ceae <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800cea2:	f000 f809 	bl	800ceb8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800cea6:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800cea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ceac:	621a      	str	r2, [r3, #32]
  }
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	40021000 	.word	0x40021000

0800ceb8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800cebc:	bf00      	nop
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
	...

0800cec8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cece:	4b1e      	ldr	r3, [pc, #120]	; (800cf48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ced8:	4b1b      	ldr	r3, [pc, #108]	; (800cf48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	091b      	lsrs	r3, r3, #4
 800cede:	f003 030f 	and.w	r3, r3, #15
 800cee2:	3301      	adds	r3, #1
 800cee4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d10c      	bne.n	800cf06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ceec:	4a17      	ldr	r2, [pc, #92]	; (800cf4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef4:	4a14      	ldr	r2, [pc, #80]	; (800cf48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cef6:	68d2      	ldr	r2, [r2, #12]
 800cef8:	0a12      	lsrs	r2, r2, #8
 800cefa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cefe:	fb02 f303 	mul.w	r3, r2, r3
 800cf02:	617b      	str	r3, [r7, #20]
    break;
 800cf04:	e00c      	b.n	800cf20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf06:	4a11      	ldr	r2, [pc, #68]	; (800cf4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0e:	4a0e      	ldr	r2, [pc, #56]	; (800cf48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf10:	68d2      	ldr	r2, [r2, #12]
 800cf12:	0a12      	lsrs	r2, r2, #8
 800cf14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf18:	fb02 f303 	mul.w	r3, r2, r3
 800cf1c:	617b      	str	r3, [r7, #20]
    break;
 800cf1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cf20:	4b09      	ldr	r3, [pc, #36]	; (800cf48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	0e5b      	lsrs	r3, r3, #25
 800cf26:	f003 0303 	and.w	r3, r3, #3
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cf3a:	687b      	ldr	r3, [r7, #4]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	371c      	adds	r7, #28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	40021000 	.word	0x40021000
 800cf4c:	00f42400 	.word	0x00f42400

0800cf50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cf58:	2300      	movs	r3, #0
 800cf5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d175      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 0302 	and.w	r3, r3, #2
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d16f      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0304 	and.w	r3, r3, #4
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d169      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f003 0308 	and.w	r3, r3, #8
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d163      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0310 	and.w	r3, r3, #16
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d15d      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 0320 	and.w	r3, r3, #32
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d157      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d151      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d14b      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d145      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d13f      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d139      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d133      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d12d      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d127      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d121      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d11b      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d115      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10f      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d109      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d103      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800d050:	2183      	movs	r1, #131	; 0x83
 800d052:	4855      	ldr	r0, [pc, #340]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d054:	f7fc f8fd 	bl	8009252 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 80b2 	beq.w	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d066:	2300      	movs	r3, #0
 800d068:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d012      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d07a:	d00d      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d084:	d008      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d08a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d08e:	d003      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800d090:	218b      	movs	r1, #139	; 0x8b
 800d092:	4845      	ldr	r0, [pc, #276]	; (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d094:	f7fc f8dd 	bl	8009252 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d098:	4b44      	ldr	r3, [pc, #272]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d09a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d09c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10d      	bne.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0a4:	4b41      	ldr	r3, [pc, #260]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a8:	4a40      	ldr	r2, [pc, #256]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ae:	6593      	str	r3, [r2, #88]	; 0x58
 800d0b0:	4b3e      	ldr	r3, [pc, #248]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0b8:	60bb      	str	r3, [r7, #8]
 800d0ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d0c0:	4b3b      	ldr	r3, [pc, #236]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a3a      	ldr	r2, [pc, #232]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d0cc:	f7fc fca8 	bl	8009a20 <HAL_GetTick>
 800d0d0:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0d2:	e009      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0d4:	f7fc fca4 	bl	8009a20 <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d902      	bls.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	74fb      	strb	r3, [r7, #19]
        break;
 800d0e6:	e005      	b.n	800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0e8:	4b31      	ldr	r3, [pc, #196]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0ef      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800d0f4:	7cfb      	ldrb	r3, [r7, #19]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d15c      	bne.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d0fa:	4b2c      	ldr	r3, [pc, #176]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d104:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01e      	beq.n	800d14a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	429a      	cmp	r2, r3
 800d114:	d019      	beq.n	800d14a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d116:	4b25      	ldr	r3, [pc, #148]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d120:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d122:	4b22      	ldr	r3, [pc, #136]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d128:	4a20      	ldr	r2, [pc, #128]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d12a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d12e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d132:	4b1e      	ldr	r3, [pc, #120]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d138:	4a1c      	ldr	r2, [pc, #112]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d13a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d13e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d142:	4a1a      	ldr	r2, [pc, #104]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	d016      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d154:	f7fc fc64 	bl	8009a20 <HAL_GetTick>
 800d158:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d15a:	e00b      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d15c:	f7fc fc60 	bl	8009a20 <HAL_GetTick>
 800d160:	4602      	mov	r2, r0
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	f241 3288 	movw	r2, #5000	; 0x1388
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d902      	bls.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800d16e:	2303      	movs	r3, #3
 800d170:	74fb      	strb	r3, [r7, #19]
            break;
 800d172:	e006      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d174:	4b0d      	ldr	r3, [pc, #52]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d17a:	f003 0302 	and.w	r3, r3, #2
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0ec      	beq.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d182:	7cfb      	ldrb	r3, [r7, #19]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10b      	bne.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d188:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d196:	4905      	ldr	r1, [pc, #20]	; (800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d19e:	e00b      	b.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d1a0:	7cfb      	ldrb	r3, [r7, #19]
 800d1a2:	74bb      	strb	r3, [r7, #18]
 800d1a4:	e008      	b.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d1a6:	bf00      	nop
 800d1a8:	08014be8 	.word	0x08014be8
 800d1ac:	40021000 	.word	0x40021000
 800d1b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1b4:	7cfb      	ldrb	r3, [r7, #19]
 800d1b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d1b8:	7c7b      	ldrb	r3, [r7, #17]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d105      	bne.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1be:	4b9a      	ldr	r3, [pc, #616]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1c2:	4a99      	ldr	r2, [pc, #612]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d1c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d01e      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00f      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d00b      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d007      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d003      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800d1f6:	21e0      	movs	r1, #224	; 0xe0
 800d1f8:	488c      	ldr	r0, [pc, #560]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d1fa:	f7fc f82a 	bl	8009252 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d1fe:	4b8a      	ldr	r3, [pc, #552]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d204:	f023 0203 	bic.w	r2, r3, #3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	4986      	ldr	r1, [pc, #536]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0302 	and.w	r3, r3, #2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01e      	beq.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00f      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	d00b      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	2b0c      	cmp	r3, #12
 800d236:	d007      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	2b08      	cmp	r3, #8
 800d23e:	d003      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800d240:	21ea      	movs	r1, #234	; 0xea
 800d242:	487a      	ldr	r0, [pc, #488]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d244:	f7fc f805 	bl	8009252 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d248:	4b77      	ldr	r3, [pc, #476]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d24e:	f023 020c 	bic.w	r2, r3, #12
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	4974      	ldr	r1, [pc, #464]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d258:	4313      	orrs	r3, r2
 800d25a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 0304 	and.w	r3, r3, #4
 800d266:	2b00      	cmp	r3, #0
 800d268:	d01e      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00f      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	2b10      	cmp	r3, #16
 800d278:	d00b      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	2b30      	cmp	r3, #48	; 0x30
 800d280:	d007      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	2b20      	cmp	r3, #32
 800d288:	d003      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d28a:	21f4      	movs	r1, #244	; 0xf4
 800d28c:	4867      	ldr	r0, [pc, #412]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d28e:	f7fb ffe0 	bl	8009252 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d292:	4b65      	ldr	r3, [pc, #404]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	4961      	ldr	r1, [pc, #388]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 0308 	and.w	r3, r3, #8
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01e      	beq.n	800d2f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	691b      	ldr	r3, [r3, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00f      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	2b40      	cmp	r3, #64	; 0x40
 800d2c2:	d00b      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	2bc0      	cmp	r3, #192	; 0xc0
 800d2ca:	d007      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	2b80      	cmp	r3, #128	; 0x80
 800d2d2:	d003      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800d2d4:	21ff      	movs	r1, #255	; 0xff
 800d2d6:	4855      	ldr	r0, [pc, #340]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d2d8:	f7fb ffbb 	bl	8009252 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d2dc:	4b52      	ldr	r3, [pc, #328]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	494f      	ldr	r1, [pc, #316]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0310 	and.w	r3, r3, #16
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d022      	beq.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d013      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d30e:	d00e      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d318:	d009      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d322:	d004      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800d324:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800d328:	4840      	ldr	r0, [pc, #256]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d32a:	f7fb ff92 	bl	8009252 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d32e:	4b3e      	ldr	r3, [pc, #248]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	493a      	ldr	r1, [pc, #232]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0320 	and.w	r3, r3, #32
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d022      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d013      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d360:	d00e      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d36a:	d009      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d374:	d004      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800d376:	f44f 718c 	mov.w	r1, #280	; 0x118
 800d37a:	482c      	ldr	r0, [pc, #176]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d37c:	f7fb ff69 	bl	8009252 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d380:	4b29      	ldr	r3, [pc, #164]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d386:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	4926      	ldr	r1, [pc, #152]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d390:	4313      	orrs	r3, r2
 800d392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d01d      	beq.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00e      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	69db      	ldr	r3, [r3, #28]
 800d3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3b2:	d009      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3bc:	d004      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800d3be:	f44f 7191 	mov.w	r1, #290	; 0x122
 800d3c2:	481a      	ldr	r0, [pc, #104]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d3c4:	f7fb ff45 	bl	8009252 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d3c8:	4b17      	ldr	r3, [pc, #92]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	4914      	ldr	r1, [pc, #80]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d022      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00e      	beq.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3fa:	d009      	beq.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d404:	d004      	beq.n	800d410 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800d406:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d40a:	4808      	ldr	r0, [pc, #32]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800d40c:	f7fb ff21 	bl	8009252 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	4902      	ldr	r1, [pc, #8]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800d420:	4313      	orrs	r3, r2
 800d422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d426:	e003      	b.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800d428:	40021000 	.word	0x40021000
 800d42c:	08014be8 	.word	0x08014be8
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01d      	beq.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00e      	beq.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d44c:	d009      	beq.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d456:	d004      	beq.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800d458:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d45c:	489e      	ldr	r0, [pc, #632]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d45e:	f7fb fef8 	bl	8009252 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d462:	4b9e      	ldr	r3, [pc, #632]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d470:	499a      	ldr	r1, [pc, #616]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d472:	4313      	orrs	r3, r2
 800d474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d01b      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00c      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d490:	2b01      	cmp	r3, #1
 800d492:	d008      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d004      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800d49c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800d4a0:	488d      	ldr	r0, [pc, #564]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d4a2:	f7fb fed6 	bl	8009252 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d4a6:	4b8d      	ldr	r3, [pc, #564]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d4a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d4ac:	f023 0203 	bic.w	r2, r3, #3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b4:	4989      	ldr	r1, [pc, #548]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d022      	beq.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d013      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d4d8:	d00e      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d4e2:	d009      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d4ec:	d004      	beq.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800d4ee:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d4f2:	4879      	ldr	r0, [pc, #484]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d4f4:	f7fb fead 	bl	8009252 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d4f8:	4b78      	ldr	r3, [pc, #480]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4fe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d506:	4975      	ldr	r1, [pc, #468]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d508:	4313      	orrs	r3, r2
 800d50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d516:	2b00      	cmp	r3, #0
 800d518:	d02d      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d013      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d52a:	d00e      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d534:	d009      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d53e:	d004      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800d540:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d544:	4864      	ldr	r0, [pc, #400]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d546:	f7fb fe84 	bl	8009252 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d54a:	4b64      	ldr	r3, [pc, #400]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d558:	4960      	ldr	r1, [pc, #384]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d55a:	4313      	orrs	r3, r2
 800d55c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d568:	d105      	bne.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d56a:	4b5c      	ldr	r3, [pc, #368]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	4a5b      	ldr	r2, [pc, #364]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d574:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d02d      	beq.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d586:	2b00      	cmp	r3, #0
 800d588:	d013      	beq.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d592:	d00e      	beq.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d59c:	d009      	beq.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5a6:	d004      	beq.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d5a8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800d5ac:	484a      	ldr	r0, [pc, #296]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d5ae:	f7fb fe50 	bl	8009252 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d5b2:	4b4a      	ldr	r3, [pc, #296]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c0:	4946      	ldr	r1, [pc, #280]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5d0:	d105      	bne.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d5d2:	4b42      	ldr	r3, [pc, #264]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	4a41      	ldr	r2, [pc, #260]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d5d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5dc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d028      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00e      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d5fa:	d009      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d604:	d004      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800d606:	f240 1179 	movw	r1, #377	; 0x179
 800d60a:	4833      	ldr	r0, [pc, #204]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d60c:	f7fb fe21 	bl	8009252 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d610:	4b32      	ldr	r3, [pc, #200]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d616:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	492f      	ldr	r1, [pc, #188]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d620:	4313      	orrs	r3, r2
 800d622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d62e:	d105      	bne.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d630:	4b2a      	ldr	r3, [pc, #168]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	4a29      	ldr	r2, [pc, #164]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d63a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d644:	2b00      	cmp	r3, #0
 800d646:	d023      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d009      	beq.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d658:	d004      	beq.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800d65a:	f240 118b 	movw	r1, #395	; 0x18b
 800d65e:	481e      	ldr	r0, [pc, #120]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d660:	f7fb fdf7 	bl	8009252 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d664:	4b1d      	ldr	r3, [pc, #116]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d66a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	491a      	ldr	r1, [pc, #104]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d674:	4313      	orrs	r3, r2
 800d676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d682:	d105      	bne.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d684:	4b15      	ldr	r3, [pc, #84]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	4a14      	ldr	r2, [pc, #80]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d68a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d68e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d028      	beq.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d009      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6ac:	d004      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800d6ae:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d6b2:	4809      	ldr	r0, [pc, #36]	; (800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800d6b4:	f7fb fdcd 	bl	8009252 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d6b8:	4b08      	ldr	r3, [pc, #32]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	4905      	ldr	r1, [pc, #20]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6d6:	e003      	b.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800d6d8:	08014be8 	.word	0x08014be8
 800d6dc:	40021000 	.word	0x40021000
 800d6e0:	d105      	bne.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d6e2:	4b4c      	ldr	r3, [pc, #304]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	4a4b      	ldr	r2, [pc, #300]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d6e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d028      	beq.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00e      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d70a:	d009      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d714:	d004      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800d716:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800d71a:	483f      	ldr	r0, [pc, #252]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d71c:	f7fb fd99 	bl	8009252 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d720:	4b3c      	ldr	r3, [pc, #240]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d72e:	4939      	ldr	r1, [pc, #228]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d730:	4313      	orrs	r3, r2
 800d732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d73e:	d105      	bne.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d740:	4b34      	ldr	r3, [pc, #208]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	4a33      	ldr	r2, [pc, #204]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d74a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d754:	2b00      	cmp	r3, #0
 800d756:	d028      	beq.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00e      	beq.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d768:	d009      	beq.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d76e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d772:	d004      	beq.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800d774:	f240 11b9 	movw	r1, #441	; 0x1b9
 800d778:	4827      	ldr	r0, [pc, #156]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d77a:	f7fb fd6a 	bl	8009252 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d77e:	4b25      	ldr	r3, [pc, #148]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d784:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78c:	4921      	ldr	r1, [pc, #132]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d78e:	4313      	orrs	r3, r2
 800d790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d79c:	d105      	bne.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d79e:	4b1d      	ldr	r3, [pc, #116]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	4a1c      	ldr	r2, [pc, #112]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d7a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7a8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d028      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7be:	d00d      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d7d0:	d004      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800d7d2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800d7d6:	4810      	ldr	r0, [pc, #64]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800d7d8:	f7fb fd3b 	bl	8009252 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d7dc:	4b0d      	ldr	r3, [pc, #52]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d7de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d7e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ea:	490a      	ldr	r1, [pc, #40]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d7fa:	d105      	bne.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7fc:	4b05      	ldr	r3, [pc, #20]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	4a04      	ldr	r2, [pc, #16]	; (800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800d802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d806:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d808:	7cbb      	ldrb	r3, [r7, #18]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	40021000 	.word	0x40021000
 800d818:	08014be8 	.word	0x08014be8

0800d81c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e1ed      	b.n	800dc0a <HAL_SPI_Init+0x3ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a7e      	ldr	r2, [pc, #504]	; (800da2c <HAL_SPI_Init+0x210>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d013      	beq.n	800d860 <HAL_SPI_Init+0x44>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a7c      	ldr	r2, [pc, #496]	; (800da30 <HAL_SPI_Init+0x214>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d00e      	beq.n	800d860 <HAL_SPI_Init+0x44>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a7b      	ldr	r2, [pc, #492]	; (800da34 <HAL_SPI_Init+0x218>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d009      	beq.n	800d860 <HAL_SPI_Init+0x44>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a79      	ldr	r2, [pc, #484]	; (800da38 <HAL_SPI_Init+0x21c>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d004      	beq.n	800d860 <HAL_SPI_Init+0x44>
 800d856:	f240 1145 	movw	r1, #325	; 0x145
 800d85a:	4878      	ldr	r0, [pc, #480]	; (800da3c <HAL_SPI_Init+0x220>)
 800d85c:	f7fb fcf9 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d009      	beq.n	800d87c <HAL_SPI_Init+0x60>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d870:	d004      	beq.n	800d87c <HAL_SPI_Init+0x60>
 800d872:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800d876:	4871      	ldr	r0, [pc, #452]	; (800da3c <HAL_SPI_Init+0x220>)
 800d878:	f7fb fceb 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00e      	beq.n	800d8a2 <HAL_SPI_Init+0x86>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d88c:	d009      	beq.n	800d8a2 <HAL_SPI_Init+0x86>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d896:	d004      	beq.n	800d8a2 <HAL_SPI_Init+0x86>
 800d898:	f240 1147 	movw	r1, #327	; 0x147
 800d89c:	4867      	ldr	r0, [pc, #412]	; (800da3c <HAL_SPI_Init+0x220>)
 800d89e:	f7fb fcd8 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d8aa:	d040      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800d8b4:	d03b      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800d8be:	d036      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8c8:	d031      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800d8d2:	d02c      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d8dc:	d027      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800d8e6:	d022      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8f0:	d01d      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8fa:	d018      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d904:	d013      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d90e:	d00e      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d918:	d009      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d922:	d004      	beq.n	800d92e <HAL_SPI_Init+0x112>
 800d924:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800d928:	4844      	ldr	r0, [pc, #272]	; (800da3c <HAL_SPI_Init+0x220>)
 800d92a:	f7fb fc92 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d936:	d00d      	beq.n	800d954 <HAL_SPI_Init+0x138>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d009      	beq.n	800d954 <HAL_SPI_Init+0x138>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d948:	d004      	beq.n	800d954 <HAL_SPI_Init+0x138>
 800d94a:	f240 1149 	movw	r1, #329	; 0x149
 800d94e:	483b      	ldr	r0, [pc, #236]	; (800da3c <HAL_SPI_Init+0x220>)
 800d950:	f7fb fc7f 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d958:	2b08      	cmp	r3, #8
 800d95a:	d008      	beq.n	800d96e <HAL_SPI_Init+0x152>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <HAL_SPI_Init+0x152>
 800d964:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d968:	4834      	ldr	r0, [pc, #208]	; (800da3c <HAL_SPI_Init+0x220>)
 800d96a:	f7fb fc72 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d020      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	2b08      	cmp	r3, #8
 800d97c:	d01c      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	69db      	ldr	r3, [r3, #28]
 800d982:	2b10      	cmp	r3, #16
 800d984:	d018      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	2b18      	cmp	r3, #24
 800d98c:	d014      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	69db      	ldr	r3, [r3, #28]
 800d992:	2b20      	cmp	r3, #32
 800d994:	d010      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	69db      	ldr	r3, [r3, #28]
 800d99a:	2b28      	cmp	r3, #40	; 0x28
 800d99c:	d00c      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	69db      	ldr	r3, [r3, #28]
 800d9a2:	2b30      	cmp	r3, #48	; 0x30
 800d9a4:	d008      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	69db      	ldr	r3, [r3, #28]
 800d9aa:	2b38      	cmp	r3, #56	; 0x38
 800d9ac:	d004      	beq.n	800d9b8 <HAL_SPI_Init+0x19c>
 800d9ae:	f240 114b 	movw	r1, #331	; 0x14b
 800d9b2:	4822      	ldr	r0, [pc, #136]	; (800da3c <HAL_SPI_Init+0x220>)
 800d9b4:	f7fb fc4d 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a1b      	ldr	r3, [r3, #32]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <HAL_SPI_Init+0x1b6>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	2b80      	cmp	r3, #128	; 0x80
 800d9c6:	d004      	beq.n	800d9d2 <HAL_SPI_Init+0x1b6>
 800d9c8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800d9cc:	481b      	ldr	r0, [pc, #108]	; (800da3c <HAL_SPI_Init+0x220>)
 800d9ce:	f7fb fc40 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d008      	beq.n	800d9ec <HAL_SPI_Init+0x1d0>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9de:	2b10      	cmp	r3, #16
 800d9e0:	d004      	beq.n	800d9ec <HAL_SPI_Init+0x1d0>
 800d9e2:	f240 114d 	movw	r1, #333	; 0x14d
 800d9e6:	4815      	ldr	r0, [pc, #84]	; (800da3c <HAL_SPI_Init+0x220>)
 800d9e8:	f7fb fc33 	bl	8009252 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d154      	bne.n	800da9e <HAL_SPI_Init+0x282>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d008      	beq.n	800da0e <HAL_SPI_Init+0x1f2>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	2b02      	cmp	r3, #2
 800da02:	d004      	beq.n	800da0e <HAL_SPI_Init+0x1f2>
 800da04:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800da08:	480c      	ldr	r0, [pc, #48]	; (800da3c <HAL_SPI_Init+0x220>)
 800da0a:	f7fb fc22 	bl	8009252 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d014      	beq.n	800da40 <HAL_SPI_Init+0x224>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d010      	beq.n	800da40 <HAL_SPI_Init+0x224>
 800da1e:	f240 1151 	movw	r1, #337	; 0x151
 800da22:	4806      	ldr	r0, [pc, #24]	; (800da3c <HAL_SPI_Init+0x220>)
 800da24:	f7fb fc15 	bl	8009252 <assert_failed>
 800da28:	e00a      	b.n	800da40 <HAL_SPI_Init+0x224>
 800da2a:	bf00      	nop
 800da2c:	40013000 	.word	0x40013000
 800da30:	40003800 	.word	0x40003800
 800da34:	40003c00 	.word	0x40003c00
 800da38:	40013c00 	.word	0x40013c00
 800da3c:	08014c24 	.word	0x08014c24

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da48:	d125      	bne.n	800da96 <HAL_SPI_Init+0x27a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d050      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	2b08      	cmp	r3, #8
 800da58:	d04c      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	2b10      	cmp	r3, #16
 800da60:	d048      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	2b18      	cmp	r3, #24
 800da68:	d044      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	2b20      	cmp	r3, #32
 800da70:	d040      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	2b28      	cmp	r3, #40	; 0x28
 800da78:	d03c      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	2b30      	cmp	r3, #48	; 0x30
 800da80:	d038      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	69db      	ldr	r3, [r3, #28]
 800da86:	2b38      	cmp	r3, #56	; 0x38
 800da88:	d034      	beq.n	800daf4 <HAL_SPI_Init+0x2d8>
 800da8a:	f240 1155 	movw	r1, #341	; 0x155
 800da8e:	4861      	ldr	r0, [pc, #388]	; (800dc14 <HAL_SPI_Init+0x3f8>)
 800da90:	f7fb fbdf 	bl	8009252 <assert_failed>
 800da94:	e02e      	b.n	800daf4 <HAL_SPI_Init+0x2d8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	61da      	str	r2, [r3, #28]
 800da9c:	e02a      	b.n	800daf4 <HAL_SPI_Init+0x2d8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d020      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	69db      	ldr	r3, [r3, #28]
 800daaa:	2b08      	cmp	r3, #8
 800daac:	d01c      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	69db      	ldr	r3, [r3, #28]
 800dab2:	2b10      	cmp	r3, #16
 800dab4:	d018      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	2b18      	cmp	r3, #24
 800dabc:	d014      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	69db      	ldr	r3, [r3, #28]
 800dac2:	2b20      	cmp	r3, #32
 800dac4:	d010      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	2b28      	cmp	r3, #40	; 0x28
 800dacc:	d00c      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	2b30      	cmp	r3, #48	; 0x30
 800dad4:	d008      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	69db      	ldr	r3, [r3, #28]
 800dada:	2b38      	cmp	r3, #56	; 0x38
 800dadc:	d004      	beq.n	800dae8 <HAL_SPI_Init+0x2cc>
 800dade:	f240 115f 	movw	r1, #351	; 0x15f
 800dae2:	484c      	ldr	r0, [pc, #304]	; (800dc14 <HAL_SPI_Init+0x3f8>)
 800dae4:	f7fb fbb5 	bl	8009252 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db00:	b2db      	uxtb	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <HAL_SPI_Init+0x2f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7fb fbe8 	bl	80092e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2202      	movs	r2, #2
 800db18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db34:	d902      	bls.n	800db3c <HAL_SPI_Init+0x320>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
 800db3a:	e002      	b.n	800db42 <HAL_SPI_Init+0x326>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800db3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800db4a:	d007      	beq.n	800db5c <HAL_SPI_Init+0x340>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db54:	d002      	beq.n	800db5c <HAL_SPI_Init+0x340>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800db6c:	431a      	orrs	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	f003 0302 	and.w	r3, r3, #2
 800db76:	431a      	orrs	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db8a:	431a      	orrs	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	69db      	ldr	r3, [r3, #28]
 800db90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db9e:	ea42 0103 	orr.w	r1, r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	0c1b      	lsrs	r3, r3, #16
 800dbb8:	f003 0204 	and.w	r2, r3, #4
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	f003 0310 	and.w	r3, r3, #16
 800dbc4:	431a      	orrs	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbca:	f003 0308 	and.w	r3, r3, #8
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dbd8:	ea42 0103 	orr.w	r1, r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	430a      	orrs	r2, r1
 800dbe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	69da      	ldr	r2, [r3, #28]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08014c24 	.word	0x08014c24

0800dc18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	4613      	mov	r3, r2
 800dc24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc26:	2300      	movs	r3, #0
 800dc28:	75fb      	strb	r3, [r7, #23]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d104      	bne.n	800dc3c <HAL_SPI_Transmit_DMA+0x24>
 800dc32:	f240 7145 	movw	r1, #1861	; 0x745
 800dc36:	487a      	ldr	r0, [pc, #488]	; (800de20 <HAL_SPI_Transmit_DMA+0x208>)
 800dc38:	f7fb fb0b 	bl	8009252 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d009      	beq.n	800dc58 <HAL_SPI_Transmit_DMA+0x40>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc4c:	d004      	beq.n	800dc58 <HAL_SPI_Transmit_DMA+0x40>
 800dc4e:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 800dc52:	4873      	ldr	r0, [pc, #460]	; (800de20 <HAL_SPI_Transmit_DMA+0x208>)
 800dc54:	f7fb fafd 	bl	8009252 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <HAL_SPI_Transmit_DMA+0x4e>
 800dc62:	2302      	movs	r3, #2
 800dc64:	e0d8      	b.n	800de18 <HAL_SPI_Transmit_DMA+0x200>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d002      	beq.n	800dc80 <HAL_SPI_Transmit_DMA+0x68>
  {
    errorcode = HAL_BUSY;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc7e:	e0c6      	b.n	800de0e <HAL_SPI_Transmit_DMA+0x1f6>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <HAL_SPI_Transmit_DMA+0x74>
 800dc86:	88fb      	ldrh	r3, [r7, #6]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d102      	bne.n	800dc92 <HAL_SPI_Transmit_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc90:	e0bd      	b.n	800de0e <HAL_SPI_Transmit_DMA+0x1f6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2203      	movs	r2, #3
 800dc96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	88fa      	ldrh	r2, [r7, #6]
 800dcaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	88fa      	ldrh	r2, [r7, #6]
 800dcb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcdc:	d10f      	bne.n	800dcfe <HAL_SPI_Transmit_DMA+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dcfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd02:	4a48      	ldr	r2, [pc, #288]	; (800de24 <HAL_SPI_Transmit_DMA+0x20c>)
 800dd04:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd0a:	4a47      	ldr	r2, [pc, #284]	; (800de28 <HAL_SPI_Transmit_DMA+0x210>)
 800dd0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd12:	4a46      	ldr	r2, [pc, #280]	; (800de2c <HAL_SPI_Transmit_DMA+0x214>)
 800dd14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dd2c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dd36:	d82d      	bhi.n	800dd94 <HAL_SPI_Transmit_DMA+0x17c>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd42:	d127      	bne.n	800dd94 <HAL_SPI_Transmit_DMA+0x17c>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d10f      	bne.n	800dd72 <HAL_SPI_Transmit_DMA+0x15a>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dd60:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	085b      	lsrs	r3, r3, #1
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd70:	e010      	b.n	800dd94 <HAL_SPI_Transmit_DMA+0x17c>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd80:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	085b      	lsrs	r3, r3, #1
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	330c      	adds	r3, #12
 800dda4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddaa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ddac:	f7fc f8ec 	bl	8009f88 <HAL_DMA_Start_IT>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00c      	beq.n	800ddd0 <HAL_SPI_Transmit_DMA+0x1b8>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddba:	f043 0210 	orr.w	r2, r3, #16
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ddce:	e01e      	b.n	800de0e <HAL_SPI_Transmit_DMA+0x1f6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddda:	2b40      	cmp	r3, #64	; 0x40
 800dddc:	d007      	beq.n	800ddee <HAL_SPI_Transmit_DMA+0x1d6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f042 0220 	orr.w	r2, r2, #32
 800ddfc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685a      	ldr	r2, [r3, #4]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f042 0202 	orr.w	r2, r2, #2
 800de0c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800de16:	7dfb      	ldrb	r3, [r7, #23]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	08014c24 	.word	0x08014c24
 800de24:	0800e3c7 	.word	0x0800e3c7
 800de28:	0800e1e9 	.word	0x0800e1e9
 800de2c:	0800e41b 	.word	0x0800e41b

0800de30 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de3e:	2300      	movs	r3, #0
 800de40:	75fb      	strb	r3, [r7, #23]

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de46:	2b00      	cmp	r3, #0
 800de48:	d104      	bne.n	800de54 <HAL_SPI_TransmitReceive_DMA+0x24>
 800de4a:	f640 0156 	movw	r1, #2134	; 0x856
 800de4e:	4880      	ldr	r0, [pc, #512]	; (800e050 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800de50:	f7fb f9ff 	bl	8009252 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d104      	bne.n	800de66 <HAL_SPI_TransmitReceive_DMA+0x36>
 800de5c:	f640 0157 	movw	r1, #2135	; 0x857
 800de60:	487b      	ldr	r0, [pc, #492]	; (800e050 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800de62:	f7fb f9f6 	bl	8009252 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d004      	beq.n	800de78 <HAL_SPI_TransmitReceive_DMA+0x48>
 800de6e:	f640 015a 	movw	r1, #2138	; 0x85a
 800de72:	4877      	ldr	r0, [pc, #476]	; (800e050 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800de74:	f7fb f9ed 	bl	8009252 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d101      	bne.n	800de86 <HAL_SPI_TransmitReceive_DMA+0x56>
 800de82:	2302      	movs	r3, #2
 800de84:	e173      	b.n	800e16e <HAL_SPI_TransmitReceive_DMA+0x33e>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de94:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800de9c:	7dbb      	ldrb	r3, [r7, #22]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d00d      	beq.n	800debe <HAL_SPI_TransmitReceive_DMA+0x8e>
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dea8:	d106      	bne.n	800deb8 <HAL_SPI_TransmitReceive_DMA+0x88>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d102      	bne.n	800deb8 <HAL_SPI_TransmitReceive_DMA+0x88>
 800deb2:	7dbb      	ldrb	r3, [r7, #22]
 800deb4:	2b04      	cmp	r3, #4
 800deb6:	d002      	beq.n	800debe <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_BUSY;
 800deb8:	2302      	movs	r3, #2
 800deba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800debc:	e152      	b.n	800e164 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d005      	beq.n	800ded0 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800deca:	887b      	ldrh	r3, [r7, #2]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    errorcode = HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ded4:	e146      	b.n	800e164 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b04      	cmp	r3, #4
 800dee0:	d003      	beq.n	800deea <HAL_SPI_TransmitReceive_DMA+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2205      	movs	r2, #5
 800dee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	887a      	ldrh	r2, [r7, #2]
 800defa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	887a      	ldrh	r2, [r7, #2]
 800df00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	887a      	ldrh	r2, [r7, #2]
 800df0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	887a      	ldrh	r2, [r7, #2]
 800df14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800df32:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df3c:	d908      	bls.n	800df50 <HAL_SPI_TransmitReceive_DMA+0x120>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	685a      	ldr	r2, [r3, #4]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	e06f      	b.n	800e030 <HAL_SPI_TransmitReceive_DMA+0x200>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df5e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df6a:	d126      	bne.n	800dfba <HAL_SPI_TransmitReceive_DMA+0x18a>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df70:	f003 0301 	and.w	r3, r3, #1
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10f      	bne.n	800df98 <HAL_SPI_TransmitReceive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800df86:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	085b      	lsrs	r3, r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df96:	e010      	b.n	800dfba <HAL_SPI_TransmitReceive_DMA+0x18a>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dfa6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	085b      	lsrs	r3, r3, #1
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfc4:	d134      	bne.n	800e030 <HAL_SPI_TransmitReceive_DMA+0x200>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfd4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d111      	bne.n	800e00a <HAL_SPI_TransmitReceive_DMA+0x1da>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dff4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	085b      	lsrs	r3, r3, #1
 800e000:	b29a      	uxth	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e008:	e012      	b.n	800e030 <HAL_SPI_TransmitReceive_DMA+0x200>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e018:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e020:	b29b      	uxth	r3, r3
 800e022:	085b      	lsrs	r3, r3, #1
 800e024:	b29b      	uxth	r3, r3
 800e026:	3301      	adds	r3, #1
 800e028:	b29a      	uxth	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b04      	cmp	r3, #4
 800e03a:	d10f      	bne.n	800e05c <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e040:	4a04      	ldr	r2, [pc, #16]	; (800e054 <HAL_SPI_TransmitReceive_DMA+0x224>)
 800e042:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e048:	4a03      	ldr	r2, [pc, #12]	; (800e058 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800e04a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e04c:	e00e      	b.n	800e06c <HAL_SPI_TransmitReceive_DMA+0x23c>
 800e04e:	bf00      	nop
 800e050:	08014c24 	.word	0x08014c24
 800e054:	0800e3e3 	.word	0x0800e3e3
 800e058:	0800e28f 	.word	0x0800e28f
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e060:	4a45      	ldr	r2, [pc, #276]	; (800e178 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e062:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e068:	4a44      	ldr	r2, [pc, #272]	; (800e17c <HAL_SPI_TransmitReceive_DMA+0x34c>)
 800e06a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e070:	4a43      	ldr	r2, [pc, #268]	; (800e180 <HAL_SPI_TransmitReceive_DMA+0x350>)
 800e072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e078:	2200      	movs	r2, #0
 800e07a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	330c      	adds	r3, #12
 800e086:	4619      	mov	r1, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e094:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e096:	f7fb ff77 	bl	8009f88 <HAL_DMA_Start_IT>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00c      	beq.n	800e0ba <HAL_SPI_TransmitReceive_DMA+0x28a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0a4:	f043 0210 	orr.w	r2, r3, #16
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e0b8:	e054      	b.n	800e164 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f042 0201 	orr.w	r2, r2, #1
 800e0c8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0de:	2200      	movs	r2, #0
 800e0e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	330c      	adds	r3, #12
 800e0fa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e100:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e102:	f7fb ff41 	bl	8009f88 <HAL_DMA_Start_IT>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00c      	beq.n	800e126 <HAL_SPI_TransmitReceive_DMA+0x2f6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e110:	f043 0210 	orr.w	r2, r3, #16
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e124:	e01e      	b.n	800e164 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e130:	2b40      	cmp	r3, #64	; 0x40
 800e132:	d007      	beq.n	800e144 <HAL_SPI_TransmitReceive_DMA+0x314>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e142:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f042 0220 	orr.w	r2, r2, #32
 800e152:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f042 0202 	orr.w	r2, r2, #2
 800e162:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e16c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	0800e3ff 	.word	0x0800e3ff
 800e17c:	0800e337 	.word	0x0800e337
 800e180:	0800e41b 	.word	0x0800e41b

0800e184 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1f6:	f7fb fc13 	bl	8009a20 <HAL_GetTick>
 800e1fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f003 0320 	and.w	r3, r3, #32
 800e206:	2b20      	cmp	r3, #32
 800e208:	d03b      	beq.n	800e282 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685a      	ldr	r2, [r3, #4]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f022 0220 	bic.w	r2, r2, #32
 800e218:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	685a      	ldr	r2, [r3, #4]
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f022 0202 	bic.w	r2, r2, #2
 800e228:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	2164      	movs	r1, #100	; 0x64
 800e22e:	6978      	ldr	r0, [r7, #20]
 800e230:	f000 fa8a 	bl	800e748 <SPI_EndRxTxTransaction>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d005      	beq.n	800e246 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e23e:	f043 0220 	orr.w	r2, r3, #32
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10a      	bne.n	800e264 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e24e:	2300      	movs	r3, #0
 800e250:	60fb      	str	r3, [r7, #12]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	60fb      	str	r3, [r7, #12]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	60fb      	str	r3, [r7, #12]
 800e262:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2200      	movs	r2, #0
 800e268:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e276:	2b00      	cmp	r3, #0
 800e278:	d003      	beq.n	800e282 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e27a:	6978      	ldr	r0, [r7, #20]
 800e27c:	f7ff ffaa 	bl	800e1d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e280:	e002      	b.n	800e288 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e282:	6978      	ldr	r0, [r7, #20]
 800e284:	f7fa fbdc 	bl	8008a40 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e29c:	f7fb fbc0 	bl	8009a20 <HAL_GetTick>
 800e2a0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f003 0320 	and.w	r3, r3, #32
 800e2ac:	2b20      	cmp	r3, #32
 800e2ae:	d03c      	beq.n	800e32a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f022 0220 	bic.w	r2, r2, #32
 800e2be:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10d      	bne.n	800e2e4 <SPI_DMAReceiveCplt+0x56>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2d0:	d108      	bne.n	800e2e4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f022 0203 	bic.w	r2, r2, #3
 800e2e0:	605a      	str	r2, [r3, #4]
 800e2e2:	e007      	b.n	800e2f4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f022 0201 	bic.w	r2, r2, #1
 800e2f2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	2164      	movs	r1, #100	; 0x64
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 f9cd 	bl	800e698 <SPI_EndRxTransaction>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2220      	movs	r2, #32
 800e308:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d003      	beq.n	800e32a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7ff ff56 	bl	800e1d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e328:	e002      	b.n	800e330 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f7ff ff2a 	bl	800e184 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e342:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e344:	f7fb fb6c 	bl	8009a20 <HAL_GetTick>
 800e348:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f003 0320 	and.w	r3, r3, #32
 800e354:	2b20      	cmp	r3, #32
 800e356:	d030      	beq.n	800e3ba <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	685a      	ldr	r2, [r3, #4]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f022 0220 	bic.w	r2, r2, #32
 800e366:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	2164      	movs	r1, #100	; 0x64
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f000 f9eb 	bl	800e748 <SPI_EndRxTxTransaction>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e37c:	f043 0220 	orr.w	r2, r3, #32
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685a      	ldr	r2, [r3, #4]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f022 0203 	bic.w	r2, r2, #3
 800e392:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff ff0e 	bl	800e1d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e3b8:	e002      	b.n	800e3c0 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7fa fb4e 	bl	8008a5c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f7ff fedf 	bl	800e198 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3da:	bf00      	nop
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b084      	sub	sp, #16
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f7ff fedb 	bl	800e1ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3f6:	bf00      	nop
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b084      	sub	sp, #16
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f7ff fed7 	bl	800e1c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e412:	bf00      	nop
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b084      	sub	sp, #16
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e426:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f022 0203 	bic.w	r2, r2, #3
 800e436:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e43c:	f043 0210 	orr.w	r2, r3, #16
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7ff fec1 	bl	800e1d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e452:	bf00      	nop
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
	...

0800e45c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	603b      	str	r3, [r7, #0]
 800e468:	4613      	mov	r3, r2
 800e46a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e46c:	f7fb fad8 	bl	8009a20 <HAL_GetTick>
 800e470:	4602      	mov	r2, r0
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	1a9b      	subs	r3, r3, r2
 800e476:	683a      	ldr	r2, [r7, #0]
 800e478:	4413      	add	r3, r2
 800e47a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e47c:	f7fb fad0 	bl	8009a20 <HAL_GetTick>
 800e480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e482:	4b39      	ldr	r3, [pc, #228]	; (800e568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	015b      	lsls	r3, r3, #5
 800e488:	0d1b      	lsrs	r3, r3, #20
 800e48a:	69fa      	ldr	r2, [r7, #28]
 800e48c:	fb02 f303 	mul.w	r3, r2, r3
 800e490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e492:	e054      	b.n	800e53e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e49a:	d050      	beq.n	800e53e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e49c:	f7fb fac0 	bl	8009a20 <HAL_GetTick>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	69fa      	ldr	r2, [r7, #28]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d902      	bls.n	800e4b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d13d      	bne.n	800e52e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e4c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4ca:	d111      	bne.n	800e4f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4d4:	d004      	beq.n	800e4e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4de:	d107      	bne.n	800e4f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4f8:	d10f      	bne.n	800e51a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e508:	601a      	str	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	e017      	b.n	800e55e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e534:	2300      	movs	r3, #0
 800e536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	689a      	ldr	r2, [r3, #8]
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	4013      	ands	r3, r2
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	bf0c      	ite	eq
 800e54e:	2301      	moveq	r3, #1
 800e550:	2300      	movne	r3, #0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	461a      	mov	r2, r3
 800e556:	79fb      	ldrb	r3, [r7, #7]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d19b      	bne.n	800e494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3720      	adds	r7, #32
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000b10 	.word	0x20000b10

0800e56c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08a      	sub	sp, #40	; 0x28
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e57e:	f7fb fa4f 	bl	8009a20 <HAL_GetTick>
 800e582:	4602      	mov	r2, r0
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	1a9b      	subs	r3, r3, r2
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	4413      	add	r3, r2
 800e58c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e58e:	f7fb fa47 	bl	8009a20 <HAL_GetTick>
 800e592:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	330c      	adds	r3, #12
 800e59a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e59c:	4b3d      	ldr	r3, [pc, #244]	; (800e694 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4613      	mov	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4413      	add	r3, r2
 800e5a6:	00da      	lsls	r2, r3, #3
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	0d1b      	lsrs	r3, r3, #20
 800e5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ae:	fb02 f303 	mul.w	r3, r2, r3
 800e5b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e5b4:	e060      	b.n	800e678 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e5bc:	d107      	bne.n	800e5ce <SPI_WaitFifoStateUntilTimeout+0x62>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d104      	bne.n	800e5ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5d4:	d050      	beq.n	800e678 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e5d6:	f7fb fa23 	bl	8009a20 <HAL_GetTick>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d902      	bls.n	800e5ec <SPI_WaitFifoStateUntilTimeout+0x80>
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d13d      	bne.n	800e668 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e5fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e604:	d111      	bne.n	800e62a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e60e:	d004      	beq.n	800e61a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e618:	d107      	bne.n	800e62a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e632:	d10f      	bne.n	800e654 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e664:	2303      	movs	r3, #3
 800e666:	e010      	b.n	800e68a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d101      	bne.n	800e672 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e66e:	2300      	movs	r3, #0
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	3b01      	subs	r3, #1
 800e676:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	689a      	ldr	r2, [r3, #8]
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	4013      	ands	r3, r2
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	429a      	cmp	r2, r3
 800e686:	d196      	bne.n	800e5b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3728      	adds	r7, #40	; 0x28
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	20000b10 	.word	0x20000b10

0800e698 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af02      	add	r7, sp, #8
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6ac:	d111      	bne.n	800e6d2 <SPI_EndRxTransaction+0x3a>
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6b6:	d004      	beq.n	800e6c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6c0:	d107      	bne.n	800e6d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	2180      	movs	r1, #128	; 0x80
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f7ff febd 	bl	800e45c <SPI_WaitFlagStateUntilTimeout>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d007      	beq.n	800e6f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6ec:	f043 0220 	orr.w	r2, r3, #32
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e6f4:	2303      	movs	r3, #3
 800e6f6:	e023      	b.n	800e740 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e700:	d11d      	bne.n	800e73e <SPI_EndRxTransaction+0xa6>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e70a:	d004      	beq.n	800e716 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e714:	d113      	bne.n	800e73e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f7ff ff22 	bl	800e56c <SPI_WaitFifoStateUntilTimeout>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d007      	beq.n	800e73e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e732:	f043 0220 	orr.w	r2, r3, #32
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e73a:	2303      	movs	r3, #3
 800e73c:	e000      	b.n	800e740 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af02      	add	r7, sp, #8
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f7ff ff03 	bl	800e56c <SPI_WaitFifoStateUntilTimeout>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d007      	beq.n	800e77c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e770:	f043 0220 	orr.w	r2, r3, #32
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e778:	2303      	movs	r3, #3
 800e77a:	e027      	b.n	800e7cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	2200      	movs	r2, #0
 800e784:	2180      	movs	r1, #128	; 0x80
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f7ff fe68 	bl	800e45c <SPI_WaitFlagStateUntilTimeout>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d007      	beq.n	800e7a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e796:	f043 0220 	orr.w	r2, r3, #32
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	e014      	b.n	800e7cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7ff fedc 	bl	800e56c <SPI_WaitFifoStateUntilTimeout>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d007      	beq.n	800e7ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7be:	f043 0220 	orr.w	r2, r3, #32
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e000      	b.n	800e7cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d101      	bne.n	800e7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e0c3      	b.n	800e96e <HAL_TIM_Base_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a63      	ldr	r2, [pc, #396]	; (800e978 <HAL_TIM_Base_Init+0x1a4>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d03b      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7f8:	d036      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a5f      	ldr	r2, [pc, #380]	; (800e97c <HAL_TIM_Base_Init+0x1a8>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d031      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4a5d      	ldr	r2, [pc, #372]	; (800e980 <HAL_TIM_Base_Init+0x1ac>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d02c      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a5c      	ldr	r2, [pc, #368]	; (800e984 <HAL_TIM_Base_Init+0x1b0>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d027      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a5a      	ldr	r2, [pc, #360]	; (800e988 <HAL_TIM_Base_Init+0x1b4>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d022      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a59      	ldr	r2, [pc, #356]	; (800e98c <HAL_TIM_Base_Init+0x1b8>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d01d      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a57      	ldr	r2, [pc, #348]	; (800e990 <HAL_TIM_Base_Init+0x1bc>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d018      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a56      	ldr	r2, [pc, #344]	; (800e994 <HAL_TIM_Base_Init+0x1c0>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d013      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a54      	ldr	r2, [pc, #336]	; (800e998 <HAL_TIM_Base_Init+0x1c4>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00e      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a53      	ldr	r2, [pc, #332]	; (800e99c <HAL_TIM_Base_Init+0x1c8>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d009      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a51      	ldr	r2, [pc, #324]	; (800e9a0 <HAL_TIM_Base_Init+0x1cc>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d004      	beq.n	800e868 <HAL_TIM_Base_Init+0x94>
 800e85e:	f44f 7191 	mov.w	r1, #290	; 0x122
 800e862:	4850      	ldr	r0, [pc, #320]	; (800e9a4 <HAL_TIM_Base_Init+0x1d0>)
 800e864:	f7fa fcf5 	bl	8009252 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d014      	beq.n	800e89a <HAL_TIM_Base_Init+0xc6>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	2b10      	cmp	r3, #16
 800e876:	d010      	beq.n	800e89a <HAL_TIM_Base_Init+0xc6>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	2b20      	cmp	r3, #32
 800e87e:	d00c      	beq.n	800e89a <HAL_TIM_Base_Init+0xc6>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	2b40      	cmp	r3, #64	; 0x40
 800e886:	d008      	beq.n	800e89a <HAL_TIM_Base_Init+0xc6>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	2b60      	cmp	r3, #96	; 0x60
 800e88e:	d004      	beq.n	800e89a <HAL_TIM_Base_Init+0xc6>
 800e890:	f240 1123 	movw	r1, #291	; 0x123
 800e894:	4843      	ldr	r0, [pc, #268]	; (800e9a4 <HAL_TIM_Base_Init+0x1d0>)
 800e896:	f7fa fcdc 	bl	8009252 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00e      	beq.n	800e8c0 <HAL_TIM_Base_Init+0xec>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8aa:	d009      	beq.n	800e8c0 <HAL_TIM_Base_Init+0xec>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8b4:	d004      	beq.n	800e8c0 <HAL_TIM_Base_Init+0xec>
 800e8b6:	f44f 7192 	mov.w	r1, #292	; 0x124
 800e8ba:	483a      	ldr	r0, [pc, #232]	; (800e9a4 <HAL_TIM_Base_Init+0x1d0>)
 800e8bc:	f7fa fcc9 	bl	8009252 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	699b      	ldr	r3, [r3, #24]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d008      	beq.n	800e8da <HAL_TIM_Base_Init+0x106>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	2b80      	cmp	r3, #128	; 0x80
 800e8ce:	d004      	beq.n	800e8da <HAL_TIM_Base_Init+0x106>
 800e8d0:	f240 1125 	movw	r1, #293	; 0x125
 800e8d4:	4833      	ldr	r0, [pc, #204]	; (800e9a4 <HAL_TIM_Base_Init+0x1d0>)
 800e8d6:	f7fa fcbc 	bl	8009252 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d106      	bne.n	800e8f4 <HAL_TIM_Base_Init+0x120>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 f85a 	bl	800e9a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2202      	movs	r2, #2
 800e8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	3304      	adds	r3, #4
 800e904:	4619      	mov	r1, r3
 800e906:	4610      	mov	r0, r2
 800e908:	f000 fac0 	bl	800ee8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	40012c00 	.word	0x40012c00
 800e97c:	40000400 	.word	0x40000400
 800e980:	40000800 	.word	0x40000800
 800e984:	40000c00 	.word	0x40000c00
 800e988:	40001000 	.word	0x40001000
 800e98c:	40001400 	.word	0x40001400
 800e990:	40013400 	.word	0x40013400
 800e994:	40014000 	.word	0x40014000
 800e998:	40014400 	.word	0x40014400
 800e99c:	40014800 	.word	0x40014800
 800e9a0:	40015000 	.word	0x40015000
 800e9a4:	08014c5c 	.word	0x08014c5c

0800e9a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a4f      	ldr	r2, [pc, #316]	; (800eb08 <HAL_TIM_Base_Start_IT+0x14c>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d03b      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9d6:	d036      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a4b      	ldr	r2, [pc, #300]	; (800eb0c <HAL_TIM_Base_Start_IT+0x150>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d031      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a4a      	ldr	r2, [pc, #296]	; (800eb10 <HAL_TIM_Base_Start_IT+0x154>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d02c      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a48      	ldr	r2, [pc, #288]	; (800eb14 <HAL_TIM_Base_Start_IT+0x158>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d027      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a47      	ldr	r2, [pc, #284]	; (800eb18 <HAL_TIM_Base_Start_IT+0x15c>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d022      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a45      	ldr	r2, [pc, #276]	; (800eb1c <HAL_TIM_Base_Start_IT+0x160>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d01d      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a44      	ldr	r2, [pc, #272]	; (800eb20 <HAL_TIM_Base_Start_IT+0x164>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d018      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a42      	ldr	r2, [pc, #264]	; (800eb24 <HAL_TIM_Base_Start_IT+0x168>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d013      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a41      	ldr	r2, [pc, #260]	; (800eb28 <HAL_TIM_Base_Start_IT+0x16c>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d00e      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a3f      	ldr	r2, [pc, #252]	; (800eb2c <HAL_TIM_Base_Start_IT+0x170>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d009      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a3e      	ldr	r2, [pc, #248]	; (800eb30 <HAL_TIM_Base_Start_IT+0x174>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d004      	beq.n	800ea46 <HAL_TIM_Base_Start_IT+0x8a>
 800ea3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ea40:	483c      	ldr	r0, [pc, #240]	; (800eb34 <HAL_TIM_Base_Start_IT+0x178>)
 800ea42:	f7fa fc06 	bl	8009252 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d001      	beq.n	800ea56 <HAL_TIM_Base_Start_IT+0x9a>
  {
    return HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	e054      	b.n	800eb00 <HAL_TIM_Base_Start_IT+0x144>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2202      	movs	r2, #2
 800ea5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68da      	ldr	r2, [r3, #12]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f042 0201 	orr.w	r2, r2, #1
 800ea6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a25      	ldr	r2, [pc, #148]	; (800eb08 <HAL_TIM_Base_Start_IT+0x14c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d022      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea80:	d01d      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a21      	ldr	r2, [pc, #132]	; (800eb0c <HAL_TIM_Base_Start_IT+0x150>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d018      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a1f      	ldr	r2, [pc, #124]	; (800eb10 <HAL_TIM_Base_Start_IT+0x154>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d013      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a1e      	ldr	r2, [pc, #120]	; (800eb14 <HAL_TIM_Base_Start_IT+0x158>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d00e      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a1e      	ldr	r2, [pc, #120]	; (800eb20 <HAL_TIM_Base_Start_IT+0x164>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d009      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a1d      	ldr	r2, [pc, #116]	; (800eb24 <HAL_TIM_Base_Start_IT+0x168>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d004      	beq.n	800eabe <HAL_TIM_Base_Start_IT+0x102>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a1d      	ldr	r2, [pc, #116]	; (800eb30 <HAL_TIM_Base_Start_IT+0x174>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d115      	bne.n	800eaea <HAL_TIM_Base_Start_IT+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	689a      	ldr	r2, [r3, #8]
 800eac4:	4b1c      	ldr	r3, [pc, #112]	; (800eb38 <HAL_TIM_Base_Start_IT+0x17c>)
 800eac6:	4013      	ands	r3, r2
 800eac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b06      	cmp	r3, #6
 800eace:	d015      	beq.n	800eafc <HAL_TIM_Base_Start_IT+0x140>
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ead6:	d011      	beq.n	800eafc <HAL_TIM_Base_Start_IT+0x140>
    {
      __HAL_TIM_ENABLE(htim);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f042 0201 	orr.w	r2, r2, #1
 800eae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eae8:	e008      	b.n	800eafc <HAL_TIM_Base_Start_IT+0x140>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f042 0201 	orr.w	r2, r2, #1
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	e000      	b.n	800eafe <HAL_TIM_Base_Start_IT+0x142>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eafc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	40012c00 	.word	0x40012c00
 800eb0c:	40000400 	.word	0x40000400
 800eb10:	40000800 	.word	0x40000800
 800eb14:	40000c00 	.word	0x40000c00
 800eb18:	40001000 	.word	0x40001000
 800eb1c:	40001400 	.word	0x40001400
 800eb20:	40013400 	.word	0x40013400
 800eb24:	40014000 	.word	0x40014000
 800eb28:	40014400 	.word	0x40014400
 800eb2c:	40014800 	.word	0x40014800
 800eb30:	40015000 	.word	0x40015000
 800eb34:	08014c5c 	.word	0x08014c5c
 800eb38:	00010007 	.word	0x00010007

0800eb3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	f003 0302 	and.w	r3, r3, #2
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d122      	bne.n	800eb98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	f003 0302 	and.w	r3, r3, #2
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d11b      	bne.n	800eb98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f06f 0202 	mvn.w	r2, #2
 800eb68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	f003 0303 	and.w	r3, r3, #3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f965 	bl	800ee4e <HAL_TIM_IC_CaptureCallback>
 800eb84:	e005      	b.n	800eb92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f957 	bl	800ee3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f968 	bl	800ee62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	691b      	ldr	r3, [r3, #16]
 800eb9e:	f003 0304 	and.w	r3, r3, #4
 800eba2:	2b04      	cmp	r3, #4
 800eba4:	d122      	bne.n	800ebec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	f003 0304 	and.w	r3, r3, #4
 800ebb0:	2b04      	cmp	r3, #4
 800ebb2:	d11b      	bne.n	800ebec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f06f 0204 	mvn.w	r2, #4
 800ebbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d003      	beq.n	800ebda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 f93b 	bl	800ee4e <HAL_TIM_IC_CaptureCallback>
 800ebd8:	e005      	b.n	800ebe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 f92d 	bl	800ee3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 f93e 	bl	800ee62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	f003 0308 	and.w	r3, r3, #8
 800ebf6:	2b08      	cmp	r3, #8
 800ebf8:	d122      	bne.n	800ec40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	f003 0308 	and.w	r3, r3, #8
 800ec04:	2b08      	cmp	r3, #8
 800ec06:	d11b      	bne.n	800ec40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f06f 0208 	mvn.w	r2, #8
 800ec10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2204      	movs	r2, #4
 800ec16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	69db      	ldr	r3, [r3, #28]
 800ec1e:	f003 0303 	and.w	r3, r3, #3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f911 	bl	800ee4e <HAL_TIM_IC_CaptureCallback>
 800ec2c:	e005      	b.n	800ec3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f903 	bl	800ee3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f914 	bl	800ee62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	f003 0310 	and.w	r3, r3, #16
 800ec4a:	2b10      	cmp	r3, #16
 800ec4c:	d122      	bne.n	800ec94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	f003 0310 	and.w	r3, r3, #16
 800ec58:	2b10      	cmp	r3, #16
 800ec5a:	d11b      	bne.n	800ec94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f06f 0210 	mvn.w	r2, #16
 800ec64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2208      	movs	r2, #8
 800ec6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d003      	beq.n	800ec82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f8e7 	bl	800ee4e <HAL_TIM_IC_CaptureCallback>
 800ec80:	e005      	b.n	800ec8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f8d9 	bl	800ee3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 f8ea 	bl	800ee62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	691b      	ldr	r3, [r3, #16]
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d10e      	bne.n	800ecc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d107      	bne.n	800ecc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f06f 0201 	mvn.w	r2, #1
 800ecb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7fa fab2 	bl	8009224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecca:	2b80      	cmp	r3, #128	; 0x80
 800eccc:	d10e      	bne.n	800ecec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd8:	2b80      	cmp	r3, #128	; 0x80
 800ecda:	d107      	bne.n	800ecec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ece4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 f982 	bl	800eff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecfa:	d10e      	bne.n	800ed1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed06:	2b80      	cmp	r3, #128	; 0x80
 800ed08:	d107      	bne.n	800ed1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f975 	bl	800f004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed24:	2b40      	cmp	r3, #64	; 0x40
 800ed26:	d10e      	bne.n	800ed46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed32:	2b40      	cmp	r3, #64	; 0x40
 800ed34:	d107      	bne.n	800ed46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 f898 	bl	800ee76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	f003 0320 	and.w	r3, r3, #32
 800ed50:	2b20      	cmp	r3, #32
 800ed52:	d10e      	bne.n	800ed72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	f003 0320 	and.w	r3, r3, #32
 800ed5e:	2b20      	cmp	r3, #32
 800ed60:	d107      	bne.n	800ed72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f06f 0220 	mvn.w	r2, #32
 800ed6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f935 	bl	800efdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed80:	d10f      	bne.n	800eda2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed90:	d107      	bne.n	800eda2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ed9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f93b 	bl	800f018 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	691b      	ldr	r3, [r3, #16]
 800eda8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edb0:	d10f      	bne.n	800edd2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800edbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edc0:	d107      	bne.n	800edd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800edca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f92d 	bl	800f02c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ede0:	d10f      	bne.n	800ee02 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800edec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800edf0:	d107      	bne.n	800ee02 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800edfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f91f 	bl	800f040 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee10:	d10f      	bne.n	800ee32 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee20:	d107      	bne.n	800ee32 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ee2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 f911 	bl	800f054 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee32:	bf00      	nop
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ee3a:	b480      	push	{r7}
 800ee3c:	b083      	sub	sp, #12
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee42:	bf00      	nop
 800ee44:	370c      	adds	r7, #12
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr

0800ee4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee4e:	b480      	push	{r7}
 800ee50:	b083      	sub	sp, #12
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr

0800ee62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee62:	b480      	push	{r7}
 800ee64:	b083      	sub	sp, #12
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee6a:	bf00      	nop
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee76:	b480      	push	{r7}
 800ee78:	b083      	sub	sp, #12
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee7e:	bf00      	nop
 800ee80:	370c      	adds	r7, #12
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
	...

0800ee8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a46      	ldr	r2, [pc, #280]	; (800efb8 <TIM_Base_SetConfig+0x12c>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d017      	beq.n	800eed4 <TIM_Base_SetConfig+0x48>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeaa:	d013      	beq.n	800eed4 <TIM_Base_SetConfig+0x48>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a43      	ldr	r2, [pc, #268]	; (800efbc <TIM_Base_SetConfig+0x130>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d00f      	beq.n	800eed4 <TIM_Base_SetConfig+0x48>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a42      	ldr	r2, [pc, #264]	; (800efc0 <TIM_Base_SetConfig+0x134>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00b      	beq.n	800eed4 <TIM_Base_SetConfig+0x48>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a41      	ldr	r2, [pc, #260]	; (800efc4 <TIM_Base_SetConfig+0x138>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d007      	beq.n	800eed4 <TIM_Base_SetConfig+0x48>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a40      	ldr	r2, [pc, #256]	; (800efc8 <TIM_Base_SetConfig+0x13c>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d003      	beq.n	800eed4 <TIM_Base_SetConfig+0x48>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a3f      	ldr	r2, [pc, #252]	; (800efcc <TIM_Base_SetConfig+0x140>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d108      	bne.n	800eee6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a33      	ldr	r2, [pc, #204]	; (800efb8 <TIM_Base_SetConfig+0x12c>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d023      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eef4:	d01f      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4a30      	ldr	r2, [pc, #192]	; (800efbc <TIM_Base_SetConfig+0x130>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d01b      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a2f      	ldr	r2, [pc, #188]	; (800efc0 <TIM_Base_SetConfig+0x134>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d017      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a2e      	ldr	r2, [pc, #184]	; (800efc4 <TIM_Base_SetConfig+0x138>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d013      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a2d      	ldr	r2, [pc, #180]	; (800efc8 <TIM_Base_SetConfig+0x13c>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d00f      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a2d      	ldr	r2, [pc, #180]	; (800efd0 <TIM_Base_SetConfig+0x144>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d00b      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a2c      	ldr	r2, [pc, #176]	; (800efd4 <TIM_Base_SetConfig+0x148>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d007      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a2b      	ldr	r2, [pc, #172]	; (800efd8 <TIM_Base_SetConfig+0x14c>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d003      	beq.n	800ef36 <TIM_Base_SetConfig+0xaa>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a26      	ldr	r2, [pc, #152]	; (800efcc <TIM_Base_SetConfig+0x140>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d108      	bne.n	800ef48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	4313      	orrs	r3, r2
 800ef54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	689a      	ldr	r2, [r3, #8]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a12      	ldr	r2, [pc, #72]	; (800efb8 <TIM_Base_SetConfig+0x12c>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d013      	beq.n	800ef9c <TIM_Base_SetConfig+0x110>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a14      	ldr	r2, [pc, #80]	; (800efc8 <TIM_Base_SetConfig+0x13c>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d00f      	beq.n	800ef9c <TIM_Base_SetConfig+0x110>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a14      	ldr	r2, [pc, #80]	; (800efd0 <TIM_Base_SetConfig+0x144>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d00b      	beq.n	800ef9c <TIM_Base_SetConfig+0x110>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4a13      	ldr	r2, [pc, #76]	; (800efd4 <TIM_Base_SetConfig+0x148>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d007      	beq.n	800ef9c <TIM_Base_SetConfig+0x110>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a12      	ldr	r2, [pc, #72]	; (800efd8 <TIM_Base_SetConfig+0x14c>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d003      	beq.n	800ef9c <TIM_Base_SetConfig+0x110>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a0d      	ldr	r2, [pc, #52]	; (800efcc <TIM_Base_SetConfig+0x140>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d103      	bne.n	800efa4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	691a      	ldr	r2, [r3, #16]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	615a      	str	r2, [r3, #20]
}
 800efaa:	bf00      	nop
 800efac:	3714      	adds	r7, #20
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	40012c00 	.word	0x40012c00
 800efbc:	40000400 	.word	0x40000400
 800efc0:	40000800 	.word	0x40000800
 800efc4:	40000c00 	.word	0x40000c00
 800efc8:	40013400 	.word	0x40013400
 800efcc:	40015000 	.word	0x40015000
 800efd0:	40014000 	.word	0x40014000
 800efd4:	40014400 	.word	0x40014400
 800efd8:	40014800 	.word	0x40014800

0800efdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800efe4:	bf00      	nop
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f020:	bf00      	nop
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f034:	bf00      	nop
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f048:	bf00      	nop
 800f04a:	370c      	adds	r7, #12
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr

0800f054 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f05c:	bf00      	nop
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d101      	bne.n	800f07a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	e08d      	b.n	800f196 <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d023      	beq.n	800f0ca <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a46      	ldr	r2, [pc, #280]	; (800f1a0 <HAL_UART_Init+0x138>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d041      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a44      	ldr	r2, [pc, #272]	; (800f1a4 <HAL_UART_Init+0x13c>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d03c      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a43      	ldr	r2, [pc, #268]	; (800f1a8 <HAL_UART_Init+0x140>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d037      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a41      	ldr	r2, [pc, #260]	; (800f1ac <HAL_UART_Init+0x144>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d032      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a40      	ldr	r2, [pc, #256]	; (800f1b0 <HAL_UART_Init+0x148>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d02d      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a3e      	ldr	r2, [pc, #248]	; (800f1b4 <HAL_UART_Init+0x14c>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d028      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0be:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800f0c2:	483d      	ldr	r0, [pc, #244]	; (800f1b8 <HAL_UART_Init+0x150>)
 800f0c4:	f7fa f8c5 	bl	8009252 <assert_failed>
 800f0c8:	e022      	b.n	800f110 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a34      	ldr	r2, [pc, #208]	; (800f1a0 <HAL_UART_Init+0x138>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d01d      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a32      	ldr	r2, [pc, #200]	; (800f1a4 <HAL_UART_Init+0x13c>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d018      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a31      	ldr	r2, [pc, #196]	; (800f1a8 <HAL_UART_Init+0x140>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d013      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4a2f      	ldr	r2, [pc, #188]	; (800f1ac <HAL_UART_Init+0x144>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d00e      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a2e      	ldr	r2, [pc, #184]	; (800f1b0 <HAL_UART_Init+0x148>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d009      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a2c      	ldr	r2, [pc, #176]	; (800f1b4 <HAL_UART_Init+0x14c>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d004      	beq.n	800f110 <HAL_UART_Init+0xa8>
 800f106:	f240 1143 	movw	r1, #323	; 0x143
 800f10a:	482b      	ldr	r0, [pc, #172]	; (800f1b8 <HAL_UART_Init+0x150>)
 800f10c:	f7fa f8a1 	bl	8009252 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7fa fb74 	bl	8009810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2224      	movs	r2, #36	; 0x24
 800f12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f022 0201 	bic.w	r2, r2, #1
 800f13e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f83b 	bl	800f1bc <UART_SetConfig>
 800f146:	4603      	mov	r3, r0
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d101      	bne.n	800f150 <HAL_UART_Init+0xe8>
  {
    return HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e022      	b.n	800f196 <HAL_UART_Init+0x12e>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f154:	2b00      	cmp	r3, #0
 800f156:	d002      	beq.n	800f15e <HAL_UART_Init+0xf6>
  {
    UART_AdvFeatureConfig(huart);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fc0f 	bl	800f97c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	685a      	ldr	r2, [r3, #4]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f16c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	689a      	ldr	r2, [r3, #8]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f17c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f042 0201 	orr.w	r2, r2, #1
 800f18c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fd54 	bl	800fc3c <UART_CheckIdleState>
 800f194:	4603      	mov	r3, r0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	40013800 	.word	0x40013800
 800f1a4:	40004400 	.word	0x40004400
 800f1a8:	40004800 	.word	0x40004800
 800f1ac:	40004c00 	.word	0x40004c00
 800f1b0:	40005000 	.word	0x40005000
 800f1b4:	40008000 	.word	0x40008000
 800f1b8:	08014c94 	.word	0x08014c94

0800f1bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1c0:	b08c      	sub	sp, #48	; 0x30
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	4a17      	ldr	r2, [pc, #92]	; (800f230 <UART_SetConfig+0x74>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d904      	bls.n	800f1e0 <UART_SetConfig+0x24>
 800f1d6:	f640 31da 	movw	r1, #3034	; 0xbda
 800f1da:	4816      	ldr	r0, [pc, #88]	; (800f234 <UART_SetConfig+0x78>)
 800f1dc:	f7fa f839 	bl	8009252 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1e8:	d00d      	beq.n	800f206 <UART_SetConfig+0x4a>
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d009      	beq.n	800f206 <UART_SetConfig+0x4a>
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1fa:	d004      	beq.n	800f206 <UART_SetConfig+0x4a>
 800f1fc:	f640 31db 	movw	r1, #3035	; 0xbdb
 800f200:	480c      	ldr	r0, [pc, #48]	; (800f234 <UART_SetConfig+0x78>)
 800f202:	f7fa f826 	bl	8009252 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a0b      	ldr	r2, [pc, #44]	; (800f238 <UART_SetConfig+0x7c>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d115      	bne.n	800f23c <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d037      	beq.n	800f288 <UART_SetConfig+0xcc>
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f220:	d032      	beq.n	800f288 <UART_SetConfig+0xcc>
 800f222:	f640 31de 	movw	r1, #3038	; 0xbde
 800f226:	4803      	ldr	r0, [pc, #12]	; (800f234 <UART_SetConfig+0x78>)
 800f228:	f7fa f813 	bl	8009252 <assert_failed>
 800f22c:	e02c      	b.n	800f288 <UART_SetConfig+0xcc>
 800f22e:	bf00      	nop
 800f230:	011e1a30 	.word	0x011e1a30
 800f234:	08014c94 	.word	0x08014c94
 800f238:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f244:	d012      	beq.n	800f26c <UART_SetConfig+0xb0>
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00e      	beq.n	800f26c <UART_SetConfig+0xb0>
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f256:	d009      	beq.n	800f26c <UART_SetConfig+0xb0>
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f260:	d004      	beq.n	800f26c <UART_SetConfig+0xb0>
 800f262:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800f266:	489e      	ldr	r0, [pc, #632]	; (800f4e0 <UART_SetConfig+0x324>)
 800f268:	f7f9 fff3 	bl	8009252 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	6a1b      	ldr	r3, [r3, #32]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d009      	beq.n	800f288 <UART_SetConfig+0xcc>
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	6a1b      	ldr	r3, [r3, #32]
 800f278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f27c:	d004      	beq.n	800f288 <UART_SetConfig+0xcc>
 800f27e:	f640 31e3 	movw	r1, #3043	; 0xbe3
 800f282:	4897      	ldr	r0, [pc, #604]	; (800f4e0 <UART_SetConfig+0x324>)
 800f284:	f7f9 ffe5 	bl	8009252 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00e      	beq.n	800f2ae <UART_SetConfig+0xf2>
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f298:	d009      	beq.n	800f2ae <UART_SetConfig+0xf2>
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	691b      	ldr	r3, [r3, #16]
 800f29e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f2a2:	d004      	beq.n	800f2ae <UART_SetConfig+0xf2>
 800f2a4:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800f2a8:	488d      	ldr	r0, [pc, #564]	; (800f4e0 <UART_SetConfig+0x324>)
 800f2aa:	f7f9 ffd2 	bl	8009252 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	f023 030c 	bic.w	r3, r3, #12
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d103      	bne.n	800f2c2 <UART_SetConfig+0x106>
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	695b      	ldr	r3, [r3, #20]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d104      	bne.n	800f2cc <UART_SetConfig+0x110>
 800f2c2:	f640 31e7 	movw	r1, #3047	; 0xbe7
 800f2c6:	4886      	ldr	r0, [pc, #536]	; (800f4e0 <UART_SetConfig+0x324>)
 800f2c8:	f7f9 ffc3 	bl	8009252 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	699b      	ldr	r3, [r3, #24]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d013      	beq.n	800f2fc <UART_SetConfig+0x140>
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2dc:	d00e      	beq.n	800f2fc <UART_SetConfig+0x140>
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	699b      	ldr	r3, [r3, #24]
 800f2e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2e6:	d009      	beq.n	800f2fc <UART_SetConfig+0x140>
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2f0:	d004      	beq.n	800f2fc <UART_SetConfig+0x140>
 800f2f2:	f640 31e8 	movw	r1, #3048	; 0xbe8
 800f2f6:	487a      	ldr	r0, [pc, #488]	; (800f4e0 <UART_SetConfig+0x324>)
 800f2f8:	f7f9 ffab 	bl	8009252 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	69db      	ldr	r3, [r3, #28]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d009      	beq.n	800f318 <UART_SetConfig+0x15c>
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	69db      	ldr	r3, [r3, #28]
 800f308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f30c:	d004      	beq.n	800f318 <UART_SetConfig+0x15c>
 800f30e:	f640 31e9 	movw	r1, #3049	; 0xbe9
 800f312:	4873      	ldr	r0, [pc, #460]	; (800f4e0 <UART_SetConfig+0x324>)
 800f314:	f7f9 ff9d 	bl	8009252 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d030      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f324:	2b01      	cmp	r3, #1
 800f326:	d02c      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d028      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f334:	2b03      	cmp	r3, #3
 800f336:	d024      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33c:	2b04      	cmp	r3, #4
 800f33e:	d020      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f344:	2b05      	cmp	r3, #5
 800f346:	d01c      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34c:	2b06      	cmp	r3, #6
 800f34e:	d018      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f354:	2b07      	cmp	r3, #7
 800f356:	d014      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35c:	2b08      	cmp	r3, #8
 800f35e:	d010      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f364:	2b09      	cmp	r3, #9
 800f366:	d00c      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36c:	2b0a      	cmp	r3, #10
 800f36e:	d008      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f374:	2b0b      	cmp	r3, #11
 800f376:	d004      	beq.n	800f382 <UART_SetConfig+0x1c6>
 800f378:	f640 31ea 	movw	r1, #3050	; 0xbea
 800f37c:	4858      	ldr	r0, [pc, #352]	; (800f4e0 <UART_SetConfig+0x324>)
 800f37e:	f7f9 ff68 	bl	8009252 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	689a      	ldr	r2, [r3, #8]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	431a      	orrs	r2, r3
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	431a      	orrs	r2, r3
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	69db      	ldr	r3, [r3, #28]
 800f396:	4313      	orrs	r3, r2
 800f398:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	4b50      	ldr	r3, [pc, #320]	; (800f4e4 <UART_SetConfig+0x328>)
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	697a      	ldr	r2, [r7, #20]
 800f3a6:	6812      	ldr	r2, [r2, #0]
 800f3a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	68da      	ldr	r2, [r3, #12]
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	430a      	orrs	r2, r1
 800f3c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4a46      	ldr	r2, [pc, #280]	; (800f4e8 <UART_SetConfig+0x32c>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d004      	beq.n	800f3de <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	6a1b      	ldr	r3, [r3, #32]
 800f3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f3e8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3f2:	430b      	orrs	r3, r1
 800f3f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3fc:	f023 010f 	bic.w	r1, r3, #15
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	430a      	orrs	r2, r1
 800f40a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a36      	ldr	r2, [pc, #216]	; (800f4ec <UART_SetConfig+0x330>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d126      	bne.n	800f464 <UART_SetConfig+0x2a8>
 800f416:	4b36      	ldr	r3, [pc, #216]	; (800f4f0 <UART_SetConfig+0x334>)
 800f418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f41c:	f003 0303 	and.w	r3, r3, #3
 800f420:	2b03      	cmp	r3, #3
 800f422:	d81b      	bhi.n	800f45c <UART_SetConfig+0x2a0>
 800f424:	a201      	add	r2, pc, #4	; (adr r2, 800f42c <UART_SetConfig+0x270>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f43d 	.word	0x0800f43d
 800f430:	0800f44d 	.word	0x0800f44d
 800f434:	0800f445 	.word	0x0800f445
 800f438:	0800f455 	.word	0x0800f455
 800f43c:	2301      	movs	r3, #1
 800f43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f442:	e112      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f444:	2302      	movs	r3, #2
 800f446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f44a:	e10e      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f44c:	2304      	movs	r3, #4
 800f44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f452:	e10a      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f454:	2308      	movs	r3, #8
 800f456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f45a:	e106      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f45c:	2310      	movs	r3, #16
 800f45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f462:	e102      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a22      	ldr	r2, [pc, #136]	; (800f4f4 <UART_SetConfig+0x338>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d144      	bne.n	800f4f8 <UART_SetConfig+0x33c>
 800f46e:	4b20      	ldr	r3, [pc, #128]	; (800f4f0 <UART_SetConfig+0x334>)
 800f470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f474:	f003 030c 	and.w	r3, r3, #12
 800f478:	2b0c      	cmp	r3, #12
 800f47a:	d82d      	bhi.n	800f4d8 <UART_SetConfig+0x31c>
 800f47c:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <UART_SetConfig+0x2c8>)
 800f47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f482:	bf00      	nop
 800f484:	0800f4b9 	.word	0x0800f4b9
 800f488:	0800f4d9 	.word	0x0800f4d9
 800f48c:	0800f4d9 	.word	0x0800f4d9
 800f490:	0800f4d9 	.word	0x0800f4d9
 800f494:	0800f4c9 	.word	0x0800f4c9
 800f498:	0800f4d9 	.word	0x0800f4d9
 800f49c:	0800f4d9 	.word	0x0800f4d9
 800f4a0:	0800f4d9 	.word	0x0800f4d9
 800f4a4:	0800f4c1 	.word	0x0800f4c1
 800f4a8:	0800f4d9 	.word	0x0800f4d9
 800f4ac:	0800f4d9 	.word	0x0800f4d9
 800f4b0:	0800f4d9 	.word	0x0800f4d9
 800f4b4:	0800f4d1 	.word	0x0800f4d1
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4be:	e0d4      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f4c0:	2302      	movs	r3, #2
 800f4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4c6:	e0d0      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f4c8:	2304      	movs	r3, #4
 800f4ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4ce:	e0cc      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f4d0:	2308      	movs	r3, #8
 800f4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4d6:	e0c8      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f4d8:	2310      	movs	r3, #16
 800f4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4de:	e0c4      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f4e0:	08014c94 	.word	0x08014c94
 800f4e4:	cfff69f3 	.word	0xcfff69f3
 800f4e8:	40008000 	.word	0x40008000
 800f4ec:	40013800 	.word	0x40013800
 800f4f0:	40021000 	.word	0x40021000
 800f4f4:	40004400 	.word	0x40004400
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4aa9      	ldr	r2, [pc, #676]	; (800f7a4 <UART_SetConfig+0x5e8>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d125      	bne.n	800f54e <UART_SetConfig+0x392>
 800f502:	4ba9      	ldr	r3, [pc, #676]	; (800f7a8 <UART_SetConfig+0x5ec>)
 800f504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f508:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f50c:	2b30      	cmp	r3, #48	; 0x30
 800f50e:	d016      	beq.n	800f53e <UART_SetConfig+0x382>
 800f510:	2b30      	cmp	r3, #48	; 0x30
 800f512:	d818      	bhi.n	800f546 <UART_SetConfig+0x38a>
 800f514:	2b20      	cmp	r3, #32
 800f516:	d00a      	beq.n	800f52e <UART_SetConfig+0x372>
 800f518:	2b20      	cmp	r3, #32
 800f51a:	d814      	bhi.n	800f546 <UART_SetConfig+0x38a>
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d002      	beq.n	800f526 <UART_SetConfig+0x36a>
 800f520:	2b10      	cmp	r3, #16
 800f522:	d008      	beq.n	800f536 <UART_SetConfig+0x37a>
 800f524:	e00f      	b.n	800f546 <UART_SetConfig+0x38a>
 800f526:	2300      	movs	r3, #0
 800f528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f52c:	e09d      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f52e:	2302      	movs	r3, #2
 800f530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f534:	e099      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f536:	2304      	movs	r3, #4
 800f538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f53c:	e095      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f53e:	2308      	movs	r3, #8
 800f540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f544:	e091      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f546:	2310      	movs	r3, #16
 800f548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f54c:	e08d      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4a96      	ldr	r2, [pc, #600]	; (800f7ac <UART_SetConfig+0x5f0>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d125      	bne.n	800f5a4 <UART_SetConfig+0x3e8>
 800f558:	4b93      	ldr	r3, [pc, #588]	; (800f7a8 <UART_SetConfig+0x5ec>)
 800f55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f55e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f562:	2bc0      	cmp	r3, #192	; 0xc0
 800f564:	d016      	beq.n	800f594 <UART_SetConfig+0x3d8>
 800f566:	2bc0      	cmp	r3, #192	; 0xc0
 800f568:	d818      	bhi.n	800f59c <UART_SetConfig+0x3e0>
 800f56a:	2b80      	cmp	r3, #128	; 0x80
 800f56c:	d00a      	beq.n	800f584 <UART_SetConfig+0x3c8>
 800f56e:	2b80      	cmp	r3, #128	; 0x80
 800f570:	d814      	bhi.n	800f59c <UART_SetConfig+0x3e0>
 800f572:	2b00      	cmp	r3, #0
 800f574:	d002      	beq.n	800f57c <UART_SetConfig+0x3c0>
 800f576:	2b40      	cmp	r3, #64	; 0x40
 800f578:	d008      	beq.n	800f58c <UART_SetConfig+0x3d0>
 800f57a:	e00f      	b.n	800f59c <UART_SetConfig+0x3e0>
 800f57c:	2300      	movs	r3, #0
 800f57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f582:	e072      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f584:	2302      	movs	r3, #2
 800f586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f58a:	e06e      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f58c:	2304      	movs	r3, #4
 800f58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f592:	e06a      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f594:	2308      	movs	r3, #8
 800f596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f59a:	e066      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f59c:	2310      	movs	r3, #16
 800f59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5a2:	e062      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a81      	ldr	r2, [pc, #516]	; (800f7b0 <UART_SetConfig+0x5f4>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d12a      	bne.n	800f604 <UART_SetConfig+0x448>
 800f5ae:	4b7e      	ldr	r3, [pc, #504]	; (800f7a8 <UART_SetConfig+0x5ec>)
 800f5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5bc:	d01a      	beq.n	800f5f4 <UART_SetConfig+0x438>
 800f5be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5c2:	d81b      	bhi.n	800f5fc <UART_SetConfig+0x440>
 800f5c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5c8:	d00c      	beq.n	800f5e4 <UART_SetConfig+0x428>
 800f5ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5ce:	d815      	bhi.n	800f5fc <UART_SetConfig+0x440>
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d003      	beq.n	800f5dc <UART_SetConfig+0x420>
 800f5d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5d8:	d008      	beq.n	800f5ec <UART_SetConfig+0x430>
 800f5da:	e00f      	b.n	800f5fc <UART_SetConfig+0x440>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5e2:	e042      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f5e4:	2302      	movs	r3, #2
 800f5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5ea:	e03e      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5f2:	e03a      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f5f4:	2308      	movs	r3, #8
 800f5f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5fa:	e036      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f5fc:	2310      	movs	r3, #16
 800f5fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f602:	e032      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a6a      	ldr	r2, [pc, #424]	; (800f7b4 <UART_SetConfig+0x5f8>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d12a      	bne.n	800f664 <UART_SetConfig+0x4a8>
 800f60e:	4b66      	ldr	r3, [pc, #408]	; (800f7a8 <UART_SetConfig+0x5ec>)
 800f610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f61c:	d01a      	beq.n	800f654 <UART_SetConfig+0x498>
 800f61e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f622:	d81b      	bhi.n	800f65c <UART_SetConfig+0x4a0>
 800f624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f628:	d00c      	beq.n	800f644 <UART_SetConfig+0x488>
 800f62a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f62e:	d815      	bhi.n	800f65c <UART_SetConfig+0x4a0>
 800f630:	2b00      	cmp	r3, #0
 800f632:	d003      	beq.n	800f63c <UART_SetConfig+0x480>
 800f634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f638:	d008      	beq.n	800f64c <UART_SetConfig+0x490>
 800f63a:	e00f      	b.n	800f65c <UART_SetConfig+0x4a0>
 800f63c:	2300      	movs	r3, #0
 800f63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f642:	e012      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f644:	2302      	movs	r3, #2
 800f646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f64a:	e00e      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f64c:	2304      	movs	r3, #4
 800f64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f652:	e00a      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f654:	2308      	movs	r3, #8
 800f656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f65a:	e006      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f65c:	2310      	movs	r3, #16
 800f65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f662:	e002      	b.n	800f66a <UART_SetConfig+0x4ae>
 800f664:	2310      	movs	r3, #16
 800f666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4a51      	ldr	r2, [pc, #324]	; (800f7b4 <UART_SetConfig+0x5f8>)
 800f670:	4293      	cmp	r3, r2
 800f672:	f040 80a5 	bne.w	800f7c0 <UART_SetConfig+0x604>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f67a:	2b08      	cmp	r3, #8
 800f67c:	d823      	bhi.n	800f6c6 <UART_SetConfig+0x50a>
 800f67e:	a201      	add	r2, pc, #4	; (adr r2, 800f684 <UART_SetConfig+0x4c8>)
 800f680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f684:	0800f6a9 	.word	0x0800f6a9
 800f688:	0800f6c7 	.word	0x0800f6c7
 800f68c:	0800f6b1 	.word	0x0800f6b1
 800f690:	0800f6c7 	.word	0x0800f6c7
 800f694:	0800f6b7 	.word	0x0800f6b7
 800f698:	0800f6c7 	.word	0x0800f6c7
 800f69c:	0800f6c7 	.word	0x0800f6c7
 800f6a0:	0800f6c7 	.word	0x0800f6c7
 800f6a4:	0800f6bf 	.word	0x0800f6bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6a8:	f7fd fb74 	bl	800cd94 <HAL_RCC_GetPCLK1Freq>
 800f6ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f6ae:	e010      	b.n	800f6d2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f6b0:	4b41      	ldr	r3, [pc, #260]	; (800f7b8 <UART_SetConfig+0x5fc>)
 800f6b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f6b4:	e00d      	b.n	800f6d2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f6b6:	f7fd fb01 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800f6ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f6bc:	e009      	b.n	800f6d2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f6c4:	e005      	b.n	800f6d2 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f6d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f000 8137 	beq.w	800f948 <UART_SetConfig+0x78c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6de:	4a37      	ldr	r2, [pc, #220]	; (800f7bc <UART_SetConfig+0x600>)
 800f6e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	4413      	add	r3, r2
 800f6f8:	69ba      	ldr	r2, [r7, #24]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d305      	bcc.n	800f70a <UART_SetConfig+0x54e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f704:	69ba      	ldr	r2, [r7, #24]
 800f706:	429a      	cmp	r2, r3
 800f708:	d903      	bls.n	800f712 <UART_SetConfig+0x556>
      {
        ret = HAL_ERROR;
 800f70a:	2301      	movs	r3, #1
 800f70c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f710:	e11a      	b.n	800f948 <UART_SetConfig+0x78c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f714:	2200      	movs	r2, #0
 800f716:	60bb      	str	r3, [r7, #8]
 800f718:	60fa      	str	r2, [r7, #12]
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71e:	4a27      	ldr	r2, [pc, #156]	; (800f7bc <UART_SetConfig+0x600>)
 800f720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f724:	b29b      	uxth	r3, r3
 800f726:	2200      	movs	r2, #0
 800f728:	603b      	str	r3, [r7, #0]
 800f72a:	607a      	str	r2, [r7, #4]
 800f72c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f730:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f734:	f7f0 fdc4 	bl	80002c0 <__aeabi_uldivmod>
 800f738:	4602      	mov	r2, r0
 800f73a:	460b      	mov	r3, r1
 800f73c:	4610      	mov	r0, r2
 800f73e:	4619      	mov	r1, r3
 800f740:	f04f 0200 	mov.w	r2, #0
 800f744:	f04f 0300 	mov.w	r3, #0
 800f748:	020b      	lsls	r3, r1, #8
 800f74a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f74e:	0202      	lsls	r2, r0, #8
 800f750:	6979      	ldr	r1, [r7, #20]
 800f752:	6849      	ldr	r1, [r1, #4]
 800f754:	0849      	lsrs	r1, r1, #1
 800f756:	2000      	movs	r0, #0
 800f758:	460c      	mov	r4, r1
 800f75a:	4605      	mov	r5, r0
 800f75c:	eb12 0804 	adds.w	r8, r2, r4
 800f760:	eb43 0905 	adc.w	r9, r3, r5
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	2200      	movs	r2, #0
 800f76a:	469a      	mov	sl, r3
 800f76c:	4693      	mov	fp, r2
 800f76e:	4652      	mov	r2, sl
 800f770:	465b      	mov	r3, fp
 800f772:	4640      	mov	r0, r8
 800f774:	4649      	mov	r1, r9
 800f776:	f7f0 fda3 	bl	80002c0 <__aeabi_uldivmod>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4613      	mov	r3, r2
 800f780:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f782:	6a3b      	ldr	r3, [r7, #32]
 800f784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f788:	d308      	bcc.n	800f79c <UART_SetConfig+0x5e0>
 800f78a:	6a3b      	ldr	r3, [r7, #32]
 800f78c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f790:	d204      	bcs.n	800f79c <UART_SetConfig+0x5e0>
        {
          huart->Instance->BRR = usartdiv;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	6a3a      	ldr	r2, [r7, #32]
 800f798:	60da      	str	r2, [r3, #12]
 800f79a:	e0d5      	b.n	800f948 <UART_SetConfig+0x78c>
        }
        else
        {
          ret = HAL_ERROR;
 800f79c:	2301      	movs	r3, #1
 800f79e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f7a2:	e0d1      	b.n	800f948 <UART_SetConfig+0x78c>
 800f7a4:	40004800 	.word	0x40004800
 800f7a8:	40021000 	.word	0x40021000
 800f7ac:	40004c00 	.word	0x40004c00
 800f7b0:	40005000 	.word	0x40005000
 800f7b4:	40008000 	.word	0x40008000
 800f7b8:	00f42400 	.word	0x00f42400
 800f7bc:	08016adc 	.word	0x08016adc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	69db      	ldr	r3, [r3, #28]
 800f7c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7c8:	d166      	bne.n	800f898 <UART_SetConfig+0x6dc>
  {
    switch (clocksource)
 800f7ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f7ce:	2b08      	cmp	r3, #8
 800f7d0:	d827      	bhi.n	800f822 <UART_SetConfig+0x666>
 800f7d2:	a201      	add	r2, pc, #4	; (adr r2, 800f7d8 <UART_SetConfig+0x61c>)
 800f7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d8:	0800f7fd 	.word	0x0800f7fd
 800f7dc:	0800f805 	.word	0x0800f805
 800f7e0:	0800f80d 	.word	0x0800f80d
 800f7e4:	0800f823 	.word	0x0800f823
 800f7e8:	0800f813 	.word	0x0800f813
 800f7ec:	0800f823 	.word	0x0800f823
 800f7f0:	0800f823 	.word	0x0800f823
 800f7f4:	0800f823 	.word	0x0800f823
 800f7f8:	0800f81b 	.word	0x0800f81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7fc:	f7fd faca 	bl	800cd94 <HAL_RCC_GetPCLK1Freq>
 800f800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f802:	e014      	b.n	800f82e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f804:	f7fd fadc 	bl	800cdc0 <HAL_RCC_GetPCLK2Freq>
 800f808:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f80a:	e010      	b.n	800f82e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f80c:	4b59      	ldr	r3, [pc, #356]	; (800f974 <UART_SetConfig+0x7b8>)
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f810:	e00d      	b.n	800f82e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f812:	f7fd fa53 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800f816:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f818:	e009      	b.n	800f82e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f81e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f820:	e005      	b.n	800f82e <UART_SetConfig+0x672>
      default:
        pclk = 0U;
 800f822:	2300      	movs	r3, #0
 800f824:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f82c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f830:	2b00      	cmp	r3, #0
 800f832:	f000 8089 	beq.w	800f948 <UART_SetConfig+0x78c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83a:	4a4f      	ldr	r2, [pc, #316]	; (800f978 <UART_SetConfig+0x7bc>)
 800f83c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f840:	461a      	mov	r2, r3
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	fbb3 f3f2 	udiv	r3, r3, r2
 800f848:	005a      	lsls	r2, r3, #1
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	085b      	lsrs	r3, r3, #1
 800f850:	441a      	add	r2, r3
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	fbb2 f3f3 	udiv	r3, r2, r3
 800f85a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	2b0f      	cmp	r3, #15
 800f860:	d916      	bls.n	800f890 <UART_SetConfig+0x6d4>
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f868:	d212      	bcs.n	800f890 <UART_SetConfig+0x6d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	f023 030f 	bic.w	r3, r3, #15
 800f872:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	085b      	lsrs	r3, r3, #1
 800f878:	b29b      	uxth	r3, r3
 800f87a:	f003 0307 	and.w	r3, r3, #7
 800f87e:	b29a      	uxth	r2, r3
 800f880:	8bfb      	ldrh	r3, [r7, #30]
 800f882:	4313      	orrs	r3, r2
 800f884:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	8bfa      	ldrh	r2, [r7, #30]
 800f88c:	60da      	str	r2, [r3, #12]
 800f88e:	e05b      	b.n	800f948 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800f890:	2301      	movs	r3, #1
 800f892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f896:	e057      	b.n	800f948 <UART_SetConfig+0x78c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f89c:	2b08      	cmp	r3, #8
 800f89e:	d828      	bhi.n	800f8f2 <UART_SetConfig+0x736>
 800f8a0:	a201      	add	r2, pc, #4	; (adr r2, 800f8a8 <UART_SetConfig+0x6ec>)
 800f8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a6:	bf00      	nop
 800f8a8:	0800f8cd 	.word	0x0800f8cd
 800f8ac:	0800f8d5 	.word	0x0800f8d5
 800f8b0:	0800f8dd 	.word	0x0800f8dd
 800f8b4:	0800f8f3 	.word	0x0800f8f3
 800f8b8:	0800f8e3 	.word	0x0800f8e3
 800f8bc:	0800f8f3 	.word	0x0800f8f3
 800f8c0:	0800f8f3 	.word	0x0800f8f3
 800f8c4:	0800f8f3 	.word	0x0800f8f3
 800f8c8:	0800f8eb 	.word	0x0800f8eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8cc:	f7fd fa62 	bl	800cd94 <HAL_RCC_GetPCLK1Freq>
 800f8d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8d2:	e014      	b.n	800f8fe <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8d4:	f7fd fa74 	bl	800cdc0 <HAL_RCC_GetPCLK2Freq>
 800f8d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8da:	e010      	b.n	800f8fe <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f8dc:	4b25      	ldr	r3, [pc, #148]	; (800f974 <UART_SetConfig+0x7b8>)
 800f8de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f8e0:	e00d      	b.n	800f8fe <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f8e2:	f7fd f9eb 	bl	800ccbc <HAL_RCC_GetSysClockFreq>
 800f8e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f8e8:	e009      	b.n	800f8fe <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f8f0:	e005      	b.n	800f8fe <UART_SetConfig+0x742>
      default:
        pclk = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f8fc:	bf00      	nop
    }

    if (pclk != 0U)
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	2b00      	cmp	r3, #0
 800f902:	d021      	beq.n	800f948 <UART_SetConfig+0x78c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f908:	4a1b      	ldr	r2, [pc, #108]	; (800f978 <UART_SetConfig+0x7bc>)
 800f90a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f90e:	461a      	mov	r2, r3
 800f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f912:	fbb3 f2f2 	udiv	r2, r3, r2
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	085b      	lsrs	r3, r3, #1
 800f91c:	441a      	add	r2, r3
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	fbb2 f3f3 	udiv	r3, r2, r3
 800f926:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	2b0f      	cmp	r3, #15
 800f92c:	d909      	bls.n	800f942 <UART_SetConfig+0x786>
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f934:	d205      	bcs.n	800f942 <UART_SetConfig+0x786>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	b29a      	uxth	r2, r3
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	60da      	str	r2, [r3, #12]
 800f940:	e002      	b.n	800f948 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800f942:	2301      	movs	r3, #1
 800f944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	2201      	movs	r2, #1
 800f94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2201      	movs	r2, #1
 800f954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	2200      	movs	r2, #0
 800f95c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	2200      	movs	r2, #0
 800f962:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f964:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3730      	adds	r7, #48	; 0x30
 800f96c:	46bd      	mov	sp, r7
 800f96e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f972:	bf00      	nop
 800f974:	00f42400 	.word	0x00f42400
 800f978:	08016adc 	.word	0x08016adc

0800f97c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f988:	2bff      	cmp	r3, #255	; 0xff
 800f98a:	d904      	bls.n	800f996 <UART_AdvFeatureConfig+0x1a>
 800f98c:	f640 41ab 	movw	r1, #3243	; 0xcab
 800f990:	4891      	ldr	r0, [pc, #580]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800f992:	f7f9 fc5e 	bl	8009252 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f99a:	f003 0301 	and.w	r3, r3, #1
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d018      	beq.n	800f9d4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d009      	beq.n	800f9be <UART_AdvFeatureConfig+0x42>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9b2:	d004      	beq.n	800f9be <UART_AdvFeatureConfig+0x42>
 800f9b4:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 800f9b8:	4887      	ldr	r0, [pc, #540]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800f9ba:	f7f9 fc4a 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	430a      	orrs	r2, r1
 800f9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	f003 0302 	and.w	r3, r3, #2
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d018      	beq.n	800fa12 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d009      	beq.n	800f9fc <UART_AdvFeatureConfig+0x80>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9f0:	d004      	beq.n	800f9fc <UART_AdvFeatureConfig+0x80>
 800f9f2:	f640 41b7 	movw	r1, #3255	; 0xcb7
 800f9f6:	4878      	ldr	r0, [pc, #480]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800f9f8:	f7f9 fc2b 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa16:	f003 0304 	and.w	r3, r3, #4
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d018      	beq.n	800fa50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <UART_AdvFeatureConfig+0xbe>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fa2e:	d004      	beq.n	800fa3a <UART_AdvFeatureConfig+0xbe>
 800fa30:	f640 41be 	movw	r1, #3262	; 0xcbe
 800fa34:	4868      	ldr	r0, [pc, #416]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800fa36:	f7f9 fc0c 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	430a      	orrs	r2, r1
 800fa4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa54:	f003 0308 	and.w	r3, r3, #8
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d018      	beq.n	800fa8e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d009      	beq.n	800fa78 <UART_AdvFeatureConfig+0xfc>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa6c:	d004      	beq.n	800fa78 <UART_AdvFeatureConfig+0xfc>
 800fa6e:	f640 41c5 	movw	r1, #3269	; 0xcc5
 800fa72:	4859      	ldr	r0, [pc, #356]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800fa74:	f7f9 fbed 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	430a      	orrs	r2, r1
 800fa8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa92:	f003 0310 	and.w	r3, r3, #16
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d018      	beq.n	800facc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d009      	beq.n	800fab6 <UART_AdvFeatureConfig+0x13a>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800faaa:	d004      	beq.n	800fab6 <UART_AdvFeatureConfig+0x13a>
 800faac:	f640 41cc 	movw	r1, #3276	; 0xccc
 800fab0:	4849      	ldr	r0, [pc, #292]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800fab2:	f7f9 fbce 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	430a      	orrs	r2, r1
 800faca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad0:	f003 0320 	and.w	r3, r3, #32
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d018      	beq.n	800fb0a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d009      	beq.n	800faf4 <UART_AdvFeatureConfig+0x178>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fae8:	d004      	beq.n	800faf4 <UART_AdvFeatureConfig+0x178>
 800faea:	f640 41d3 	movw	r1, #3283	; 0xcd3
 800faee:	483a      	ldr	r0, [pc, #232]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800faf0:	f7f9 fbaf 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	430a      	orrs	r2, r1
 800fb08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d06c      	beq.n	800fbf0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4a30      	ldr	r2, [pc, #192]	; (800fbdc <UART_AdvFeatureConfig+0x260>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d018      	beq.n	800fb52 <UART_AdvFeatureConfig+0x1d6>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a2e      	ldr	r2, [pc, #184]	; (800fbe0 <UART_AdvFeatureConfig+0x264>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d013      	beq.n	800fb52 <UART_AdvFeatureConfig+0x1d6>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a2d      	ldr	r2, [pc, #180]	; (800fbe4 <UART_AdvFeatureConfig+0x268>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d00e      	beq.n	800fb52 <UART_AdvFeatureConfig+0x1d6>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4a2b      	ldr	r2, [pc, #172]	; (800fbe8 <UART_AdvFeatureConfig+0x26c>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d009      	beq.n	800fb52 <UART_AdvFeatureConfig+0x1d6>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a2a      	ldr	r2, [pc, #168]	; (800fbec <UART_AdvFeatureConfig+0x270>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d004      	beq.n	800fb52 <UART_AdvFeatureConfig+0x1d6>
 800fb48:	f640 41da 	movw	r1, #3290	; 0xcda
 800fb4c:	4822      	ldr	r0, [pc, #136]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800fb4e:	f7f9 fb80 	bl	8009252 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d009      	beq.n	800fb6e <UART_AdvFeatureConfig+0x1f2>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb62:	d004      	beq.n	800fb6e <UART_AdvFeatureConfig+0x1f2>
 800fb64:	f640 41db 	movw	r1, #3291	; 0xcdb
 800fb68:	481b      	ldr	r0, [pc, #108]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800fb6a:	f7f9 fb72 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	430a      	orrs	r2, r1
 800fb82:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb8c:	d130      	bne.n	800fbf0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d013      	beq.n	800fbbe <UART_AdvFeatureConfig+0x242>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb9e:	d00e      	beq.n	800fbbe <UART_AdvFeatureConfig+0x242>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fba8:	d009      	beq.n	800fbbe <UART_AdvFeatureConfig+0x242>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800fbb2:	d004      	beq.n	800fbbe <UART_AdvFeatureConfig+0x242>
 800fbb4:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 800fbb8:	4807      	ldr	r0, [pc, #28]	; (800fbd8 <UART_AdvFeatureConfig+0x25c>)
 800fbba:	f7f9 fb4a 	bl	8009252 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	430a      	orrs	r2, r1
 800fbd2:	605a      	str	r2, [r3, #4]
 800fbd4:	e00c      	b.n	800fbf0 <UART_AdvFeatureConfig+0x274>
 800fbd6:	bf00      	nop
 800fbd8:	08014c94 	.word	0x08014c94
 800fbdc:	40013800 	.word	0x40013800
 800fbe0:	40004400 	.word	0x40004400
 800fbe4:	40004800 	.word	0x40004800
 800fbe8:	40004c00 	.word	0x40004c00
 800fbec:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d018      	beq.n	800fc2e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <UART_AdvFeatureConfig+0x29c>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800fc0c:	d004      	beq.n	800fc18 <UART_AdvFeatureConfig+0x29c>
 800fc0e:	f640 41e8 	movw	r1, #3304	; 0xce8
 800fc12:	4809      	ldr	r0, [pc, #36]	; (800fc38 <UART_AdvFeatureConfig+0x2bc>)
 800fc14:	f7f9 fb1d 	bl	8009252 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	430a      	orrs	r2, r1
 800fc2c:	605a      	str	r2, [r3, #4]
  }
}
 800fc2e:	bf00      	nop
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	08014c94 	.word	0x08014c94

0800fc3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af02      	add	r7, sp, #8
 800fc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2200      	movs	r2, #0
 800fc48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc4c:	f7f9 fee8 	bl	8009a20 <HAL_GetTick>
 800fc50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f003 0308 	and.w	r3, r3, #8
 800fc5c:	2b08      	cmp	r3, #8
 800fc5e:	d10e      	bne.n	800fc7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f82f 	bl	800fcd2 <UART_WaitOnFlagUntilTimeout>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	e025      	b.n	800fcca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f003 0304 	and.w	r3, r3, #4
 800fc88:	2b04      	cmp	r3, #4
 800fc8a:	d10e      	bne.n	800fcaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 f819 	bl	800fcd2 <UART_WaitOnFlagUntilTimeout>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d001      	beq.n	800fcaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fca6:	2303      	movs	r3, #3
 800fca8:	e00f      	b.n	800fcca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2220      	movs	r2, #32
 800fcae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2220      	movs	r2, #32
 800fcb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b09c      	sub	sp, #112	; 0x70
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	60f8      	str	r0, [r7, #12]
 800fcda:	60b9      	str	r1, [r7, #8]
 800fcdc:	603b      	str	r3, [r7, #0]
 800fcde:	4613      	mov	r3, r2
 800fce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fce2:	e0a9      	b.n	800fe38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcea:	f000 80a5 	beq.w	800fe38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcee:	f7f9 fe97 	bl	8009a20 <HAL_GetTick>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d302      	bcc.n	800fd04 <UART_WaitOnFlagUntilTimeout+0x32>
 800fcfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d140      	bne.n	800fd86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd0c:	e853 3f00 	ldrex	r3, [r3]
 800fd10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fd18:	667b      	str	r3, [r7, #100]	; 0x64
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd2a:	e841 2300 	strex	r3, r2, [r1]
 800fd2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1e6      	bne.n	800fd04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd40:	e853 3f00 	ldrex	r3, [r3]
 800fd44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd48:	f023 0301 	bic.w	r3, r3, #1
 800fd4c:	663b      	str	r3, [r7, #96]	; 0x60
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	3308      	adds	r3, #8
 800fd54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd56:	64ba      	str	r2, [r7, #72]	; 0x48
 800fd58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd5e:	e841 2300 	strex	r3, r2, [r1]
 800fd62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1e5      	bne.n	800fd36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2220      	movs	r2, #32
 800fd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2220      	movs	r2, #32
 800fd76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fd82:	2303      	movs	r3, #3
 800fd84:	e069      	b.n	800fe5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f003 0304 	and.w	r3, r3, #4
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d051      	beq.n	800fe38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	69db      	ldr	r3, [r3, #28]
 800fd9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fda2:	d149      	bne.n	800fe38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	e853 3f00 	ldrex	r3, [r3]
 800fdba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fdc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdcc:	637b      	str	r3, [r7, #52]	; 0x34
 800fdce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fdd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdd4:	e841 2300 	strex	r3, r2, [r1]
 800fdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1e6      	bne.n	800fdae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	3308      	adds	r3, #8
 800fde6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	e853 3f00 	ldrex	r3, [r3]
 800fdee:	613b      	str	r3, [r7, #16]
   return(result);
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	f023 0301 	bic.w	r3, r3, #1
 800fdf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3308      	adds	r3, #8
 800fdfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe00:	623a      	str	r2, [r7, #32]
 800fe02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe04:	69f9      	ldr	r1, [r7, #28]
 800fe06:	6a3a      	ldr	r2, [r7, #32]
 800fe08:	e841 2300 	strex	r3, r2, [r1]
 800fe0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e5      	bne.n	800fde0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2220      	movs	r2, #32
 800fe18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2220      	movs	r2, #32
 800fe28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fe34:	2303      	movs	r3, #3
 800fe36:	e010      	b.n	800fe5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	69da      	ldr	r2, [r3, #28]
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	4013      	ands	r3, r2
 800fe42:	68ba      	ldr	r2, [r7, #8]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	bf0c      	ite	eq
 800fe48:	2301      	moveq	r3, #1
 800fe4a:	2300      	movne	r3, #0
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	461a      	mov	r2, r3
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	f43f af46 	beq.w	800fce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3770      	adds	r7, #112	; 0x70
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a29      	ldr	r2, [pc, #164]	; (800ff18 <HAL_UARTEx_DisableFifoMode+0xb4>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d01d      	beq.n	800feb2 <HAL_UARTEx_DisableFifoMode+0x4e>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a28      	ldr	r2, [pc, #160]	; (800ff1c <HAL_UARTEx_DisableFifoMode+0xb8>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d018      	beq.n	800feb2 <HAL_UARTEx_DisableFifoMode+0x4e>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a26      	ldr	r2, [pc, #152]	; (800ff20 <HAL_UARTEx_DisableFifoMode+0xbc>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d013      	beq.n	800feb2 <HAL_UARTEx_DisableFifoMode+0x4e>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a25      	ldr	r2, [pc, #148]	; (800ff24 <HAL_UARTEx_DisableFifoMode+0xc0>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d00e      	beq.n	800feb2 <HAL_UARTEx_DisableFifoMode+0x4e>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a23      	ldr	r2, [pc, #140]	; (800ff28 <HAL_UARTEx_DisableFifoMode+0xc4>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d009      	beq.n	800feb2 <HAL_UARTEx_DisableFifoMode+0x4e>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a22      	ldr	r2, [pc, #136]	; (800ff2c <HAL_UARTEx_DisableFifoMode+0xc8>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d004      	beq.n	800feb2 <HAL_UARTEx_DisableFifoMode+0x4e>
 800fea8:	f44f 710d 	mov.w	r1, #564	; 0x234
 800feac:	4820      	ldr	r0, [pc, #128]	; (800ff30 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800feae:	f7f9 f9d0 	bl	8009252 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d101      	bne.n	800fec0 <HAL_UARTEx_DisableFifoMode+0x5c>
 800febc:	2302      	movs	r3, #2
 800febe:	e027      	b.n	800ff10 <HAL_UARTEx_DisableFifoMode+0xac>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2224      	movs	r2, #36	; 0x24
 800fecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f022 0201 	bic.w	r2, r2, #1
 800fee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800feee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2220      	movs	r2, #32
 800ff02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff0e:	2300      	movs	r3, #0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3710      	adds	r7, #16
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	40013800 	.word	0x40013800
 800ff1c:	40004400 	.word	0x40004400
 800ff20:	40004800 	.word	0x40004800
 800ff24:	40004c00 	.word	0x40004c00
 800ff28:	40005000 	.word	0x40005000
 800ff2c:	40008000 	.word	0x40008000
 800ff30:	08014cd0 	.word	0x08014cd0

0800ff34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	4a3b      	ldr	r2, [pc, #236]	; (8010030 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d01d      	beq.n	800ff84 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4a39      	ldr	r2, [pc, #228]	; (8010034 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d018      	beq.n	800ff84 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a38      	ldr	r2, [pc, #224]	; (8010038 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d013      	beq.n	800ff84 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a36      	ldr	r2, [pc, #216]	; (801003c <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d00e      	beq.n	800ff84 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a35      	ldr	r2, [pc, #212]	; (8010040 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d009      	beq.n	800ff84 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a33      	ldr	r2, [pc, #204]	; (8010044 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d004      	beq.n	800ff84 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800ff7a:	f240 2162 	movw	r1, #610	; 0x262
 800ff7e:	4832      	ldr	r0, [pc, #200]	; (8010048 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800ff80:	f7f9 f967 	bl	8009252 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d018      	beq.n	800ffbc <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff90:	d014      	beq.n	800ffbc <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff98:	d010      	beq.n	800ffbc <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ffa0:	d00c      	beq.n	800ffbc <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffa8:	d008      	beq.n	800ffbc <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800ffb0:	d004      	beq.n	800ffbc <HAL_UARTEx_SetTxFifoThreshold+0x88>
 800ffb2:	f240 2163 	movw	r1, #611	; 0x263
 800ffb6:	4824      	ldr	r0, [pc, #144]	; (8010048 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800ffb8:	f7f9 f94b 	bl	8009252 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d101      	bne.n	800ffca <HAL_UARTEx_SetTxFifoThreshold+0x96>
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	e02d      	b.n	8010026 <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2224      	movs	r2, #36	; 0x24
 800ffd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f022 0201 	bic.w	r2, r2, #1
 800fff0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	683a      	ldr	r2, [r7, #0]
 8010002:	430a      	orrs	r2, r1
 8010004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f8ac 	bl	8010164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2220      	movs	r2, #32
 8010018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2200      	movs	r2, #0
 8010020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	40013800 	.word	0x40013800
 8010034:	40004400 	.word	0x40004400
 8010038:	40004800 	.word	0x40004800
 801003c:	40004c00 	.word	0x40004c00
 8010040:	40005000 	.word	0x40005000
 8010044:	40008000 	.word	0x40008000
 8010048:	08014cd0 	.word	0x08014cd0

0801004c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a3b      	ldr	r2, [pc, #236]	; (8010148 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d01d      	beq.n	801009c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a39      	ldr	r2, [pc, #228]	; (801014c <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d018      	beq.n	801009c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a38      	ldr	r2, [pc, #224]	; (8010150 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d013      	beq.n	801009c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a36      	ldr	r2, [pc, #216]	; (8010154 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d00e      	beq.n	801009c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a35      	ldr	r2, [pc, #212]	; (8010158 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d009      	beq.n	801009c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a33      	ldr	r2, [pc, #204]	; (801015c <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d004      	beq.n	801009c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010092:	f240 2193 	movw	r1, #659	; 0x293
 8010096:	4832      	ldr	r0, [pc, #200]	; (8010160 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8010098:	f7f9 f8db 	bl	8009252 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d018      	beq.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100a8:	d014      	beq.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80100b0:	d010      	beq.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80100b8:	d00c      	beq.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80100c0:	d008      	beq.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80100c8:	d004      	beq.n	80100d4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80100ca:	f44f 7125 	mov.w	r1, #660	; 0x294
 80100ce:	4824      	ldr	r0, [pc, #144]	; (8010160 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 80100d0:	f7f9 f8bf 	bl	8009252 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d101      	bne.n	80100e2 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 80100de:	2302      	movs	r3, #2
 80100e0:	e02d      	b.n	801013e <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2224      	movs	r2, #36	; 0x24
 80100ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f022 0201 	bic.w	r2, r2, #1
 8010108:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	683a      	ldr	r2, [r7, #0]
 801011a:	430a      	orrs	r2, r1
 801011c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 f820 	bl	8010164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2220      	movs	r2, #32
 8010130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	40013800 	.word	0x40013800
 801014c:	40004400 	.word	0x40004400
 8010150:	40004800 	.word	0x40004800
 8010154:	40004c00 	.word	0x40004c00
 8010158:	40005000 	.word	0x40005000
 801015c:	40008000 	.word	0x40008000
 8010160:	08014cd0 	.word	0x08014cd0

08010164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010170:	2b00      	cmp	r3, #0
 8010172:	d108      	bne.n	8010186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2201      	movs	r2, #1
 8010180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010184:	e031      	b.n	80101ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010186:	2308      	movs	r3, #8
 8010188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801018a:	2308      	movs	r3, #8
 801018c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	0e5b      	lsrs	r3, r3, #25
 8010196:	b2db      	uxtb	r3, r3
 8010198:	f003 0307 	and.w	r3, r3, #7
 801019c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	0f5b      	lsrs	r3, r3, #29
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	f003 0307 	and.w	r3, r3, #7
 80101ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101ae:	7bbb      	ldrb	r3, [r7, #14]
 80101b0:	7b3a      	ldrb	r2, [r7, #12]
 80101b2:	4911      	ldr	r1, [pc, #68]	; (80101f8 <UARTEx_SetNbDataToProcess+0x94>)
 80101b4:	5c8a      	ldrb	r2, [r1, r2]
 80101b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80101ba:	7b3a      	ldrb	r2, [r7, #12]
 80101bc:	490f      	ldr	r1, [pc, #60]	; (80101fc <UARTEx_SetNbDataToProcess+0x98>)
 80101be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80101c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
 80101ce:	7b7a      	ldrb	r2, [r7, #13]
 80101d0:	4909      	ldr	r1, [pc, #36]	; (80101f8 <UARTEx_SetNbDataToProcess+0x94>)
 80101d2:	5c8a      	ldrb	r2, [r1, r2]
 80101d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80101d8:	7b7a      	ldrb	r2, [r7, #13]
 80101da:	4908      	ldr	r1, [pc, #32]	; (80101fc <UARTEx_SetNbDataToProcess+0x98>)
 80101dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101de:	fb93 f3f2 	sdiv	r3, r3, r2
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80101ea:	bf00      	nop
 80101ec:	3714      	adds	r7, #20
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	08016af4 	.word	0x08016af4
 80101fc:	08016afc 	.word	0x08016afc

08010200 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010208:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801020c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010214:	b29a      	uxth	r2, r3
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	b29b      	uxth	r3, r3
 801021a:	43db      	mvns	r3, r3
 801021c:	b29b      	uxth	r3, r3
 801021e:	4013      	ands	r3, r2
 8010220:	b29a      	uxth	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr

08010236 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010236:	b084      	sub	sp, #16
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	f107 0014 	add.w	r0, r7, #20
 8010244:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2201      	movs	r2, #1
 801024c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	370c      	adds	r7, #12
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	b004      	add	sp, #16
 8010276:	4770      	bx	lr

08010278 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010278:	b480      	push	{r7}
 801027a:	b085      	sub	sp, #20
 801027c:	af00      	add	r7, sp, #0
 801027e:	4603      	mov	r3, r0
 8010280:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010282:	2300      	movs	r3, #0
 8010284:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801028a:	2b84      	cmp	r3, #132	; 0x84
 801028c:	d005      	beq.n	801029a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801028e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	4413      	add	r3, r2
 8010296:	3303      	adds	r3, #3
 8010298:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801029a:	68fb      	ldr	r3, [r7, #12]
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80102ac:	f001 f8da 	bl	8011464 <vTaskStartScheduler>
  
  return osOK;
 80102b0:	2300      	movs	r3, #0
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80102b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102b8:	b087      	sub	sp, #28
 80102ba:	af02      	add	r7, sp, #8
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	685c      	ldr	r4, [r3, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102cc:	b29e      	uxth	r6, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff ffcf 	bl	8010278 <makeFreeRtosPriority>
 80102da:	4602      	mov	r2, r0
 80102dc:	f107 030c 	add.w	r3, r7, #12
 80102e0:	9301      	str	r3, [sp, #4]
 80102e2:	9200      	str	r2, [sp, #0]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	4632      	mov	r2, r6
 80102e8:	4629      	mov	r1, r5
 80102ea:	4620      	mov	r0, r4
 80102ec:	f000 ff30 	bl	8011150 <xTaskCreate>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d001      	beq.n	80102fa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80102f6:	2300      	movs	r3, #0
 80102f8:	e000      	b.n	80102fc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80102fa:	68fb      	ldr	r3, [r7, #12]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010304 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <osDelay+0x16>
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	e000      	b.n	801031c <osDelay+0x18>
 801031a:	2301      	movs	r3, #1
 801031c:	4618      	mov	r0, r3
 801031e:	f001 f86d 	bl	80113fc <vTaskDelay>
  
  return osOK;
 8010322:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8010332:	201c      	movs	r0, #28
 8010334:	f002 fc10 	bl	8012b58 <pvPortMalloc>
 8010338:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d007      	beq.n	8010350 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	3304      	adds	r3, #4
 801034a:	4618      	mov	r0, r3
 801034c:	f000 f9a2 	bl	8010694 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010350:	687b      	ldr	r3, [r7, #4]
	}
 8010352:	4618      	mov	r0, r3
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
	...

0801035c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b090      	sub	sp, #64	; 0x40
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8010372:	2300      	movs	r3, #0
 8010374:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <xEventGroupWaitBits+0x36>
	__asm volatile
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	623b      	str	r3, [r7, #32]
}
 801038e:	bf00      	nop
 8010390:	e7fe      	b.n	8010390 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00a      	beq.n	80103b2 <xEventGroupWaitBits+0x56>
	__asm volatile
 801039c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a0:	f383 8811 	msr	BASEPRI, r3
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	f3bf 8f4f 	dsb	sy
 80103ac:	61fb      	str	r3, [r7, #28]
}
 80103ae:	bf00      	nop
 80103b0:	e7fe      	b.n	80103b0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d10a      	bne.n	80103ce <xEventGroupWaitBits+0x72>
	__asm volatile
 80103b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	61bb      	str	r3, [r7, #24]
}
 80103ca:	bf00      	nop
 80103cc:	e7fe      	b.n	80103cc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103ce:	f001 fd05 	bl	8011ddc <xTaskGetSchedulerState>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d102      	bne.n	80103de <xEventGroupWaitBits+0x82>
 80103d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d101      	bne.n	80103e2 <xEventGroupWaitBits+0x86>
 80103de:	2301      	movs	r3, #1
 80103e0:	e000      	b.n	80103e4 <xEventGroupWaitBits+0x88>
 80103e2:	2300      	movs	r3, #0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d10a      	bne.n	80103fe <xEventGroupWaitBits+0xa2>
	__asm volatile
 80103e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	617b      	str	r3, [r7, #20]
}
 80103fa:	bf00      	nop
 80103fc:	e7fe      	b.n	80103fc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80103fe:	f001 f887 	bl	8011510 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8010402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	68b9      	ldr	r1, [r7, #8]
 801040c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801040e:	f000 f90b 	bl	8010628 <prvTestWaitCondition>
 8010412:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8010414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00e      	beq.n	8010438 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801041e:	2300      	movs	r3, #0
 8010420:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d028      	beq.n	801047a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	43db      	mvns	r3, r3
 8010430:	401a      	ands	r2, r3
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	601a      	str	r2, [r3, #0]
 8010436:	e020      	b.n	801047a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801043a:	2b00      	cmp	r3, #0
 801043c:	d104      	bne.n	8010448 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010440:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8010442:	2301      	movs	r3, #1
 8010444:	633b      	str	r3, [r7, #48]	; 0x30
 8010446:	e018      	b.n	801047a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d003      	beq.n	8010456 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801044e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010454:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d003      	beq.n	8010464 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801045c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010462:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8010464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010466:	1d18      	adds	r0, r3, #4
 8010468:	68ba      	ldr	r2, [r7, #8]
 801046a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046c:	4313      	orrs	r3, r2
 801046e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010470:	4619      	mov	r1, r3
 8010472:	f001 fa45 	bl	8011900 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8010476:	2300      	movs	r3, #0
 8010478:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801047a:	f001 f857 	bl	801152c <xTaskResumeAll>
 801047e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8010480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010482:	2b00      	cmp	r3, #0
 8010484:	d031      	beq.n	80104ea <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	2b00      	cmp	r3, #0
 801048a:	d107      	bne.n	801049c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801048c:	4b19      	ldr	r3, [pc, #100]	; (80104f4 <xEventGroupWaitBits+0x198>)
 801048e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010492:	601a      	str	r2, [r3, #0]
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801049c:	f001 fd42 	bl	8011f24 <uxTaskResetEventItemValue>
 80104a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80104a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d11a      	bne.n	80104e2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80104ac:	f002 fa32 	bl	8012914 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80104b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80104b6:	683a      	ldr	r2, [r7, #0]
 80104b8:	68b9      	ldr	r1, [r7, #8]
 80104ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104bc:	f000 f8b4 	bl	8010628 <prvTestWaitCondition>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d009      	beq.n	80104da <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d006      	beq.n	80104da <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80104cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	43db      	mvns	r3, r3
 80104d4:	401a      	ands	r2, r3
 80104d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80104da:	2301      	movs	r3, #1
 80104dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80104de:	f002 fa49 	bl	8012974 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80104e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80104e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80104ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3740      	adds	r7, #64	; 0x40
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	e000ed04 	.word	0xe000ed04

080104f8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08e      	sub	sp, #56	; 0x38
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8010502:	2300      	movs	r3, #0
 8010504:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801050a:	2300      	movs	r3, #0
 801050c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <xEventGroupSetBits+0x32>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	613b      	str	r3, [r7, #16]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010530:	2b00      	cmp	r3, #0
 8010532:	d00a      	beq.n	801054a <xEventGroupSetBits+0x52>
	__asm volatile
 8010534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010538:	f383 8811 	msr	BASEPRI, r3
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	60fb      	str	r3, [r7, #12]
}
 8010546:	bf00      	nop
 8010548:	e7fe      	b.n	8010548 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054c:	3304      	adds	r3, #4
 801054e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	3308      	adds	r3, #8
 8010554:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010556:	f000 ffdb 	bl	8011510 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	431a      	orrs	r2, r3
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801056c:	e03c      	b.n	80105e8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801056e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801057a:	2300      	movs	r3, #0
 801057c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010584:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801058c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010594:	2b00      	cmp	r3, #0
 8010596:	d108      	bne.n	80105aa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	4013      	ands	r3, r2
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00b      	beq.n	80105bc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80105a4:	2301      	movs	r3, #1
 80105a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105a8:	e008      	b.n	80105bc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	4013      	ands	r3, r2
 80105b2:	69ba      	ldr	r2, [r7, #24]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d101      	bne.n	80105bc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80105b8:	2301      	movs	r3, #1
 80105ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d010      	beq.n	80105e4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d003      	beq.n	80105d4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80105cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	4313      	orrs	r3, r2
 80105d2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80105dc:	4619      	mov	r1, r3
 80105de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105e0:	f001 fa58 	bl	8011a94 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80105e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105ea:	6a3b      	ldr	r3, [r7, #32]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d1be      	bne.n	801056e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f6:	43db      	mvns	r3, r3
 80105f8:	401a      	ands	r2, r3
 80105fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80105fe:	f000 ff95 	bl	801152c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010604:	681b      	ldr	r3, [r3, #0]
}
 8010606:	4618      	mov	r0, r3
 8010608:	3738      	adds	r7, #56	; 0x38
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b082      	sub	sp, #8
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
 8010616:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010618:	6839      	ldr	r1, [r7, #0]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff ff6c 	bl	80104f8 <xEventGroupSetBits>
}
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010628:	b480      	push	{r7}
 801062a:	b087      	sub	sp, #28
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8010634:	2300      	movs	r3, #0
 8010636:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d107      	bne.n	801064e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	4013      	ands	r3, r2
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00a      	beq.n	801065e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010648:	2301      	movs	r3, #1
 801064a:	617b      	str	r3, [r7, #20]
 801064c:	e007      	b.n	801065e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	4013      	ands	r3, r2
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	429a      	cmp	r2, r3
 8010658:	d101      	bne.n	801065e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801065a:	2301      	movs	r3, #1
 801065c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801065e:	697b      	ldr	r3, [r7, #20]
}
 8010660:	4618      	mov	r0, r3
 8010662:	371c      	adds	r7, #28
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801066c:	b580      	push	{r7, lr}
 801066e:	b086      	sub	sp, #24
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	68f9      	ldr	r1, [r7, #12]
 801067e:	4804      	ldr	r0, [pc, #16]	; (8010690 <xEventGroupSetBitsFromISR+0x24>)
 8010680:	f001 fffc 	bl	801267c <xTimerPendFunctionCallFromISR>
 8010684:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010686:	697b      	ldr	r3, [r7, #20]
	}
 8010688:	4618      	mov	r0, r3
 801068a:	3718      	adds	r7, #24
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	0801060f 	.word	0x0801060f

08010694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f103 0208 	add.w	r2, r3, #8
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f103 0208 	add.w	r2, r3, #8
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f103 0208 	add.w	r2, r3, #8
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80106e2:	bf00      	nop
 80106e4:	370c      	adds	r7, #12
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr

080106ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106ee:	b480      	push	{r7}
 80106f0:	b085      	sub	sp, #20
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	689a      	ldr	r2, [r3, #8]
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	683a      	ldr	r2, [r7, #0]
 8010712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	1c5a      	adds	r2, r3, #1
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	601a      	str	r2, [r3, #0]
}
 801072a:	bf00      	nop
 801072c:	3714      	adds	r7, #20
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010736:	b480      	push	{r7}
 8010738:	b085      	sub	sp, #20
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801074c:	d103      	bne.n	8010756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	691b      	ldr	r3, [r3, #16]
 8010752:	60fb      	str	r3, [r7, #12]
 8010754:	e00c      	b.n	8010770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3308      	adds	r3, #8
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	e002      	b.n	8010764 <vListInsert+0x2e>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	60fb      	str	r3, [r7, #12]
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	429a      	cmp	r2, r3
 801076e:	d2f6      	bcs.n	801075e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	685a      	ldr	r2, [r3, #4]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	683a      	ldr	r2, [r7, #0]
 801077e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	683a      	ldr	r2, [r7, #0]
 801078a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	1c5a      	adds	r2, r3, #1
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	601a      	str	r2, [r3, #0]
}
 801079c:	bf00      	nop
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	691b      	ldr	r3, [r3, #16]
 80107b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	6892      	ldr	r2, [r2, #8]
 80107be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	6852      	ldr	r2, [r2, #4]
 80107c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d103      	bne.n	80107dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689a      	ldr	r2, [r3, #8]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2200      	movs	r2, #0
 80107e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	1e5a      	subs	r2, r3, #1
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3714      	adds	r7, #20
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr

080107fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d10a      	bne.n	8010826 <xQueueGenericReset+0x2a>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	60bb      	str	r3, [r7, #8]
}
 8010822:	bf00      	nop
 8010824:	e7fe      	b.n	8010824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010826:	f002 f875 	bl	8012914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010832:	68f9      	ldr	r1, [r7, #12]
 8010834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010836:	fb01 f303 	mul.w	r3, r1, r3
 801083a:	441a      	add	r2, r3
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2200      	movs	r2, #0
 8010844:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010856:	3b01      	subs	r3, #1
 8010858:	68f9      	ldr	r1, [r7, #12]
 801085a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801085c:	fb01 f303 	mul.w	r3, r1, r3
 8010860:	441a      	add	r2, r3
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	22ff      	movs	r2, #255	; 0xff
 801086a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	22ff      	movs	r2, #255	; 0xff
 8010872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d114      	bne.n	80108a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d01a      	beq.n	80108ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	3310      	adds	r3, #16
 8010888:	4618      	mov	r0, r3
 801088a:	f001 f8a1 	bl	80119d0 <xTaskRemoveFromEventList>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d012      	beq.n	80108ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010894:	4b0c      	ldr	r3, [pc, #48]	; (80108c8 <xQueueGenericReset+0xcc>)
 8010896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801089a:	601a      	str	r2, [r3, #0]
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	f3bf 8f6f 	isb	sy
 80108a4:	e009      	b.n	80108ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	3310      	adds	r3, #16
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7ff fef2 	bl	8010694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	3324      	adds	r3, #36	; 0x24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7ff feed 	bl	8010694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80108ba:	f002 f85b 	bl	8012974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80108be:	2301      	movs	r3, #1
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	e000ed04 	.word	0xe000ed04

080108cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08a      	sub	sp, #40	; 0x28
 80108d0:	af02      	add	r7, sp, #8
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	4613      	mov	r3, r2
 80108d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10a      	bne.n	80108f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	613b      	str	r3, [r7, #16]
}
 80108f2:	bf00      	nop
 80108f4:	e7fe      	b.n	80108f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	fb02 f303 	mul.w	r3, r2, r3
 80108fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	3350      	adds	r3, #80	; 0x50
 8010904:	4618      	mov	r0, r3
 8010906:	f002 f927 	bl	8012b58 <pvPortMalloc>
 801090a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00d      	beq.n	801092e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	3350      	adds	r3, #80	; 0x50
 801091a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801091c:	79fa      	ldrb	r2, [r7, #7]
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	4613      	mov	r3, r2
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	68b9      	ldr	r1, [r7, #8]
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f000 f805 	bl	8010938 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801092e:	69bb      	ldr	r3, [r7, #24]
	}
 8010930:	4618      	mov	r0, r3
 8010932:	3720      	adds	r7, #32
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d103      	bne.n	8010954 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	e002      	b.n	801095a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010966:	2101      	movs	r1, #1
 8010968:	69b8      	ldr	r0, [r7, #24]
 801096a:	f7ff ff47 	bl	80107fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	78fa      	ldrb	r2, [r7, #3]
 8010972:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010976:	bf00      	nop
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
	...

08010980 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b08e      	sub	sp, #56	; 0x38
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	607a      	str	r2, [r7, #4]
 801098c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801098e:	2300      	movs	r3, #0
 8010990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	2b00      	cmp	r3, #0
 801099a:	d10a      	bne.n	80109b2 <xQueueGenericSend+0x32>
	__asm volatile
 801099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a0:	f383 8811 	msr	BASEPRI, r3
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80109ae:	bf00      	nop
 80109b0:	e7fe      	b.n	80109b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d103      	bne.n	80109c0 <xQueueGenericSend+0x40>
 80109b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d101      	bne.n	80109c4 <xQueueGenericSend+0x44>
 80109c0:	2301      	movs	r3, #1
 80109c2:	e000      	b.n	80109c6 <xQueueGenericSend+0x46>
 80109c4:	2300      	movs	r3, #0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10a      	bne.n	80109e0 <xQueueGenericSend+0x60>
	__asm volatile
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80109dc:	bf00      	nop
 80109de:	e7fe      	b.n	80109de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2b02      	cmp	r3, #2
 80109e4:	d103      	bne.n	80109ee <xQueueGenericSend+0x6e>
 80109e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d101      	bne.n	80109f2 <xQueueGenericSend+0x72>
 80109ee:	2301      	movs	r3, #1
 80109f0:	e000      	b.n	80109f4 <xQueueGenericSend+0x74>
 80109f2:	2300      	movs	r3, #0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d10a      	bne.n	8010a0e <xQueueGenericSend+0x8e>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fc:	f383 8811 	msr	BASEPRI, r3
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	623b      	str	r3, [r7, #32]
}
 8010a0a:	bf00      	nop
 8010a0c:	e7fe      	b.n	8010a0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a0e:	f001 f9e5 	bl	8011ddc <xTaskGetSchedulerState>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d102      	bne.n	8010a1e <xQueueGenericSend+0x9e>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d101      	bne.n	8010a22 <xQueueGenericSend+0xa2>
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e000      	b.n	8010a24 <xQueueGenericSend+0xa4>
 8010a22:	2300      	movs	r3, #0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d10a      	bne.n	8010a3e <xQueueGenericSend+0xbe>
	__asm volatile
 8010a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2c:	f383 8811 	msr	BASEPRI, r3
 8010a30:	f3bf 8f6f 	isb	sy
 8010a34:	f3bf 8f4f 	dsb	sy
 8010a38:	61fb      	str	r3, [r7, #28]
}
 8010a3a:	bf00      	nop
 8010a3c:	e7fe      	b.n	8010a3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a3e:	f001 ff69 	bl	8012914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d302      	bcc.n	8010a54 <xQueueGenericSend+0xd4>
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	2b02      	cmp	r3, #2
 8010a52:	d129      	bne.n	8010aa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	68b9      	ldr	r1, [r7, #8]
 8010a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a5a:	f000 fa0b 	bl	8010e74 <prvCopyDataToQueue>
 8010a5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d010      	beq.n	8010a8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6a:	3324      	adds	r3, #36	; 0x24
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 ffaf 	bl	80119d0 <xTaskRemoveFromEventList>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d013      	beq.n	8010aa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a78:	4b3f      	ldr	r3, [pc, #252]	; (8010b78 <xQueueGenericSend+0x1f8>)
 8010a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a7e:	601a      	str	r2, [r3, #0]
 8010a80:	f3bf 8f4f 	dsb	sy
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	e00a      	b.n	8010aa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d007      	beq.n	8010aa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a90:	4b39      	ldr	r3, [pc, #228]	; (8010b78 <xQueueGenericSend+0x1f8>)
 8010a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010aa0:	f001 ff68 	bl	8012974 <vPortExitCritical>
				return pdPASS;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e063      	b.n	8010b70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d103      	bne.n	8010ab6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010aae:	f001 ff61 	bl	8012974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	e05c      	b.n	8010b70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d106      	bne.n	8010aca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010abc:	f107 0314 	add.w	r3, r7, #20
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f001 f849 	bl	8011b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010aca:	f001 ff53 	bl	8012974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ace:	f000 fd1f 	bl	8011510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ad2:	f001 ff1f 	bl	8012914 <vPortEnterCritical>
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010adc:	b25b      	sxtb	r3, r3
 8010ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ae2:	d103      	bne.n	8010aec <xQueueGenericSend+0x16c>
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010af2:	b25b      	sxtb	r3, r3
 8010af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010af8:	d103      	bne.n	8010b02 <xQueueGenericSend+0x182>
 8010afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afc:	2200      	movs	r2, #0
 8010afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b02:	f001 ff37 	bl	8012974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b06:	1d3a      	adds	r2, r7, #4
 8010b08:	f107 0314 	add.w	r3, r7, #20
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f001 f838 	bl	8011b84 <xTaskCheckForTimeOut>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d124      	bne.n	8010b64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b1c:	f000 faa2 	bl	8011064 <prvIsQueueFull>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d018      	beq.n	8010b58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b28:	3310      	adds	r3, #16
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 fec2 	bl	80118b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b36:	f000 fa2d 	bl	8010f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010b3a:	f000 fcf7 	bl	801152c <xTaskResumeAll>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	f47f af7c 	bne.w	8010a3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010b46:	4b0c      	ldr	r3, [pc, #48]	; (8010b78 <xQueueGenericSend+0x1f8>)
 8010b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b4c:	601a      	str	r2, [r3, #0]
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	e772      	b.n	8010a3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b5a:	f000 fa1b 	bl	8010f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b5e:	f000 fce5 	bl	801152c <xTaskResumeAll>
 8010b62:	e76c      	b.n	8010a3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b66:	f000 fa15 	bl	8010f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b6a:	f000 fcdf 	bl	801152c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3738      	adds	r7, #56	; 0x38
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	e000ed04 	.word	0xe000ed04

08010b7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b090      	sub	sp, #64	; 0x40
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]
 8010b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10a      	bne.n	8010baa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b98:	f383 8811 	msr	BASEPRI, r3
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f3bf 8f4f 	dsb	sy
 8010ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010ba6:	bf00      	nop
 8010ba8:	e7fe      	b.n	8010ba8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d103      	bne.n	8010bb8 <xQueueGenericSendFromISR+0x3c>
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <xQueueGenericSendFromISR+0x40>
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e000      	b.n	8010bbe <xQueueGenericSendFromISR+0x42>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10a      	bne.n	8010bd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010bd4:	bf00      	nop
 8010bd6:	e7fe      	b.n	8010bd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d103      	bne.n	8010be6 <xQueueGenericSendFromISR+0x6a>
 8010bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d101      	bne.n	8010bea <xQueueGenericSendFromISR+0x6e>
 8010be6:	2301      	movs	r3, #1
 8010be8:	e000      	b.n	8010bec <xQueueGenericSendFromISR+0x70>
 8010bea:	2300      	movs	r3, #0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10a      	bne.n	8010c06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	623b      	str	r3, [r7, #32]
}
 8010c02:	bf00      	nop
 8010c04:	e7fe      	b.n	8010c04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c06:	f001 ff67 	bl	8012ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8010c0a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	61fa      	str	r2, [r7, #28]
 8010c20:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8010c22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d302      	bcc.n	8010c38 <xQueueGenericSendFromISR+0xbc>
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	2b02      	cmp	r3, #2
 8010c36:	d12f      	bne.n	8010c98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c48:	683a      	ldr	r2, [r7, #0]
 8010c4a:	68b9      	ldr	r1, [r7, #8]
 8010c4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010c4e:	f000 f911 	bl	8010e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c5a:	d112      	bne.n	8010c82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d016      	beq.n	8010c92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	3324      	adds	r3, #36	; 0x24
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 feb1 	bl	80119d0 <xTaskRemoveFromEventList>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00e      	beq.n	8010c92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00b      	beq.n	8010c92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	601a      	str	r2, [r3, #0]
 8010c80:	e007      	b.n	8010c92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010c86:	3301      	adds	r3, #1
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	b25a      	sxtb	r2, r3
 8010c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c92:	2301      	movs	r3, #1
 8010c94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010c96:	e001      	b.n	8010c9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c9e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	f383 8811 	msr	BASEPRI, r3
}
 8010ca6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3740      	adds	r7, #64	; 0x40
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
	...

08010cb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b08c      	sub	sp, #48	; 0x30
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d10a      	bne.n	8010ce4 <xQueueReceive+0x30>
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	623b      	str	r3, [r7, #32]
}
 8010ce0:	bf00      	nop
 8010ce2:	e7fe      	b.n	8010ce2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d103      	bne.n	8010cf2 <xQueueReceive+0x3e>
 8010cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d101      	bne.n	8010cf6 <xQueueReceive+0x42>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e000      	b.n	8010cf8 <xQueueReceive+0x44>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10a      	bne.n	8010d12 <xQueueReceive+0x5e>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	61fb      	str	r3, [r7, #28]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d12:	f001 f863 	bl	8011ddc <xTaskGetSchedulerState>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d102      	bne.n	8010d22 <xQueueReceive+0x6e>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d101      	bne.n	8010d26 <xQueueReceive+0x72>
 8010d22:	2301      	movs	r3, #1
 8010d24:	e000      	b.n	8010d28 <xQueueReceive+0x74>
 8010d26:	2300      	movs	r3, #0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d10a      	bne.n	8010d42 <xQueueReceive+0x8e>
	__asm volatile
 8010d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	61bb      	str	r3, [r7, #24]
}
 8010d3e:	bf00      	nop
 8010d40:	e7fe      	b.n	8010d40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d42:	f001 fde7 	bl	8012914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d01f      	beq.n	8010d92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d52:	68b9      	ldr	r1, [r7, #8]
 8010d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d56:	f000 f8f7 	bl	8010f48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	1e5a      	subs	r2, r3, #1
 8010d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d64:	691b      	ldr	r3, [r3, #16]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00f      	beq.n	8010d8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	3310      	adds	r3, #16
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fe2e 	bl	80119d0 <xTaskRemoveFromEventList>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d007      	beq.n	8010d8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d7a:	4b3d      	ldr	r3, [pc, #244]	; (8010e70 <xQueueReceive+0x1bc>)
 8010d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d80:	601a      	str	r2, [r3, #0]
 8010d82:	f3bf 8f4f 	dsb	sy
 8010d86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d8a:	f001 fdf3 	bl	8012974 <vPortExitCritical>
				return pdPASS;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e069      	b.n	8010e66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d103      	bne.n	8010da0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d98:	f001 fdec 	bl	8012974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e062      	b.n	8010e66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010da6:	f107 0310 	add.w	r3, r7, #16
 8010daa:	4618      	mov	r0, r3
 8010dac:	f000 fed4 	bl	8011b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010db0:	2301      	movs	r3, #1
 8010db2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010db4:	f001 fdde 	bl	8012974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010db8:	f000 fbaa 	bl	8011510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010dbc:	f001 fdaa 	bl	8012914 <vPortEnterCritical>
 8010dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dc6:	b25b      	sxtb	r3, r3
 8010dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010dcc:	d103      	bne.n	8010dd6 <xQueueReceive+0x122>
 8010dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ddc:	b25b      	sxtb	r3, r3
 8010dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010de2:	d103      	bne.n	8010dec <xQueueReceive+0x138>
 8010de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de6:	2200      	movs	r2, #0
 8010de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dec:	f001 fdc2 	bl	8012974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010df0:	1d3a      	adds	r2, r7, #4
 8010df2:	f107 0310 	add.w	r3, r7, #16
 8010df6:	4611      	mov	r1, r2
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f000 fec3 	bl	8011b84 <xTaskCheckForTimeOut>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d123      	bne.n	8010e4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e06:	f000 f917 	bl	8011038 <prvIsQueueEmpty>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d017      	beq.n	8010e40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	3324      	adds	r3, #36	; 0x24
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	4611      	mov	r1, r2
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f000 fd4d 	bl	80118b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e20:	f000 f8b8 	bl	8010f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e24:	f000 fb82 	bl	801152c <xTaskResumeAll>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d189      	bne.n	8010d42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010e2e:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <xQueueReceive+0x1bc>)
 8010e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	f3bf 8f6f 	isb	sy
 8010e3e:	e780      	b.n	8010d42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e42:	f000 f8a7 	bl	8010f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e46:	f000 fb71 	bl	801152c <xTaskResumeAll>
 8010e4a:	e77a      	b.n	8010d42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e4e:	f000 f8a1 	bl	8010f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e52:	f000 fb6b 	bl	801152c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e58:	f000 f8ee 	bl	8011038 <prvIsQueueEmpty>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f43f af6f 	beq.w	8010d42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3730      	adds	r7, #48	; 0x30
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	e000ed04 	.word	0xe000ed04

08010e74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e80:	2300      	movs	r3, #0
 8010e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10d      	bne.n	8010eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d14d      	bne.n	8010f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	689b      	ldr	r3, [r3, #8]
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f000 ffba 	bl	8011e18 <xTaskPriorityDisinherit>
 8010ea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	609a      	str	r2, [r3, #8]
 8010eac:	e043      	b.n	8010f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d119      	bne.n	8010ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6858      	ldr	r0, [r3, #4]
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	f002 f997 	bl	80131f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	685a      	ldr	r2, [r3, #4]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ecc:	441a      	add	r2, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	689b      	ldr	r3, [r3, #8]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d32b      	bcc.n	8010f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	605a      	str	r2, [r3, #4]
 8010ee6:	e026      	b.n	8010f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	68d8      	ldr	r0, [r3, #12]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	68b9      	ldr	r1, [r7, #8]
 8010ef4:	f002 f97d 	bl	80131f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	68da      	ldr	r2, [r3, #12]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f00:	425b      	negs	r3, r3
 8010f02:	441a      	add	r2, r3
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	68da      	ldr	r2, [r3, #12]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d207      	bcs.n	8010f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	689a      	ldr	r2, [r3, #8]
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1c:	425b      	negs	r3, r3
 8010f1e:	441a      	add	r2, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b02      	cmp	r3, #2
 8010f28:	d105      	bne.n	8010f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	3b01      	subs	r3, #1
 8010f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010f3e:	697b      	ldr	r3, [r7, #20]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3718      	adds	r7, #24
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d018      	beq.n	8010f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68da      	ldr	r2, [r3, #12]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f62:	441a      	add	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	68da      	ldr	r2, [r3, #12]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d303      	bcc.n	8010f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	68d9      	ldr	r1, [r3, #12]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f84:	461a      	mov	r2, r3
 8010f86:	6838      	ldr	r0, [r7, #0]
 8010f88:	f002 f933 	bl	80131f2 <memcpy>
	}
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f9c:	f001 fcba 	bl	8012914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fa8:	e011      	b.n	8010fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d012      	beq.n	8010fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	3324      	adds	r3, #36	; 0x24
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 fd0a 	bl	80119d0 <xTaskRemoveFromEventList>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010fc2:	f000 fe41 	bl	8011c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010fc6:	7bfb      	ldrb	r3, [r7, #15]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	dce9      	bgt.n	8010faa <prvUnlockQueue+0x16>
 8010fd6:	e000      	b.n	8010fda <prvUnlockQueue+0x46>
					break;
 8010fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	22ff      	movs	r2, #255	; 0xff
 8010fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010fe2:	f001 fcc7 	bl	8012974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010fe6:	f001 fc95 	bl	8012914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ff2:	e011      	b.n	8011018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d012      	beq.n	8011022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	3310      	adds	r3, #16
 8011000:	4618      	mov	r0, r3
 8011002:	f000 fce5 	bl	80119d0 <xTaskRemoveFromEventList>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801100c:	f000 fe1c 	bl	8011c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011010:	7bbb      	ldrb	r3, [r7, #14]
 8011012:	3b01      	subs	r3, #1
 8011014:	b2db      	uxtb	r3, r3
 8011016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dce9      	bgt.n	8010ff4 <prvUnlockQueue+0x60>
 8011020:	e000      	b.n	8011024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	22ff      	movs	r2, #255	; 0xff
 8011028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801102c:	f001 fca2 	bl	8012974 <vPortExitCritical>
}
 8011030:	bf00      	nop
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011040:	f001 fc68 	bl	8012914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011048:	2b00      	cmp	r3, #0
 801104a:	d102      	bne.n	8011052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801104c:	2301      	movs	r3, #1
 801104e:	60fb      	str	r3, [r7, #12]
 8011050:	e001      	b.n	8011056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011052:	2300      	movs	r3, #0
 8011054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011056:	f001 fc8d 	bl	8012974 <vPortExitCritical>

	return xReturn;
 801105a:	68fb      	ldr	r3, [r7, #12]
}
 801105c:	4618      	mov	r0, r3
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801106c:	f001 fc52 	bl	8012914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011078:	429a      	cmp	r2, r3
 801107a:	d102      	bne.n	8011082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801107c:	2301      	movs	r3, #1
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	e001      	b.n	8011086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011082:	2300      	movs	r3, #0
 8011084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011086:	f001 fc75 	bl	8012974 <vPortExitCritical>

	return xReturn;
 801108a:	68fb      	ldr	r3, [r7, #12]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801109e:	2300      	movs	r3, #0
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	e014      	b.n	80110ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80110a4:	4a0f      	ldr	r2, [pc, #60]	; (80110e4 <vQueueAddToRegistry+0x50>)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d10b      	bne.n	80110c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80110b0:	490c      	ldr	r1, [pc, #48]	; (80110e4 <vQueueAddToRegistry+0x50>)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80110ba:	4a0a      	ldr	r2, [pc, #40]	; (80110e4 <vQueueAddToRegistry+0x50>)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	4413      	add	r3, r2
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80110c6:	e006      	b.n	80110d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	3301      	adds	r3, #1
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2b07      	cmp	r3, #7
 80110d2:	d9e7      	bls.n	80110a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80110d4:	bf00      	nop
 80110d6:	bf00      	nop
 80110d8:	3714      	adds	r7, #20
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	200026a8 	.word	0x200026a8

080110e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b086      	sub	sp, #24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80110f8:	f001 fc0c 	bl	8012914 <vPortEnterCritical>
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011102:	b25b      	sxtb	r3, r3
 8011104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011108:	d103      	bne.n	8011112 <vQueueWaitForMessageRestricted+0x2a>
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011118:	b25b      	sxtb	r3, r3
 801111a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801111e:	d103      	bne.n	8011128 <vQueueWaitForMessageRestricted+0x40>
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	2200      	movs	r2, #0
 8011124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011128:	f001 fc24 	bl	8012974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011130:	2b00      	cmp	r3, #0
 8011132:	d106      	bne.n	8011142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	3324      	adds	r3, #36	; 0x24
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	68b9      	ldr	r1, [r7, #8]
 801113c:	4618      	mov	r0, r3
 801113e:	f000 fc1b 	bl	8011978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011142:	6978      	ldr	r0, [r7, #20]
 8011144:	f7ff ff26 	bl	8010f94 <prvUnlockQueue>
	}
 8011148:	bf00      	nop
 801114a:	3718      	adds	r7, #24
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011150:	b580      	push	{r7, lr}
 8011152:	b08c      	sub	sp, #48	; 0x30
 8011154:	af04      	add	r7, sp, #16
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	603b      	str	r3, [r7, #0]
 801115c:	4613      	mov	r3, r2
 801115e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011160:	88fb      	ldrh	r3, [r7, #6]
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4618      	mov	r0, r3
 8011166:	f001 fcf7 	bl	8012b58 <pvPortMalloc>
 801116a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00e      	beq.n	8011190 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011172:	20bc      	movs	r0, #188	; 0xbc
 8011174:	f001 fcf0 	bl	8012b58 <pvPortMalloc>
 8011178:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d003      	beq.n	8011188 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	697a      	ldr	r2, [r7, #20]
 8011184:	631a      	str	r2, [r3, #48]	; 0x30
 8011186:	e005      	b.n	8011194 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011188:	6978      	ldr	r0, [r7, #20]
 801118a:	f001 fdb1 	bl	8012cf0 <vPortFree>
 801118e:	e001      	b.n	8011194 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011190:	2300      	movs	r3, #0
 8011192:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d013      	beq.n	80111c2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801119a:	88fa      	ldrh	r2, [r7, #6]
 801119c:	2300      	movs	r3, #0
 801119e:	9303      	str	r3, [sp, #12]
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	9302      	str	r3, [sp, #8]
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	68b9      	ldr	r1, [r7, #8]
 80111b0:	68f8      	ldr	r0, [r7, #12]
 80111b2:	f000 f80f 	bl	80111d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80111b6:	69f8      	ldr	r0, [r7, #28]
 80111b8:	f000 f8b2 	bl	8011320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80111bc:	2301      	movs	r3, #1
 80111be:	61bb      	str	r3, [r7, #24]
 80111c0:	e002      	b.n	80111c8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80111c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80111c8:	69bb      	ldr	r3, [r7, #24]
	}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3720      	adds	r7, #32
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
	...

080111d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b088      	sub	sp, #32
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80111e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	461a      	mov	r2, r3
 80111ec:	21a5      	movs	r1, #165	; 0xa5
 80111ee:	f002 f80e 	bl	801320e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80111f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80111fc:	3b01      	subs	r3, #1
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	f023 0307 	bic.w	r3, r3, #7
 801120a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	f003 0307 	and.w	r3, r3, #7
 8011212:	2b00      	cmp	r3, #0
 8011214:	d00a      	beq.n	801122c <prvInitialiseNewTask+0x58>
	__asm volatile
 8011216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121a:	f383 8811 	msr	BASEPRI, r3
 801121e:	f3bf 8f6f 	isb	sy
 8011222:	f3bf 8f4f 	dsb	sy
 8011226:	617b      	str	r3, [r7, #20]
}
 8011228:	bf00      	nop
 801122a:	e7fe      	b.n	801122a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d01f      	beq.n	8011272 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011232:	2300      	movs	r3, #0
 8011234:	61fb      	str	r3, [r7, #28]
 8011236:	e012      	b.n	801125e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	4413      	add	r3, r2
 801123e:	7819      	ldrb	r1, [r3, #0]
 8011240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	4413      	add	r3, r2
 8011246:	3334      	adds	r3, #52	; 0x34
 8011248:	460a      	mov	r2, r1
 801124a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	4413      	add	r3, r2
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d006      	beq.n	8011266 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	3301      	adds	r3, #1
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	2b0f      	cmp	r3, #15
 8011262:	d9e9      	bls.n	8011238 <prvInitialiseNewTask+0x64>
 8011264:	e000      	b.n	8011268 <prvInitialiseNewTask+0x94>
			{
				break;
 8011266:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126a:	2200      	movs	r2, #0
 801126c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011270:	e003      	b.n	801127a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	2200      	movs	r2, #0
 8011276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127c:	2b06      	cmp	r3, #6
 801127e:	d901      	bls.n	8011284 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011280:	2306      	movs	r3, #6
 8011282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801128e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011292:	2200      	movs	r2, #0
 8011294:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011298:	3304      	adds	r3, #4
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fa1a 	bl	80106d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80112a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a2:	3318      	adds	r3, #24
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff fa15 	bl	80106d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80112aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b2:	f1c3 0207 	rsb	r2, r3, #7
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80112ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	2200      	movs	r2, #0
 80112c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	2200      	movs	r2, #0
 80112cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80112d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d2:	3354      	adds	r3, #84	; 0x54
 80112d4:	2260      	movs	r2, #96	; 0x60
 80112d6:	2100      	movs	r1, #0
 80112d8:	4618      	mov	r0, r3
 80112da:	f001 ff98 	bl	801320e <memset>
 80112de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e0:	4a0c      	ldr	r2, [pc, #48]	; (8011314 <prvInitialiseNewTask+0x140>)
 80112e2:	659a      	str	r2, [r3, #88]	; 0x58
 80112e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e6:	4a0c      	ldr	r2, [pc, #48]	; (8011318 <prvInitialiseNewTask+0x144>)
 80112e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80112ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ec:	4a0b      	ldr	r2, [pc, #44]	; (801131c <prvInitialiseNewTask+0x148>)
 80112ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80112f0:	683a      	ldr	r2, [r7, #0]
 80112f2:	68f9      	ldr	r1, [r7, #12]
 80112f4:	69b8      	ldr	r0, [r7, #24]
 80112f6:	f001 f9e1 	bl	80126bc <pxPortInitialiseStack>
 80112fa:	4602      	mov	r2, r0
 80112fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801130a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801130c:	bf00      	nop
 801130e:	3720      	adds	r7, #32
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	08016b60 	.word	0x08016b60
 8011318:	08016b80 	.word	0x08016b80
 801131c:	08016b40 	.word	0x08016b40

08011320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011328:	f001 faf4 	bl	8012914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801132c:	4b2c      	ldr	r3, [pc, #176]	; (80113e0 <prvAddNewTaskToReadyList+0xc0>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	3301      	adds	r3, #1
 8011332:	4a2b      	ldr	r2, [pc, #172]	; (80113e0 <prvAddNewTaskToReadyList+0xc0>)
 8011334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011336:	4b2b      	ldr	r3, [pc, #172]	; (80113e4 <prvAddNewTaskToReadyList+0xc4>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d109      	bne.n	8011352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801133e:	4a29      	ldr	r2, [pc, #164]	; (80113e4 <prvAddNewTaskToReadyList+0xc4>)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011344:	4b26      	ldr	r3, [pc, #152]	; (80113e0 <prvAddNewTaskToReadyList+0xc0>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d110      	bne.n	801136e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801134c:	f000 fca2 	bl	8011c94 <prvInitialiseTaskLists>
 8011350:	e00d      	b.n	801136e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011352:	4b25      	ldr	r3, [pc, #148]	; (80113e8 <prvAddNewTaskToReadyList+0xc8>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d109      	bne.n	801136e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801135a:	4b22      	ldr	r3, [pc, #136]	; (80113e4 <prvAddNewTaskToReadyList+0xc4>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011364:	429a      	cmp	r2, r3
 8011366:	d802      	bhi.n	801136e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011368:	4a1e      	ldr	r2, [pc, #120]	; (80113e4 <prvAddNewTaskToReadyList+0xc4>)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801136e:	4b1f      	ldr	r3, [pc, #124]	; (80113ec <prvAddNewTaskToReadyList+0xcc>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	3301      	adds	r3, #1
 8011374:	4a1d      	ldr	r2, [pc, #116]	; (80113ec <prvAddNewTaskToReadyList+0xcc>)
 8011376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011378:	4b1c      	ldr	r3, [pc, #112]	; (80113ec <prvAddNewTaskToReadyList+0xcc>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011384:	2201      	movs	r2, #1
 8011386:	409a      	lsls	r2, r3
 8011388:	4b19      	ldr	r3, [pc, #100]	; (80113f0 <prvAddNewTaskToReadyList+0xd0>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4313      	orrs	r3, r2
 801138e:	4a18      	ldr	r2, [pc, #96]	; (80113f0 <prvAddNewTaskToReadyList+0xd0>)
 8011390:	6013      	str	r3, [r2, #0]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011396:	4613      	mov	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	4413      	add	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4a15      	ldr	r2, [pc, #84]	; (80113f4 <prvAddNewTaskToReadyList+0xd4>)
 80113a0:	441a      	add	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	3304      	adds	r3, #4
 80113a6:	4619      	mov	r1, r3
 80113a8:	4610      	mov	r0, r2
 80113aa:	f7ff f9a0 	bl	80106ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80113ae:	f001 fae1 	bl	8012974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80113b2:	4b0d      	ldr	r3, [pc, #52]	; (80113e8 <prvAddNewTaskToReadyList+0xc8>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00e      	beq.n	80113d8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80113ba:	4b0a      	ldr	r3, [pc, #40]	; (80113e4 <prvAddNewTaskToReadyList+0xc4>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d207      	bcs.n	80113d8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80113c8:	4b0b      	ldr	r3, [pc, #44]	; (80113f8 <prvAddNewTaskToReadyList+0xd8>)
 80113ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113ce:	601a      	str	r2, [r3, #0]
 80113d0:	f3bf 8f4f 	dsb	sy
 80113d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113d8:	bf00      	nop
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	200027e8 	.word	0x200027e8
 80113e4:	200026e8 	.word	0x200026e8
 80113e8:	200027f4 	.word	0x200027f4
 80113ec:	20002804 	.word	0x20002804
 80113f0:	200027f0 	.word	0x200027f0
 80113f4:	200026ec 	.word	0x200026ec
 80113f8:	e000ed04 	.word	0xe000ed04

080113fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011404:	2300      	movs	r3, #0
 8011406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d017      	beq.n	801143e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801140e:	4b13      	ldr	r3, [pc, #76]	; (801145c <vTaskDelay+0x60>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00a      	beq.n	801142c <vTaskDelay+0x30>
	__asm volatile
 8011416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141a:	f383 8811 	msr	BASEPRI, r3
 801141e:	f3bf 8f6f 	isb	sy
 8011422:	f3bf 8f4f 	dsb	sy
 8011426:	60bb      	str	r3, [r7, #8]
}
 8011428:	bf00      	nop
 801142a:	e7fe      	b.n	801142a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801142c:	f000 f870 	bl	8011510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011430:	2100      	movs	r1, #0
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 fd8e 	bl	8011f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011438:	f000 f878 	bl	801152c <xTaskResumeAll>
 801143c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d107      	bne.n	8011454 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011444:	4b06      	ldr	r3, [pc, #24]	; (8011460 <vTaskDelay+0x64>)
 8011446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801144a:	601a      	str	r2, [r3, #0]
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011454:	bf00      	nop
 8011456:	3710      	adds	r7, #16
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	20002810 	.word	0x20002810
 8011460:	e000ed04 	.word	0xe000ed04

08011464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801146a:	4b21      	ldr	r3, [pc, #132]	; (80114f0 <vTaskStartScheduler+0x8c>)
 801146c:	9301      	str	r3, [sp, #4]
 801146e:	2300      	movs	r3, #0
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	2300      	movs	r3, #0
 8011474:	2280      	movs	r2, #128	; 0x80
 8011476:	491f      	ldr	r1, [pc, #124]	; (80114f4 <vTaskStartScheduler+0x90>)
 8011478:	481f      	ldr	r0, [pc, #124]	; (80114f8 <vTaskStartScheduler+0x94>)
 801147a:	f7ff fe69 	bl	8011150 <xTaskCreate>
 801147e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	2b01      	cmp	r3, #1
 8011484:	d102      	bne.n	801148c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8011486:	f000 fdcb 	bl	8012020 <xTimerCreateTimerTask>
 801148a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d11b      	bne.n	80114ca <vTaskStartScheduler+0x66>
	__asm volatile
 8011492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	60bb      	str	r3, [r7, #8]
}
 80114a4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114a6:	4b15      	ldr	r3, [pc, #84]	; (80114fc <vTaskStartScheduler+0x98>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	3354      	adds	r3, #84	; 0x54
 80114ac:	4a14      	ldr	r2, [pc, #80]	; (8011500 <vTaskStartScheduler+0x9c>)
 80114ae:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80114b0:	4b14      	ldr	r3, [pc, #80]	; (8011504 <vTaskStartScheduler+0xa0>)
 80114b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80114b8:	4b13      	ldr	r3, [pc, #76]	; (8011508 <vTaskStartScheduler+0xa4>)
 80114ba:	2201      	movs	r2, #1
 80114bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80114be:	4b13      	ldr	r3, [pc, #76]	; (801150c <vTaskStartScheduler+0xa8>)
 80114c0:	2200      	movs	r2, #0
 80114c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80114c4:	f001 f984 	bl	80127d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80114c8:	e00e      	b.n	80114e8 <vTaskStartScheduler+0x84>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114d0:	d10a      	bne.n	80114e8 <vTaskStartScheduler+0x84>
	__asm volatile
 80114d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d6:	f383 8811 	msr	BASEPRI, r3
 80114da:	f3bf 8f6f 	isb	sy
 80114de:	f3bf 8f4f 	dsb	sy
 80114e2:	607b      	str	r3, [r7, #4]
}
 80114e4:	bf00      	nop
 80114e6:	e7fe      	b.n	80114e6 <vTaskStartScheduler+0x82>
}
 80114e8:	bf00      	nop
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	2000280c 	.word	0x2000280c
 80114f4:	08014d0c 	.word	0x08014d0c
 80114f8:	08011c61 	.word	0x08011c61
 80114fc:	200026e8 	.word	0x200026e8
 8011500:	20000b20 	.word	0x20000b20
 8011504:	20002808 	.word	0x20002808
 8011508:	200027f4 	.word	0x200027f4
 801150c:	200027ec 	.word	0x200027ec

08011510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011510:	b480      	push	{r7}
 8011512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011514:	4b04      	ldr	r3, [pc, #16]	; (8011528 <vTaskSuspendAll+0x18>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	3301      	adds	r3, #1
 801151a:	4a03      	ldr	r2, [pc, #12]	; (8011528 <vTaskSuspendAll+0x18>)
 801151c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801151e:	bf00      	nop
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	20002810 	.word	0x20002810

0801152c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b084      	sub	sp, #16
 8011530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011532:	2300      	movs	r3, #0
 8011534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011536:	2300      	movs	r3, #0
 8011538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801153a:	4b41      	ldr	r3, [pc, #260]	; (8011640 <xTaskResumeAll+0x114>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10a      	bne.n	8011558 <xTaskResumeAll+0x2c>
	__asm volatile
 8011542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011546:	f383 8811 	msr	BASEPRI, r3
 801154a:	f3bf 8f6f 	isb	sy
 801154e:	f3bf 8f4f 	dsb	sy
 8011552:	603b      	str	r3, [r7, #0]
}
 8011554:	bf00      	nop
 8011556:	e7fe      	b.n	8011556 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011558:	f001 f9dc 	bl	8012914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801155c:	4b38      	ldr	r3, [pc, #224]	; (8011640 <xTaskResumeAll+0x114>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	3b01      	subs	r3, #1
 8011562:	4a37      	ldr	r2, [pc, #220]	; (8011640 <xTaskResumeAll+0x114>)
 8011564:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011566:	4b36      	ldr	r3, [pc, #216]	; (8011640 <xTaskResumeAll+0x114>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d161      	bne.n	8011632 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801156e:	4b35      	ldr	r3, [pc, #212]	; (8011644 <xTaskResumeAll+0x118>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d05d      	beq.n	8011632 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011576:	e02e      	b.n	80115d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011578:	4b33      	ldr	r3, [pc, #204]	; (8011648 <xTaskResumeAll+0x11c>)
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3318      	adds	r3, #24
 8011584:	4618      	mov	r0, r3
 8011586:	f7ff f90f 	bl	80107a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	3304      	adds	r3, #4
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff f90a 	bl	80107a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011598:	2201      	movs	r2, #1
 801159a:	409a      	lsls	r2, r3
 801159c:	4b2b      	ldr	r3, [pc, #172]	; (801164c <xTaskResumeAll+0x120>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4313      	orrs	r3, r2
 80115a2:	4a2a      	ldr	r2, [pc, #168]	; (801164c <xTaskResumeAll+0x120>)
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115aa:	4613      	mov	r3, r2
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	4a27      	ldr	r2, [pc, #156]	; (8011650 <xTaskResumeAll+0x124>)
 80115b4:	441a      	add	r2, r3
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3304      	adds	r3, #4
 80115ba:	4619      	mov	r1, r3
 80115bc:	4610      	mov	r0, r2
 80115be:	f7ff f896 	bl	80106ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c6:	4b23      	ldr	r3, [pc, #140]	; (8011654 <xTaskResumeAll+0x128>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d302      	bcc.n	80115d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80115d0:	4b21      	ldr	r3, [pc, #132]	; (8011658 <xTaskResumeAll+0x12c>)
 80115d2:	2201      	movs	r2, #1
 80115d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115d6:	4b1c      	ldr	r3, [pc, #112]	; (8011648 <xTaskResumeAll+0x11c>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d1cc      	bne.n	8011578 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d001      	beq.n	80115e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80115e4:	f000 fbda 	bl	8011d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80115e8:	4b1c      	ldr	r3, [pc, #112]	; (801165c <xTaskResumeAll+0x130>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d010      	beq.n	8011616 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80115f4:	f000 f846 	bl	8011684 <xTaskIncrementTick>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d002      	beq.n	8011604 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80115fe:	4b16      	ldr	r3, [pc, #88]	; (8011658 <xTaskResumeAll+0x12c>)
 8011600:	2201      	movs	r2, #1
 8011602:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	3b01      	subs	r3, #1
 8011608:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d1f1      	bne.n	80115f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011610:	4b12      	ldr	r3, [pc, #72]	; (801165c <xTaskResumeAll+0x130>)
 8011612:	2200      	movs	r2, #0
 8011614:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011616:	4b10      	ldr	r3, [pc, #64]	; (8011658 <xTaskResumeAll+0x12c>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d009      	beq.n	8011632 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801161e:	2301      	movs	r3, #1
 8011620:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011622:	4b0f      	ldr	r3, [pc, #60]	; (8011660 <xTaskResumeAll+0x134>)
 8011624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011628:	601a      	str	r2, [r3, #0]
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011632:	f001 f99f 	bl	8012974 <vPortExitCritical>

	return xAlreadyYielded;
 8011636:	68bb      	ldr	r3, [r7, #8]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3710      	adds	r7, #16
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	20002810 	.word	0x20002810
 8011644:	200027e8 	.word	0x200027e8
 8011648:	200027a8 	.word	0x200027a8
 801164c:	200027f0 	.word	0x200027f0
 8011650:	200026ec 	.word	0x200026ec
 8011654:	200026e8 	.word	0x200026e8
 8011658:	200027fc 	.word	0x200027fc
 801165c:	200027f8 	.word	0x200027f8
 8011660:	e000ed04 	.word	0xe000ed04

08011664 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801166a:	4b05      	ldr	r3, [pc, #20]	; (8011680 <xTaskGetTickCount+0x1c>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011670:	687b      	ldr	r3, [r7, #4]
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	200027ec 	.word	0x200027ec

08011684 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801168a:	2300      	movs	r3, #0
 801168c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801168e:	4b4e      	ldr	r3, [pc, #312]	; (80117c8 <xTaskIncrementTick+0x144>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	f040 808e 	bne.w	80117b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011698:	4b4c      	ldr	r3, [pc, #304]	; (80117cc <xTaskIncrementTick+0x148>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3301      	adds	r3, #1
 801169e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80116a0:	4a4a      	ldr	r2, [pc, #296]	; (80117cc <xTaskIncrementTick+0x148>)
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d120      	bne.n	80116ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80116ac:	4b48      	ldr	r3, [pc, #288]	; (80117d0 <xTaskIncrementTick+0x14c>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d00a      	beq.n	80116cc <xTaskIncrementTick+0x48>
	__asm volatile
 80116b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	603b      	str	r3, [r7, #0]
}
 80116c8:	bf00      	nop
 80116ca:	e7fe      	b.n	80116ca <xTaskIncrementTick+0x46>
 80116cc:	4b40      	ldr	r3, [pc, #256]	; (80117d0 <xTaskIncrementTick+0x14c>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	4b40      	ldr	r3, [pc, #256]	; (80117d4 <xTaskIncrementTick+0x150>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	4a3e      	ldr	r2, [pc, #248]	; (80117d0 <xTaskIncrementTick+0x14c>)
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	4a3e      	ldr	r2, [pc, #248]	; (80117d4 <xTaskIncrementTick+0x150>)
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	4b3d      	ldr	r3, [pc, #244]	; (80117d8 <xTaskIncrementTick+0x154>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	3301      	adds	r3, #1
 80116e6:	4a3c      	ldr	r2, [pc, #240]	; (80117d8 <xTaskIncrementTick+0x154>)
 80116e8:	6013      	str	r3, [r2, #0]
 80116ea:	f000 fb57 	bl	8011d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80116ee:	4b3b      	ldr	r3, [pc, #236]	; (80117dc <xTaskIncrementTick+0x158>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	693a      	ldr	r2, [r7, #16]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d348      	bcc.n	801178a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116f8:	4b35      	ldr	r3, [pc, #212]	; (80117d0 <xTaskIncrementTick+0x14c>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d104      	bne.n	801170c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011702:	4b36      	ldr	r3, [pc, #216]	; (80117dc <xTaskIncrementTick+0x158>)
 8011704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011708:	601a      	str	r2, [r3, #0]
					break;
 801170a:	e03e      	b.n	801178a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801170c:	4b30      	ldr	r3, [pc, #192]	; (80117d0 <xTaskIncrementTick+0x14c>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801171c:	693a      	ldr	r2, [r7, #16]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	429a      	cmp	r2, r3
 8011722:	d203      	bcs.n	801172c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011724:	4a2d      	ldr	r2, [pc, #180]	; (80117dc <xTaskIncrementTick+0x158>)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801172a:	e02e      	b.n	801178a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	3304      	adds	r3, #4
 8011730:	4618      	mov	r0, r3
 8011732:	f7ff f839 	bl	80107a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801173a:	2b00      	cmp	r3, #0
 801173c:	d004      	beq.n	8011748 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	3318      	adds	r3, #24
 8011742:	4618      	mov	r0, r3
 8011744:	f7ff f830 	bl	80107a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801174c:	2201      	movs	r2, #1
 801174e:	409a      	lsls	r2, r3
 8011750:	4b23      	ldr	r3, [pc, #140]	; (80117e0 <xTaskIncrementTick+0x15c>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4313      	orrs	r3, r2
 8011756:	4a22      	ldr	r2, [pc, #136]	; (80117e0 <xTaskIncrementTick+0x15c>)
 8011758:	6013      	str	r3, [r2, #0]
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801175e:	4613      	mov	r3, r2
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4413      	add	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4a1f      	ldr	r2, [pc, #124]	; (80117e4 <xTaskIncrementTick+0x160>)
 8011768:	441a      	add	r2, r3
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	3304      	adds	r3, #4
 801176e:	4619      	mov	r1, r3
 8011770:	4610      	mov	r0, r2
 8011772:	f7fe ffbc 	bl	80106ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801177a:	4b1b      	ldr	r3, [pc, #108]	; (80117e8 <xTaskIncrementTick+0x164>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011780:	429a      	cmp	r2, r3
 8011782:	d3b9      	bcc.n	80116f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011784:	2301      	movs	r3, #1
 8011786:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011788:	e7b6      	b.n	80116f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801178a:	4b17      	ldr	r3, [pc, #92]	; (80117e8 <xTaskIncrementTick+0x164>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011790:	4914      	ldr	r1, [pc, #80]	; (80117e4 <xTaskIncrementTick+0x160>)
 8011792:	4613      	mov	r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	4413      	add	r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	440b      	add	r3, r1
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d901      	bls.n	80117a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80117a2:	2301      	movs	r3, #1
 80117a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80117a6:	4b11      	ldr	r3, [pc, #68]	; (80117ec <xTaskIncrementTick+0x168>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d007      	beq.n	80117be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80117ae:	2301      	movs	r3, #1
 80117b0:	617b      	str	r3, [r7, #20]
 80117b2:	e004      	b.n	80117be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80117b4:	4b0e      	ldr	r3, [pc, #56]	; (80117f0 <xTaskIncrementTick+0x16c>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	3301      	adds	r3, #1
 80117ba:	4a0d      	ldr	r2, [pc, #52]	; (80117f0 <xTaskIncrementTick+0x16c>)
 80117bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80117be:	697b      	ldr	r3, [r7, #20]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3718      	adds	r7, #24
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	20002810 	.word	0x20002810
 80117cc:	200027ec 	.word	0x200027ec
 80117d0:	200027a0 	.word	0x200027a0
 80117d4:	200027a4 	.word	0x200027a4
 80117d8:	20002800 	.word	0x20002800
 80117dc:	20002808 	.word	0x20002808
 80117e0:	200027f0 	.word	0x200027f0
 80117e4:	200026ec 	.word	0x200026ec
 80117e8:	200026e8 	.word	0x200026e8
 80117ec:	200027fc 	.word	0x200027fc
 80117f0:	200027f8 	.word	0x200027f8

080117f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80117f4:	b480      	push	{r7}
 80117f6:	b087      	sub	sp, #28
 80117f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80117fa:	4b29      	ldr	r3, [pc, #164]	; (80118a0 <vTaskSwitchContext+0xac>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d003      	beq.n	801180a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011802:	4b28      	ldr	r3, [pc, #160]	; (80118a4 <vTaskSwitchContext+0xb0>)
 8011804:	2201      	movs	r2, #1
 8011806:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011808:	e044      	b.n	8011894 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801180a:	4b26      	ldr	r3, [pc, #152]	; (80118a4 <vTaskSwitchContext+0xb0>)
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011810:	4b25      	ldr	r3, [pc, #148]	; (80118a8 <vTaskSwitchContext+0xb4>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	fab3 f383 	clz	r3, r3
 801181c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801181e:	7afb      	ldrb	r3, [r7, #11]
 8011820:	f1c3 031f 	rsb	r3, r3, #31
 8011824:	617b      	str	r3, [r7, #20]
 8011826:	4921      	ldr	r1, [pc, #132]	; (80118ac <vTaskSwitchContext+0xb8>)
 8011828:	697a      	ldr	r2, [r7, #20]
 801182a:	4613      	mov	r3, r2
 801182c:	009b      	lsls	r3, r3, #2
 801182e:	4413      	add	r3, r2
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	440b      	add	r3, r1
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d10a      	bne.n	8011850 <vTaskSwitchContext+0x5c>
	__asm volatile
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	f383 8811 	msr	BASEPRI, r3
 8011842:	f3bf 8f6f 	isb	sy
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	607b      	str	r3, [r7, #4]
}
 801184c:	bf00      	nop
 801184e:	e7fe      	b.n	801184e <vTaskSwitchContext+0x5a>
 8011850:	697a      	ldr	r2, [r7, #20]
 8011852:	4613      	mov	r3, r2
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	4413      	add	r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	4a14      	ldr	r2, [pc, #80]	; (80118ac <vTaskSwitchContext+0xb8>)
 801185c:	4413      	add	r3, r2
 801185e:	613b      	str	r3, [r7, #16]
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	685a      	ldr	r2, [r3, #4]
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	605a      	str	r2, [r3, #4]
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	685a      	ldr	r2, [r3, #4]
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	3308      	adds	r3, #8
 8011872:	429a      	cmp	r2, r3
 8011874:	d104      	bne.n	8011880 <vTaskSwitchContext+0x8c>
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	605a      	str	r2, [r3, #4]
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	4a0a      	ldr	r2, [pc, #40]	; (80118b0 <vTaskSwitchContext+0xbc>)
 8011888:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801188a:	4b09      	ldr	r3, [pc, #36]	; (80118b0 <vTaskSwitchContext+0xbc>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	3354      	adds	r3, #84	; 0x54
 8011890:	4a08      	ldr	r2, [pc, #32]	; (80118b4 <vTaskSwitchContext+0xc0>)
 8011892:	6013      	str	r3, [r2, #0]
}
 8011894:	bf00      	nop
 8011896:	371c      	adds	r7, #28
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr
 80118a0:	20002810 	.word	0x20002810
 80118a4:	200027fc 	.word	0x200027fc
 80118a8:	200027f0 	.word	0x200027f0
 80118ac:	200026ec 	.word	0x200026ec
 80118b0:	200026e8 	.word	0x200026e8
 80118b4:	20000b20 	.word	0x20000b20

080118b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d10a      	bne.n	80118de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80118c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118cc:	f383 8811 	msr	BASEPRI, r3
 80118d0:	f3bf 8f6f 	isb	sy
 80118d4:	f3bf 8f4f 	dsb	sy
 80118d8:	60fb      	str	r3, [r7, #12]
}
 80118da:	bf00      	nop
 80118dc:	e7fe      	b.n	80118dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118de:	4b07      	ldr	r3, [pc, #28]	; (80118fc <vTaskPlaceOnEventList+0x44>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	3318      	adds	r3, #24
 80118e4:	4619      	mov	r1, r3
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7fe ff25 	bl	8010736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118ec:	2101      	movs	r1, #1
 80118ee:	6838      	ldr	r0, [r7, #0]
 80118f0:	f000 fb30 	bl	8011f54 <prvAddCurrentTaskToDelayedList>
}
 80118f4:	bf00      	nop
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	200026e8 	.word	0x200026e8

08011900 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b086      	sub	sp, #24
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d10a      	bne.n	8011928 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011916:	f383 8811 	msr	BASEPRI, r3
 801191a:	f3bf 8f6f 	isb	sy
 801191e:	f3bf 8f4f 	dsb	sy
 8011922:	617b      	str	r3, [r7, #20]
}
 8011924:	bf00      	nop
 8011926:	e7fe      	b.n	8011926 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011928:	4b11      	ldr	r3, [pc, #68]	; (8011970 <vTaskPlaceOnUnorderedEventList+0x70>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d10a      	bne.n	8011946 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011934:	f383 8811 	msr	BASEPRI, r3
 8011938:	f3bf 8f6f 	isb	sy
 801193c:	f3bf 8f4f 	dsb	sy
 8011940:	613b      	str	r3, [r7, #16]
}
 8011942:	bf00      	nop
 8011944:	e7fe      	b.n	8011944 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011946:	4b0b      	ldr	r3, [pc, #44]	; (8011974 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	68ba      	ldr	r2, [r7, #8]
 801194c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011950:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011952:	4b08      	ldr	r3, [pc, #32]	; (8011974 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	3318      	adds	r3, #24
 8011958:	4619      	mov	r1, r3
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f7fe fec7 	bl	80106ee <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011960:	2101      	movs	r1, #1
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f000 faf6 	bl	8011f54 <prvAddCurrentTaskToDelayedList>
}
 8011968:	bf00      	nop
 801196a:	3718      	adds	r7, #24
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	20002810 	.word	0x20002810
 8011974:	200026e8 	.word	0x200026e8

08011978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011978:	b580      	push	{r7, lr}
 801197a:	b086      	sub	sp, #24
 801197c:	af00      	add	r7, sp, #0
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d10a      	bne.n	80119a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801198a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198e:	f383 8811 	msr	BASEPRI, r3
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	f3bf 8f4f 	dsb	sy
 801199a:	617b      	str	r3, [r7, #20]
}
 801199c:	bf00      	nop
 801199e:	e7fe      	b.n	801199e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119a0:	4b0a      	ldr	r3, [pc, #40]	; (80119cc <vTaskPlaceOnEventListRestricted+0x54>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	3318      	adds	r3, #24
 80119a6:	4619      	mov	r1, r3
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f7fe fea0 	bl	80106ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80119b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80119ba:	6879      	ldr	r1, [r7, #4]
 80119bc:	68b8      	ldr	r0, [r7, #8]
 80119be:	f000 fac9 	bl	8011f54 <prvAddCurrentTaskToDelayedList>
	}
 80119c2:	bf00      	nop
 80119c4:	3718      	adds	r7, #24
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	200026e8 	.word	0x200026e8

080119d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10a      	bne.n	80119fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80119e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ea:	f383 8811 	msr	BASEPRI, r3
 80119ee:	f3bf 8f6f 	isb	sy
 80119f2:	f3bf 8f4f 	dsb	sy
 80119f6:	60fb      	str	r3, [r7, #12]
}
 80119f8:	bf00      	nop
 80119fa:	e7fe      	b.n	80119fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	3318      	adds	r3, #24
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7fe fed1 	bl	80107a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a06:	4b1d      	ldr	r3, [pc, #116]	; (8011a7c <xTaskRemoveFromEventList+0xac>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d11c      	bne.n	8011a48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	3304      	adds	r3, #4
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fe fec8 	bl	80107a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	409a      	lsls	r2, r3
 8011a20:	4b17      	ldr	r3, [pc, #92]	; (8011a80 <xTaskRemoveFromEventList+0xb0>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4313      	orrs	r3, r2
 8011a26:	4a16      	ldr	r2, [pc, #88]	; (8011a80 <xTaskRemoveFromEventList+0xb0>)
 8011a28:	6013      	str	r3, [r2, #0]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a2e:	4613      	mov	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	4a13      	ldr	r2, [pc, #76]	; (8011a84 <xTaskRemoveFromEventList+0xb4>)
 8011a38:	441a      	add	r2, r3
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	4619      	mov	r1, r3
 8011a40:	4610      	mov	r0, r2
 8011a42:	f7fe fe54 	bl	80106ee <vListInsertEnd>
 8011a46:	e005      	b.n	8011a54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	3318      	adds	r3, #24
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	480e      	ldr	r0, [pc, #56]	; (8011a88 <xTaskRemoveFromEventList+0xb8>)
 8011a50:	f7fe fe4d 	bl	80106ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a58:	4b0c      	ldr	r3, [pc, #48]	; (8011a8c <xTaskRemoveFromEventList+0xbc>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d905      	bls.n	8011a6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a62:	2301      	movs	r3, #1
 8011a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a66:	4b0a      	ldr	r3, [pc, #40]	; (8011a90 <xTaskRemoveFromEventList+0xc0>)
 8011a68:	2201      	movs	r2, #1
 8011a6a:	601a      	str	r2, [r3, #0]
 8011a6c:	e001      	b.n	8011a72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a72:	697b      	ldr	r3, [r7, #20]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	20002810 	.word	0x20002810
 8011a80:	200027f0 	.word	0x200027f0
 8011a84:	200026ec 	.word	0x200026ec
 8011a88:	200027a8 	.word	0x200027a8
 8011a8c:	200026e8 	.word	0x200026e8
 8011a90:	200027fc 	.word	0x200027fc

08011a94 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b086      	sub	sp, #24
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011a9e:	4b29      	ldr	r3, [pc, #164]	; (8011b44 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10a      	bne.n	8011abc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aaa:	f383 8811 	msr	BASEPRI, r3
 8011aae:	f3bf 8f6f 	isb	sy
 8011ab2:	f3bf 8f4f 	dsb	sy
 8011ab6:	613b      	str	r3, [r7, #16]
}
 8011ab8:	bf00      	nop
 8011aba:	e7fe      	b.n	8011aba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	68db      	ldr	r3, [r3, #12]
 8011aca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d10a      	bne.n	8011ae8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad6:	f383 8811 	msr	BASEPRI, r3
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	f3bf 8f4f 	dsb	sy
 8011ae2:	60fb      	str	r3, [r7, #12]
}
 8011ae4:	bf00      	nop
 8011ae6:	e7fe      	b.n	8011ae6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7fe fe5d 	bl	80107a8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	3304      	adds	r3, #4
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fe fe58 	bl	80107a8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afc:	2201      	movs	r2, #1
 8011afe:	409a      	lsls	r2, r3
 8011b00:	4b11      	ldr	r3, [pc, #68]	; (8011b48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	4313      	orrs	r3, r2
 8011b06:	4a10      	ldr	r2, [pc, #64]	; (8011b48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011b08:	6013      	str	r3, [r2, #0]
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b0e:	4613      	mov	r3, r2
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4413      	add	r3, r2
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	4a0d      	ldr	r2, [pc, #52]	; (8011b4c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011b18:	441a      	add	r2, r3
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	3304      	adds	r3, #4
 8011b1e:	4619      	mov	r1, r3
 8011b20:	4610      	mov	r0, r2
 8011b22:	f7fe fde4 	bl	80106ee <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b2a:	4b09      	ldr	r3, [pc, #36]	; (8011b50 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d902      	bls.n	8011b3a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011b34:	4b07      	ldr	r3, [pc, #28]	; (8011b54 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011b36:	2201      	movs	r2, #1
 8011b38:	601a      	str	r2, [r3, #0]
	}
}
 8011b3a:	bf00      	nop
 8011b3c:	3718      	adds	r7, #24
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	20002810 	.word	0x20002810
 8011b48:	200027f0 	.word	0x200027f0
 8011b4c:	200026ec 	.word	0x200026ec
 8011b50:	200026e8 	.word	0x200026e8
 8011b54:	200027fc 	.word	0x200027fc

08011b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b60:	4b06      	ldr	r3, [pc, #24]	; (8011b7c <vTaskInternalSetTimeOutState+0x24>)
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b68:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <vTaskInternalSetTimeOutState+0x28>)
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	605a      	str	r2, [r3, #4]
}
 8011b70:	bf00      	nop
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	20002800 	.word	0x20002800
 8011b80:	200027ec 	.word	0x200027ec

08011b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b088      	sub	sp, #32
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10a      	bne.n	8011baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b98:	f383 8811 	msr	BASEPRI, r3
 8011b9c:	f3bf 8f6f 	isb	sy
 8011ba0:	f3bf 8f4f 	dsb	sy
 8011ba4:	613b      	str	r3, [r7, #16]
}
 8011ba6:	bf00      	nop
 8011ba8:	e7fe      	b.n	8011ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10a      	bne.n	8011bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb4:	f383 8811 	msr	BASEPRI, r3
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	60fb      	str	r3, [r7, #12]
}
 8011bc2:	bf00      	nop
 8011bc4:	e7fe      	b.n	8011bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011bc6:	f000 fea5 	bl	8012914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bca:	4b1d      	ldr	r3, [pc, #116]	; (8011c40 <xTaskCheckForTimeOut+0xbc>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011be2:	d102      	bne.n	8011bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011be4:	2300      	movs	r3, #0
 8011be6:	61fb      	str	r3, [r7, #28]
 8011be8:	e023      	b.n	8011c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	4b15      	ldr	r3, [pc, #84]	; (8011c44 <xTaskCheckForTimeOut+0xc0>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d007      	beq.n	8011c06 <xTaskCheckForTimeOut+0x82>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	69ba      	ldr	r2, [r7, #24]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d302      	bcc.n	8011c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011c00:	2301      	movs	r3, #1
 8011c02:	61fb      	str	r3, [r7, #28]
 8011c04:	e015      	b.n	8011c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d20b      	bcs.n	8011c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	1ad2      	subs	r2, r2, r3
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7ff ff9b 	bl	8011b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c22:	2300      	movs	r3, #0
 8011c24:	61fb      	str	r3, [r7, #28]
 8011c26:	e004      	b.n	8011c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c32:	f000 fe9f 	bl	8012974 <vPortExitCritical>

	return xReturn;
 8011c36:	69fb      	ldr	r3, [r7, #28]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3720      	adds	r7, #32
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	200027ec 	.word	0x200027ec
 8011c44:	20002800 	.word	0x20002800

08011c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c48:	b480      	push	{r7}
 8011c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c4c:	4b03      	ldr	r3, [pc, #12]	; (8011c5c <vTaskMissedYield+0x14>)
 8011c4e:	2201      	movs	r2, #1
 8011c50:	601a      	str	r2, [r3, #0]
}
 8011c52:	bf00      	nop
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	200027fc 	.word	0x200027fc

08011c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c68:	f000 f854 	bl	8011d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c6c:	4b07      	ldr	r3, [pc, #28]	; (8011c8c <prvIdleTask+0x2c>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d907      	bls.n	8011c84 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011c74:	4b06      	ldr	r3, [pc, #24]	; (8011c90 <prvIdleTask+0x30>)
 8011c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011c84:	f7f6 ff88 	bl	8008b98 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011c88:	e7ee      	b.n	8011c68 <prvIdleTask+0x8>
 8011c8a:	bf00      	nop
 8011c8c:	200026ec 	.word	0x200026ec
 8011c90:	e000ed04 	.word	0xe000ed04

08011c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b082      	sub	sp, #8
 8011c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	607b      	str	r3, [r7, #4]
 8011c9e:	e00c      	b.n	8011cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	4413      	add	r3, r2
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4a12      	ldr	r2, [pc, #72]	; (8011cf4 <prvInitialiseTaskLists+0x60>)
 8011cac:	4413      	add	r3, r2
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7fe fcf0 	bl	8010694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	607b      	str	r3, [r7, #4]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2b06      	cmp	r3, #6
 8011cbe:	d9ef      	bls.n	8011ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011cc0:	480d      	ldr	r0, [pc, #52]	; (8011cf8 <prvInitialiseTaskLists+0x64>)
 8011cc2:	f7fe fce7 	bl	8010694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011cc6:	480d      	ldr	r0, [pc, #52]	; (8011cfc <prvInitialiseTaskLists+0x68>)
 8011cc8:	f7fe fce4 	bl	8010694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011ccc:	480c      	ldr	r0, [pc, #48]	; (8011d00 <prvInitialiseTaskLists+0x6c>)
 8011cce:	f7fe fce1 	bl	8010694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cd2:	480c      	ldr	r0, [pc, #48]	; (8011d04 <prvInitialiseTaskLists+0x70>)
 8011cd4:	f7fe fcde 	bl	8010694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011cd8:	480b      	ldr	r0, [pc, #44]	; (8011d08 <prvInitialiseTaskLists+0x74>)
 8011cda:	f7fe fcdb 	bl	8010694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011cde:	4b0b      	ldr	r3, [pc, #44]	; (8011d0c <prvInitialiseTaskLists+0x78>)
 8011ce0:	4a05      	ldr	r2, [pc, #20]	; (8011cf8 <prvInitialiseTaskLists+0x64>)
 8011ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ce4:	4b0a      	ldr	r3, [pc, #40]	; (8011d10 <prvInitialiseTaskLists+0x7c>)
 8011ce6:	4a05      	ldr	r2, [pc, #20]	; (8011cfc <prvInitialiseTaskLists+0x68>)
 8011ce8:	601a      	str	r2, [r3, #0]
}
 8011cea:	bf00      	nop
 8011cec:	3708      	adds	r7, #8
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	200026ec 	.word	0x200026ec
 8011cf8:	20002778 	.word	0x20002778
 8011cfc:	2000278c 	.word	0x2000278c
 8011d00:	200027a8 	.word	0x200027a8
 8011d04:	200027bc 	.word	0x200027bc
 8011d08:	200027d4 	.word	0x200027d4
 8011d0c:	200027a0 	.word	0x200027a0
 8011d10:	200027a4 	.word	0x200027a4

08011d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d1a:	e019      	b.n	8011d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d1c:	f000 fdfa 	bl	8012914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d20:	4b10      	ldr	r3, [pc, #64]	; (8011d64 <prvCheckTasksWaitingTermination+0x50>)
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	3304      	adds	r3, #4
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fe fd3b 	bl	80107a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d32:	4b0d      	ldr	r3, [pc, #52]	; (8011d68 <prvCheckTasksWaitingTermination+0x54>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	3b01      	subs	r3, #1
 8011d38:	4a0b      	ldr	r2, [pc, #44]	; (8011d68 <prvCheckTasksWaitingTermination+0x54>)
 8011d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d3c:	4b0b      	ldr	r3, [pc, #44]	; (8011d6c <prvCheckTasksWaitingTermination+0x58>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	3b01      	subs	r3, #1
 8011d42:	4a0a      	ldr	r2, [pc, #40]	; (8011d6c <prvCheckTasksWaitingTermination+0x58>)
 8011d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d46:	f000 fe15 	bl	8012974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 f810 	bl	8011d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d50:	4b06      	ldr	r3, [pc, #24]	; (8011d6c <prvCheckTasksWaitingTermination+0x58>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d1e1      	bne.n	8011d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d58:	bf00      	nop
 8011d5a:	bf00      	nop
 8011d5c:	3708      	adds	r7, #8
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	200027bc 	.word	0x200027bc
 8011d68:	200027e8 	.word	0x200027e8
 8011d6c:	200027d0 	.word	0x200027d0

08011d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	3354      	adds	r3, #84	; 0x54
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f001 fddf 	bl	8013940 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d86:	4618      	mov	r0, r3
 8011d88:	f000 ffb2 	bl	8012cf0 <vPortFree>
			vPortFree( pxTCB );
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 ffaf 	bl	8012cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d92:	bf00      	nop
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
	...

08011d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011da2:	4b0c      	ldr	r3, [pc, #48]	; (8011dd4 <prvResetNextTaskUnblockTime+0x38>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d104      	bne.n	8011db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011dac:	4b0a      	ldr	r3, [pc, #40]	; (8011dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8011dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011db4:	e008      	b.n	8011dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011db6:	4b07      	ldr	r3, [pc, #28]	; (8011dd4 <prvResetNextTaskUnblockTime+0x38>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	4a04      	ldr	r2, [pc, #16]	; (8011dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8011dc6:	6013      	str	r3, [r2, #0]
}
 8011dc8:	bf00      	nop
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr
 8011dd4:	200027a0 	.word	0x200027a0
 8011dd8:	20002808 	.word	0x20002808

08011ddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011de2:	4b0b      	ldr	r3, [pc, #44]	; (8011e10 <xTaskGetSchedulerState+0x34>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d102      	bne.n	8011df0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011dea:	2301      	movs	r3, #1
 8011dec:	607b      	str	r3, [r7, #4]
 8011dee:	e008      	b.n	8011e02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011df0:	4b08      	ldr	r3, [pc, #32]	; (8011e14 <xTaskGetSchedulerState+0x38>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d102      	bne.n	8011dfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011df8:	2302      	movs	r3, #2
 8011dfa:	607b      	str	r3, [r7, #4]
 8011dfc:	e001      	b.n	8011e02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e02:	687b      	ldr	r3, [r7, #4]
	}
 8011e04:	4618      	mov	r0, r3
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr
 8011e10:	200027f4 	.word	0x200027f4
 8011e14:	20002810 	.word	0x20002810

08011e18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011e24:	2300      	movs	r3, #0
 8011e26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d06e      	beq.n	8011f0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011e2e:	4b3a      	ldr	r3, [pc, #232]	; (8011f18 <xTaskPriorityDisinherit+0x100>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	693a      	ldr	r2, [r7, #16]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d00a      	beq.n	8011e4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3c:	f383 8811 	msr	BASEPRI, r3
 8011e40:	f3bf 8f6f 	isb	sy
 8011e44:	f3bf 8f4f 	dsb	sy
 8011e48:	60fb      	str	r3, [r7, #12]
}
 8011e4a:	bf00      	nop
 8011e4c:	e7fe      	b.n	8011e4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10a      	bne.n	8011e6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	60bb      	str	r3, [r7, #8]
}
 8011e68:	bf00      	nop
 8011e6a:	e7fe      	b.n	8011e6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e70:	1e5a      	subs	r2, r3, #1
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d044      	beq.n	8011f0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d140      	bne.n	8011f0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fe fc8a 	bl	80107a8 <uxListRemove>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d115      	bne.n	8011ec6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e9e:	491f      	ldr	r1, [pc, #124]	; (8011f1c <xTaskPriorityDisinherit+0x104>)
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	4413      	add	r3, r2
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	440b      	add	r3, r1
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d10a      	bne.n	8011ec6 <xTaskPriorityDisinherit+0xae>
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8011eba:	43da      	mvns	r2, r3
 8011ebc:	4b18      	ldr	r3, [pc, #96]	; (8011f20 <xTaskPriorityDisinherit+0x108>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4013      	ands	r3, r2
 8011ec2:	4a17      	ldr	r2, [pc, #92]	; (8011f20 <xTaskPriorityDisinherit+0x108>)
 8011ec4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed2:	f1c3 0207 	rsb	r2, r3, #7
 8011ed6:	693b      	ldr	r3, [r7, #16]
 8011ed8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ede:	2201      	movs	r2, #1
 8011ee0:	409a      	lsls	r2, r3
 8011ee2:	4b0f      	ldr	r3, [pc, #60]	; (8011f20 <xTaskPriorityDisinherit+0x108>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	4a0d      	ldr	r2, [pc, #52]	; (8011f20 <xTaskPriorityDisinherit+0x108>)
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	4413      	add	r3, r2
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	4a08      	ldr	r2, [pc, #32]	; (8011f1c <xTaskPriorityDisinherit+0x104>)
 8011efa:	441a      	add	r2, r3
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	3304      	adds	r3, #4
 8011f00:	4619      	mov	r1, r3
 8011f02:	4610      	mov	r0, r2
 8011f04:	f7fe fbf3 	bl	80106ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f0c:	697b      	ldr	r3, [r7, #20]
	}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3718      	adds	r7, #24
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	200026e8 	.word	0x200026e8
 8011f1c:	200026ec 	.word	0x200026ec
 8011f20:	200027f0 	.word	0x200027f0

08011f24 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011f2a:	4b09      	ldr	r3, [pc, #36]	; (8011f50 <uxTaskResetEventItemValue+0x2c>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	699b      	ldr	r3, [r3, #24]
 8011f30:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f32:	4b07      	ldr	r3, [pc, #28]	; (8011f50 <uxTaskResetEventItemValue+0x2c>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f38:	4b05      	ldr	r3, [pc, #20]	; (8011f50 <uxTaskResetEventItemValue+0x2c>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f1c2 0207 	rsb	r2, r2, #7
 8011f40:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011f42:	687b      	ldr	r3, [r7, #4]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	200026e8 	.word	0x200026e8

08011f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f5e:	4b29      	ldr	r3, [pc, #164]	; (8012004 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f64:	4b28      	ldr	r3, [pc, #160]	; (8012008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fe fc1c 	bl	80107a8 <uxListRemove>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d10b      	bne.n	8011f8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011f76:	4b24      	ldr	r3, [pc, #144]	; (8012008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f7c:	2201      	movs	r2, #1
 8011f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f82:	43da      	mvns	r2, r3
 8011f84:	4b21      	ldr	r3, [pc, #132]	; (801200c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4013      	ands	r3, r2
 8011f8a:	4a20      	ldr	r2, [pc, #128]	; (801200c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011f8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f94:	d10a      	bne.n	8011fac <prvAddCurrentTaskToDelayedList+0x58>
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d007      	beq.n	8011fac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f9c:	4b1a      	ldr	r3, [pc, #104]	; (8012008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	3304      	adds	r3, #4
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	481a      	ldr	r0, [pc, #104]	; (8012010 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011fa6:	f7fe fba2 	bl	80106ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011faa:	e026      	b.n	8011ffa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011fac:	68fa      	ldr	r2, [r7, #12]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011fb4:	4b14      	ldr	r3, [pc, #80]	; (8012008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d209      	bcs.n	8011fd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fc4:	4b13      	ldr	r3, [pc, #76]	; (8012014 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	4b0f      	ldr	r3, [pc, #60]	; (8012008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	3304      	adds	r3, #4
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4610      	mov	r0, r2
 8011fd2:	f7fe fbb0 	bl	8010736 <vListInsert>
}
 8011fd6:	e010      	b.n	8011ffa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fd8:	4b0f      	ldr	r3, [pc, #60]	; (8012018 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	4b0a      	ldr	r3, [pc, #40]	; (8012008 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	3304      	adds	r3, #4
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	4610      	mov	r0, r2
 8011fe6:	f7fe fba6 	bl	8010736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fea:	4b0c      	ldr	r3, [pc, #48]	; (801201c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d202      	bcs.n	8011ffa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011ff4:	4a09      	ldr	r2, [pc, #36]	; (801201c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	6013      	str	r3, [r2, #0]
}
 8011ffa:	bf00      	nop
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	200027ec 	.word	0x200027ec
 8012008:	200026e8 	.word	0x200026e8
 801200c:	200027f0 	.word	0x200027f0
 8012010:	200027d4 	.word	0x200027d4
 8012014:	200027a4 	.word	0x200027a4
 8012018:	200027a0 	.word	0x200027a0
 801201c:	20002808 	.word	0x20002808

08012020 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8012026:	2300      	movs	r3, #0
 8012028:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801202a:	f000 faf1 	bl	8012610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801202e:	4b11      	ldr	r3, [pc, #68]	; (8012074 <xTimerCreateTimerTask+0x54>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d00b      	beq.n	801204e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8012036:	4b10      	ldr	r3, [pc, #64]	; (8012078 <xTimerCreateTimerTask+0x58>)
 8012038:	9301      	str	r3, [sp, #4]
 801203a:	2302      	movs	r3, #2
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	2300      	movs	r3, #0
 8012040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012044:	490d      	ldr	r1, [pc, #52]	; (801207c <xTimerCreateTimerTask+0x5c>)
 8012046:	480e      	ldr	r0, [pc, #56]	; (8012080 <xTimerCreateTimerTask+0x60>)
 8012048:	f7ff f882 	bl	8011150 <xTaskCreate>
 801204c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d10a      	bne.n	801206a <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8012054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012058:	f383 8811 	msr	BASEPRI, r3
 801205c:	f3bf 8f6f 	isb	sy
 8012060:	f3bf 8f4f 	dsb	sy
 8012064:	603b      	str	r3, [r7, #0]
}
 8012066:	bf00      	nop
 8012068:	e7fe      	b.n	8012068 <xTimerCreateTimerTask+0x48>
	return xReturn;
 801206a:	687b      	ldr	r3, [r7, #4]
}
 801206c:	4618      	mov	r0, r3
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}
 8012074:	20002844 	.word	0x20002844
 8012078:	20002848 	.word	0x20002848
 801207c:	08014d14 	.word	0x08014d14
 8012080:	080121b9 	.word	0x080121b9

08012084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b08a      	sub	sp, #40	; 0x28
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012092:	2300      	movs	r3, #0
 8012094:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10a      	bne.n	80120b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a0:	f383 8811 	msr	BASEPRI, r3
 80120a4:	f3bf 8f6f 	isb	sy
 80120a8:	f3bf 8f4f 	dsb	sy
 80120ac:	623b      	str	r3, [r7, #32]
}
 80120ae:	bf00      	nop
 80120b0:	e7fe      	b.n	80120b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80120b2:	4b1a      	ldr	r3, [pc, #104]	; (801211c <xTimerGenericCommand+0x98>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d02a      	beq.n	8012110 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	2b05      	cmp	r3, #5
 80120ca:	dc18      	bgt.n	80120fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80120cc:	f7ff fe86 	bl	8011ddc <xTaskGetSchedulerState>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b02      	cmp	r3, #2
 80120d4:	d109      	bne.n	80120ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80120d6:	4b11      	ldr	r3, [pc, #68]	; (801211c <xTimerGenericCommand+0x98>)
 80120d8:	6818      	ldr	r0, [r3, #0]
 80120da:	f107 0110 	add.w	r1, r7, #16
 80120de:	2300      	movs	r3, #0
 80120e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120e2:	f7fe fc4d 	bl	8010980 <xQueueGenericSend>
 80120e6:	6278      	str	r0, [r7, #36]	; 0x24
 80120e8:	e012      	b.n	8012110 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80120ea:	4b0c      	ldr	r3, [pc, #48]	; (801211c <xTimerGenericCommand+0x98>)
 80120ec:	6818      	ldr	r0, [r3, #0]
 80120ee:	f107 0110 	add.w	r1, r7, #16
 80120f2:	2300      	movs	r3, #0
 80120f4:	2200      	movs	r2, #0
 80120f6:	f7fe fc43 	bl	8010980 <xQueueGenericSend>
 80120fa:	6278      	str	r0, [r7, #36]	; 0x24
 80120fc:	e008      	b.n	8012110 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80120fe:	4b07      	ldr	r3, [pc, #28]	; (801211c <xTimerGenericCommand+0x98>)
 8012100:	6818      	ldr	r0, [r3, #0]
 8012102:	f107 0110 	add.w	r1, r7, #16
 8012106:	2300      	movs	r3, #0
 8012108:	683a      	ldr	r2, [r7, #0]
 801210a:	f7fe fd37 	bl	8010b7c <xQueueGenericSendFromISR>
 801210e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012112:	4618      	mov	r0, r3
 8012114:	3728      	adds	r7, #40	; 0x28
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	20002844 	.word	0x20002844

08012120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b088      	sub	sp, #32
 8012124:	af02      	add	r7, sp, #8
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801212a:	4b22      	ldr	r3, [pc, #136]	; (80121b4 <prvProcessExpiredTimer+0x94>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	3304      	adds	r3, #4
 8012138:	4618      	mov	r0, r3
 801213a:	f7fe fb35 	bl	80107a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012144:	f003 0304 	and.w	r3, r3, #4
 8012148:	2b00      	cmp	r3, #0
 801214a:	d022      	beq.n	8012192 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	699a      	ldr	r2, [r3, #24]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	18d1      	adds	r1, r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	683a      	ldr	r2, [r7, #0]
 8012158:	6978      	ldr	r0, [r7, #20]
 801215a:	f000 f8d1 	bl	8012300 <prvInsertTimerInActiveList>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d01f      	beq.n	80121a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012164:	2300      	movs	r3, #0
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	2300      	movs	r3, #0
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	2100      	movs	r1, #0
 801216e:	6978      	ldr	r0, [r7, #20]
 8012170:	f7ff ff88 	bl	8012084 <xTimerGenericCommand>
 8012174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d113      	bne.n	80121a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	60fb      	str	r3, [r7, #12]
}
 801218e:	bf00      	nop
 8012190:	e7fe      	b.n	8012190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012198:	f023 0301 	bic.w	r3, r3, #1
 801219c:	b2da      	uxtb	r2, r3
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	6a1b      	ldr	r3, [r3, #32]
 80121a8:	6978      	ldr	r0, [r7, #20]
 80121aa:	4798      	blx	r3
}
 80121ac:	bf00      	nop
 80121ae:	3718      	adds	r7, #24
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}
 80121b4:	2000283c 	.word	0x2000283c

080121b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121c0:	f107 0308 	add.w	r3, r7, #8
 80121c4:	4618      	mov	r0, r3
 80121c6:	f000 f857 	bl	8012278 <prvGetNextExpireTime>
 80121ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	4619      	mov	r1, r3
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f000 f803 	bl	80121dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80121d6:	f000 f8d5 	bl	8012384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121da:	e7f1      	b.n	80121c0 <prvTimerTask+0x8>

080121dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80121e6:	f7ff f993 	bl	8011510 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80121ea:	f107 0308 	add.w	r3, r7, #8
 80121ee:	4618      	mov	r0, r3
 80121f0:	f000 f866 	bl	80122c0 <prvSampleTimeNow>
 80121f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d130      	bne.n	801225e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d10a      	bne.n	8012218 <prvProcessTimerOrBlockTask+0x3c>
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	429a      	cmp	r2, r3
 8012208:	d806      	bhi.n	8012218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801220a:	f7ff f98f 	bl	801152c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801220e:	68f9      	ldr	r1, [r7, #12]
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff ff85 	bl	8012120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012216:	e024      	b.n	8012262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d008      	beq.n	8012230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801221e:	4b13      	ldr	r3, [pc, #76]	; (801226c <prvProcessTimerOrBlockTask+0x90>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d101      	bne.n	801222c <prvProcessTimerOrBlockTask+0x50>
 8012228:	2301      	movs	r3, #1
 801222a:	e000      	b.n	801222e <prvProcessTimerOrBlockTask+0x52>
 801222c:	2300      	movs	r3, #0
 801222e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012230:	4b0f      	ldr	r3, [pc, #60]	; (8012270 <prvProcessTimerOrBlockTask+0x94>)
 8012232:	6818      	ldr	r0, [r3, #0]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	1ad3      	subs	r3, r2, r3
 801223a:	683a      	ldr	r2, [r7, #0]
 801223c:	4619      	mov	r1, r3
 801223e:	f7fe ff53 	bl	80110e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012242:	f7ff f973 	bl	801152c <xTaskResumeAll>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d10a      	bne.n	8012262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801224c:	4b09      	ldr	r3, [pc, #36]	; (8012274 <prvProcessTimerOrBlockTask+0x98>)
 801224e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	f3bf 8f4f 	dsb	sy
 8012258:	f3bf 8f6f 	isb	sy
}
 801225c:	e001      	b.n	8012262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801225e:	f7ff f965 	bl	801152c <xTaskResumeAll>
}
 8012262:	bf00      	nop
 8012264:	3710      	adds	r7, #16
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	20002840 	.word	0x20002840
 8012270:	20002844 	.word	0x20002844
 8012274:	e000ed04 	.word	0xe000ed04

08012278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012278:	b480      	push	{r7}
 801227a:	b085      	sub	sp, #20
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012280:	4b0e      	ldr	r3, [pc, #56]	; (80122bc <prvGetNextExpireTime+0x44>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d101      	bne.n	801228e <prvGetNextExpireTime+0x16>
 801228a:	2201      	movs	r2, #1
 801228c:	e000      	b.n	8012290 <prvGetNextExpireTime+0x18>
 801228e:	2200      	movs	r2, #0
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d105      	bne.n	80122a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801229c:	4b07      	ldr	r3, [pc, #28]	; (80122bc <prvGetNextExpireTime+0x44>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	68db      	ldr	r3, [r3, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	60fb      	str	r3, [r7, #12]
 80122a6:	e001      	b.n	80122ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80122a8:	2300      	movs	r3, #0
 80122aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80122ac:	68fb      	ldr	r3, [r7, #12]
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3714      	adds	r7, #20
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop
 80122bc:	2000283c 	.word	0x2000283c

080122c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80122c8:	f7ff f9cc 	bl	8011664 <xTaskGetTickCount>
 80122cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80122ce:	4b0b      	ldr	r3, [pc, #44]	; (80122fc <prvSampleTimeNow+0x3c>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	68fa      	ldr	r2, [r7, #12]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d205      	bcs.n	80122e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80122d8:	f000 f936 	bl	8012548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2201      	movs	r2, #1
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	e002      	b.n	80122ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2200      	movs	r2, #0
 80122e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80122ea:	4a04      	ldr	r2, [pc, #16]	; (80122fc <prvSampleTimeNow+0x3c>)
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80122f0:	68fb      	ldr	r3, [r7, #12]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	2000284c 	.word	0x2000284c

08012300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b086      	sub	sp, #24
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
 801230c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801230e:	2300      	movs	r3, #0
 8012310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	68ba      	ldr	r2, [r7, #8]
 8012316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801231e:	68ba      	ldr	r2, [r7, #8]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	429a      	cmp	r2, r3
 8012324:	d812      	bhi.n	801234c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	1ad2      	subs	r2, r2, r3
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	699b      	ldr	r3, [r3, #24]
 8012330:	429a      	cmp	r2, r3
 8012332:	d302      	bcc.n	801233a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012334:	2301      	movs	r3, #1
 8012336:	617b      	str	r3, [r7, #20]
 8012338:	e01b      	b.n	8012372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801233a:	4b10      	ldr	r3, [pc, #64]	; (801237c <prvInsertTimerInActiveList+0x7c>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	3304      	adds	r3, #4
 8012342:	4619      	mov	r1, r3
 8012344:	4610      	mov	r0, r2
 8012346:	f7fe f9f6 	bl	8010736 <vListInsert>
 801234a:	e012      	b.n	8012372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	429a      	cmp	r2, r3
 8012352:	d206      	bcs.n	8012362 <prvInsertTimerInActiveList+0x62>
 8012354:	68ba      	ldr	r2, [r7, #8]
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	429a      	cmp	r2, r3
 801235a:	d302      	bcc.n	8012362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801235c:	2301      	movs	r3, #1
 801235e:	617b      	str	r3, [r7, #20]
 8012360:	e007      	b.n	8012372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012362:	4b07      	ldr	r3, [pc, #28]	; (8012380 <prvInsertTimerInActiveList+0x80>)
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	3304      	adds	r3, #4
 801236a:	4619      	mov	r1, r3
 801236c:	4610      	mov	r0, r2
 801236e:	f7fe f9e2 	bl	8010736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012372:	697b      	ldr	r3, [r7, #20]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3718      	adds	r7, #24
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}
 801237c:	20002840 	.word	0x20002840
 8012380:	2000283c 	.word	0x2000283c

08012384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b08e      	sub	sp, #56	; 0x38
 8012388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801238a:	e0ca      	b.n	8012522 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	da18      	bge.n	80123c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012392:	1d3b      	adds	r3, r7, #4
 8012394:	3304      	adds	r3, #4
 8012396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10a      	bne.n	80123b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	61fb      	str	r3, [r7, #28]
}
 80123b0:	bf00      	nop
 80123b2:	e7fe      	b.n	80123b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80123b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123ba:	6850      	ldr	r0, [r2, #4]
 80123bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123be:	6892      	ldr	r2, [r2, #8]
 80123c0:	4611      	mov	r1, r2
 80123c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f2c0 80aa 	blt.w	8012520 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80123d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d2:	695b      	ldr	r3, [r3, #20]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d004      	beq.n	80123e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123da:	3304      	adds	r3, #4
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fe f9e3 	bl	80107a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123e2:	463b      	mov	r3, r7
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7ff ff6b 	bl	80122c0 <prvSampleTimeNow>
 80123ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b09      	cmp	r3, #9
 80123f0:	f200 8097 	bhi.w	8012522 <prvProcessReceivedCommands+0x19e>
 80123f4:	a201      	add	r2, pc, #4	; (adr r2, 80123fc <prvProcessReceivedCommands+0x78>)
 80123f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123fa:	bf00      	nop
 80123fc:	08012425 	.word	0x08012425
 8012400:	08012425 	.word	0x08012425
 8012404:	08012425 	.word	0x08012425
 8012408:	08012499 	.word	0x08012499
 801240c:	080124ad 	.word	0x080124ad
 8012410:	080124f7 	.word	0x080124f7
 8012414:	08012425 	.word	0x08012425
 8012418:	08012425 	.word	0x08012425
 801241c:	08012499 	.word	0x08012499
 8012420:	080124ad 	.word	0x080124ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801242a:	f043 0301 	orr.w	r3, r3, #1
 801242e:	b2da      	uxtb	r2, r3
 8012430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243a:	699b      	ldr	r3, [r3, #24]
 801243c:	18d1      	adds	r1, r2, r3
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012444:	f7ff ff5c 	bl	8012300 <prvInsertTimerInActiveList>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d069      	beq.n	8012522 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012450:	6a1b      	ldr	r3, [r3, #32]
 8012452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801245c:	f003 0304 	and.w	r3, r3, #4
 8012460:	2b00      	cmp	r3, #0
 8012462:	d05e      	beq.n	8012522 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012464:	68ba      	ldr	r2, [r7, #8]
 8012466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012468:	699b      	ldr	r3, [r3, #24]
 801246a:	441a      	add	r2, r3
 801246c:	2300      	movs	r3, #0
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	2300      	movs	r3, #0
 8012472:	2100      	movs	r1, #0
 8012474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012476:	f7ff fe05 	bl	8012084 <xTimerGenericCommand>
 801247a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801247c:	6a3b      	ldr	r3, [r7, #32]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d14f      	bne.n	8012522 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012486:	f383 8811 	msr	BASEPRI, r3
 801248a:	f3bf 8f6f 	isb	sy
 801248e:	f3bf 8f4f 	dsb	sy
 8012492:	61bb      	str	r3, [r7, #24]
}
 8012494:	bf00      	nop
 8012496:	e7fe      	b.n	8012496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801249e:	f023 0301 	bic.w	r3, r3, #1
 80124a2:	b2da      	uxtb	r2, r3
 80124a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80124aa:	e03a      	b.n	8012522 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b2:	f043 0301 	orr.w	r3, r3, #1
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80124c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d10a      	bne.n	80124e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80124cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d0:	f383 8811 	msr	BASEPRI, r3
 80124d4:	f3bf 8f6f 	isb	sy
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	617b      	str	r3, [r7, #20]
}
 80124de:	bf00      	nop
 80124e0:	e7fe      	b.n	80124e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80124e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e4:	699a      	ldr	r2, [r3, #24]
 80124e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e8:	18d1      	adds	r1, r2, r3
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124f0:	f7ff ff06 	bl	8012300 <prvInsertTimerInActiveList>
					break;
 80124f4:	e015      	b.n	8012522 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124fc:	f003 0302 	and.w	r3, r3, #2
 8012500:	2b00      	cmp	r3, #0
 8012502:	d103      	bne.n	801250c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012506:	f000 fbf3 	bl	8012cf0 <vPortFree>
 801250a:	e00a      	b.n	8012522 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012512:	f023 0301 	bic.w	r3, r3, #1
 8012516:	b2da      	uxtb	r2, r3
 8012518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801251e:	e000      	b.n	8012522 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012520:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012522:	4b08      	ldr	r3, [pc, #32]	; (8012544 <prvProcessReceivedCommands+0x1c0>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	1d39      	adds	r1, r7, #4
 8012528:	2200      	movs	r2, #0
 801252a:	4618      	mov	r0, r3
 801252c:	f7fe fbc2 	bl	8010cb4 <xQueueReceive>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	f47f af2a 	bne.w	801238c <prvProcessReceivedCommands+0x8>
	}
}
 8012538:	bf00      	nop
 801253a:	bf00      	nop
 801253c:	3730      	adds	r7, #48	; 0x30
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20002844 	.word	0x20002844

08012548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b088      	sub	sp, #32
 801254c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801254e:	e048      	b.n	80125e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012550:	4b2d      	ldr	r3, [pc, #180]	; (8012608 <prvSwitchTimerLists+0xc0>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801255a:	4b2b      	ldr	r3, [pc, #172]	; (8012608 <prvSwitchTimerLists+0xc0>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	68db      	ldr	r3, [r3, #12]
 8012562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	3304      	adds	r3, #4
 8012568:	4618      	mov	r0, r3
 801256a:	f7fe f91d 	bl	80107a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6a1b      	ldr	r3, [r3, #32]
 8012572:	68f8      	ldr	r0, [r7, #12]
 8012574:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801257c:	f003 0304 	and.w	r3, r3, #4
 8012580:	2b00      	cmp	r3, #0
 8012582:	d02e      	beq.n	80125e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	699b      	ldr	r3, [r3, #24]
 8012588:	693a      	ldr	r2, [r7, #16]
 801258a:	4413      	add	r3, r2
 801258c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801258e:	68ba      	ldr	r2, [r7, #8]
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	429a      	cmp	r2, r3
 8012594:	d90e      	bls.n	80125b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125a2:	4b19      	ldr	r3, [pc, #100]	; (8012608 <prvSwitchTimerLists+0xc0>)
 80125a4:	681a      	ldr	r2, [r3, #0]
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	3304      	adds	r3, #4
 80125aa:	4619      	mov	r1, r3
 80125ac:	4610      	mov	r0, r2
 80125ae:	f7fe f8c2 	bl	8010736 <vListInsert>
 80125b2:	e016      	b.n	80125e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80125b4:	2300      	movs	r3, #0
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	2300      	movs	r3, #0
 80125ba:	693a      	ldr	r2, [r7, #16]
 80125bc:	2100      	movs	r1, #0
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f7ff fd60 	bl	8012084 <xTimerGenericCommand>
 80125c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d10a      	bne.n	80125e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80125cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d0:	f383 8811 	msr	BASEPRI, r3
 80125d4:	f3bf 8f6f 	isb	sy
 80125d8:	f3bf 8f4f 	dsb	sy
 80125dc:	603b      	str	r3, [r7, #0]
}
 80125de:	bf00      	nop
 80125e0:	e7fe      	b.n	80125e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125e2:	4b09      	ldr	r3, [pc, #36]	; (8012608 <prvSwitchTimerLists+0xc0>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1b1      	bne.n	8012550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80125ec:	4b06      	ldr	r3, [pc, #24]	; (8012608 <prvSwitchTimerLists+0xc0>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80125f2:	4b06      	ldr	r3, [pc, #24]	; (801260c <prvSwitchTimerLists+0xc4>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	4a04      	ldr	r2, [pc, #16]	; (8012608 <prvSwitchTimerLists+0xc0>)
 80125f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125fa:	4a04      	ldr	r2, [pc, #16]	; (801260c <prvSwitchTimerLists+0xc4>)
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	6013      	str	r3, [r2, #0]
}
 8012600:	bf00      	nop
 8012602:	3718      	adds	r7, #24
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	2000283c 	.word	0x2000283c
 801260c:	20002840 	.word	0x20002840

08012610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012610:	b580      	push	{r7, lr}
 8012612:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012614:	f000 f97e 	bl	8012914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012618:	4b12      	ldr	r3, [pc, #72]	; (8012664 <prvCheckForValidListAndQueue+0x54>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d11d      	bne.n	801265c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8012620:	4811      	ldr	r0, [pc, #68]	; (8012668 <prvCheckForValidListAndQueue+0x58>)
 8012622:	f7fe f837 	bl	8010694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012626:	4811      	ldr	r0, [pc, #68]	; (801266c <prvCheckForValidListAndQueue+0x5c>)
 8012628:	f7fe f834 	bl	8010694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801262c:	4b10      	ldr	r3, [pc, #64]	; (8012670 <prvCheckForValidListAndQueue+0x60>)
 801262e:	4a0e      	ldr	r2, [pc, #56]	; (8012668 <prvCheckForValidListAndQueue+0x58>)
 8012630:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012632:	4b10      	ldr	r3, [pc, #64]	; (8012674 <prvCheckForValidListAndQueue+0x64>)
 8012634:	4a0d      	ldr	r2, [pc, #52]	; (801266c <prvCheckForValidListAndQueue+0x5c>)
 8012636:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8012638:	2200      	movs	r2, #0
 801263a:	2110      	movs	r1, #16
 801263c:	200a      	movs	r0, #10
 801263e:	f7fe f945 	bl	80108cc <xQueueGenericCreate>
 8012642:	4603      	mov	r3, r0
 8012644:	4a07      	ldr	r2, [pc, #28]	; (8012664 <prvCheckForValidListAndQueue+0x54>)
 8012646:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012648:	4b06      	ldr	r3, [pc, #24]	; (8012664 <prvCheckForValidListAndQueue+0x54>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d005      	beq.n	801265c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012650:	4b04      	ldr	r3, [pc, #16]	; (8012664 <prvCheckForValidListAndQueue+0x54>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4908      	ldr	r1, [pc, #32]	; (8012678 <prvCheckForValidListAndQueue+0x68>)
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe fd1c 	bl	8011094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801265c:	f000 f98a 	bl	8012974 <vPortExitCritical>
}
 8012660:	bf00      	nop
 8012662:	bd80      	pop	{r7, pc}
 8012664:	20002844 	.word	0x20002844
 8012668:	20002814 	.word	0x20002814
 801266c:	20002828 	.word	0x20002828
 8012670:	2000283c 	.word	0x2000283c
 8012674:	20002840 	.word	0x20002840
 8012678:	08014d1c 	.word	0x08014d1c

0801267c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801267c:	b580      	push	{r7, lr}
 801267e:	b08a      	sub	sp, #40	; 0x28
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]
 8012688:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801268a:	f06f 0301 	mvn.w	r3, #1
 801268e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801269c:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <xTimerPendFunctionCallFromISR+0x3c>)
 801269e:	6818      	ldr	r0, [r3, #0]
 80126a0:	f107 0114 	add.w	r1, r7, #20
 80126a4:	2300      	movs	r3, #0
 80126a6:	683a      	ldr	r2, [r7, #0]
 80126a8:	f7fe fa68 	bl	8010b7c <xQueueGenericSendFromISR>
 80126ac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80126ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3728      	adds	r7, #40	; 0x28
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20002844 	.word	0x20002844

080126bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	3b04      	subs	r3, #4
 80126cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80126d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	3b04      	subs	r3, #4
 80126da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	f023 0201 	bic.w	r2, r3, #1
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	3b04      	subs	r3, #4
 80126ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80126ec:	4a0c      	ldr	r2, [pc, #48]	; (8012720 <pxPortInitialiseStack+0x64>)
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	3b14      	subs	r3, #20
 80126f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	3b04      	subs	r3, #4
 8012702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f06f 0202 	mvn.w	r2, #2
 801270a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	3b20      	subs	r3, #32
 8012710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012712:	68fb      	ldr	r3, [r7, #12]
}
 8012714:	4618      	mov	r0, r3
 8012716:	3714      	adds	r7, #20
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr
 8012720:	08012725 	.word	0x08012725

08012724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012724:	b480      	push	{r7}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801272a:	2300      	movs	r3, #0
 801272c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801272e:	4b12      	ldr	r3, [pc, #72]	; (8012778 <prvTaskExitError+0x54>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012736:	d00a      	beq.n	801274e <prvTaskExitError+0x2a>
	__asm volatile
 8012738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273c:	f383 8811 	msr	BASEPRI, r3
 8012740:	f3bf 8f6f 	isb	sy
 8012744:	f3bf 8f4f 	dsb	sy
 8012748:	60fb      	str	r3, [r7, #12]
}
 801274a:	bf00      	nop
 801274c:	e7fe      	b.n	801274c <prvTaskExitError+0x28>
	__asm volatile
 801274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012752:	f383 8811 	msr	BASEPRI, r3
 8012756:	f3bf 8f6f 	isb	sy
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	60bb      	str	r3, [r7, #8]
}
 8012760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012762:	bf00      	nop
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d0fc      	beq.n	8012764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801276a:	bf00      	nop
 801276c:	bf00      	nop
 801276e:	3714      	adds	r7, #20
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr
 8012778:	20000b1c 	.word	0x20000b1c
 801277c:	00000000 	.word	0x00000000

08012780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012780:	4b07      	ldr	r3, [pc, #28]	; (80127a0 <pxCurrentTCBConst2>)
 8012782:	6819      	ldr	r1, [r3, #0]
 8012784:	6808      	ldr	r0, [r1, #0]
 8012786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278a:	f380 8809 	msr	PSP, r0
 801278e:	f3bf 8f6f 	isb	sy
 8012792:	f04f 0000 	mov.w	r0, #0
 8012796:	f380 8811 	msr	BASEPRI, r0
 801279a:	4770      	bx	lr
 801279c:	f3af 8000 	nop.w

080127a0 <pxCurrentTCBConst2>:
 80127a0:	200026e8 	.word	0x200026e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80127a4:	bf00      	nop
 80127a6:	bf00      	nop

080127a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80127a8:	4808      	ldr	r0, [pc, #32]	; (80127cc <prvPortStartFirstTask+0x24>)
 80127aa:	6800      	ldr	r0, [r0, #0]
 80127ac:	6800      	ldr	r0, [r0, #0]
 80127ae:	f380 8808 	msr	MSP, r0
 80127b2:	f04f 0000 	mov.w	r0, #0
 80127b6:	f380 8814 	msr	CONTROL, r0
 80127ba:	b662      	cpsie	i
 80127bc:	b661      	cpsie	f
 80127be:	f3bf 8f4f 	dsb	sy
 80127c2:	f3bf 8f6f 	isb	sy
 80127c6:	df00      	svc	0
 80127c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80127ca:	bf00      	nop
 80127cc:	e000ed08 	.word	0xe000ed08

080127d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80127d6:	4b46      	ldr	r3, [pc, #280]	; (80128f0 <xPortStartScheduler+0x120>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4a46      	ldr	r2, [pc, #280]	; (80128f4 <xPortStartScheduler+0x124>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d10a      	bne.n	80127f6 <xPortStartScheduler+0x26>
	__asm volatile
 80127e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e4:	f383 8811 	msr	BASEPRI, r3
 80127e8:	f3bf 8f6f 	isb	sy
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	613b      	str	r3, [r7, #16]
}
 80127f2:	bf00      	nop
 80127f4:	e7fe      	b.n	80127f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80127f6:	4b3e      	ldr	r3, [pc, #248]	; (80128f0 <xPortStartScheduler+0x120>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4a3f      	ldr	r2, [pc, #252]	; (80128f8 <xPortStartScheduler+0x128>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d10a      	bne.n	8012816 <xPortStartScheduler+0x46>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	60fb      	str	r3, [r7, #12]
}
 8012812:	bf00      	nop
 8012814:	e7fe      	b.n	8012814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012816:	4b39      	ldr	r3, [pc, #228]	; (80128fc <xPortStartScheduler+0x12c>)
 8012818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	b2db      	uxtb	r3, r3
 8012820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	22ff      	movs	r2, #255	; 0xff
 8012826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	b2db      	uxtb	r3, r3
 801282e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012830:	78fb      	ldrb	r3, [r7, #3]
 8012832:	b2db      	uxtb	r3, r3
 8012834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012838:	b2da      	uxtb	r2, r3
 801283a:	4b31      	ldr	r3, [pc, #196]	; (8012900 <xPortStartScheduler+0x130>)
 801283c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801283e:	4b31      	ldr	r3, [pc, #196]	; (8012904 <xPortStartScheduler+0x134>)
 8012840:	2207      	movs	r2, #7
 8012842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012844:	e009      	b.n	801285a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012846:	4b2f      	ldr	r3, [pc, #188]	; (8012904 <xPortStartScheduler+0x134>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	3b01      	subs	r3, #1
 801284c:	4a2d      	ldr	r2, [pc, #180]	; (8012904 <xPortStartScheduler+0x134>)
 801284e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012850:	78fb      	ldrb	r3, [r7, #3]
 8012852:	b2db      	uxtb	r3, r3
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	b2db      	uxtb	r3, r3
 8012858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801285a:	78fb      	ldrb	r3, [r7, #3]
 801285c:	b2db      	uxtb	r3, r3
 801285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012862:	2b80      	cmp	r3, #128	; 0x80
 8012864:	d0ef      	beq.n	8012846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012866:	4b27      	ldr	r3, [pc, #156]	; (8012904 <xPortStartScheduler+0x134>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f1c3 0307 	rsb	r3, r3, #7
 801286e:	2b04      	cmp	r3, #4
 8012870:	d00a      	beq.n	8012888 <xPortStartScheduler+0xb8>
	__asm volatile
 8012872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	60bb      	str	r3, [r7, #8]
}
 8012884:	bf00      	nop
 8012886:	e7fe      	b.n	8012886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012888:	4b1e      	ldr	r3, [pc, #120]	; (8012904 <xPortStartScheduler+0x134>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	021b      	lsls	r3, r3, #8
 801288e:	4a1d      	ldr	r2, [pc, #116]	; (8012904 <xPortStartScheduler+0x134>)
 8012890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012892:	4b1c      	ldr	r3, [pc, #112]	; (8012904 <xPortStartScheduler+0x134>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801289a:	4a1a      	ldr	r2, [pc, #104]	; (8012904 <xPortStartScheduler+0x134>)
 801289c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80128a6:	4b18      	ldr	r3, [pc, #96]	; (8012908 <xPortStartScheduler+0x138>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4a17      	ldr	r2, [pc, #92]	; (8012908 <xPortStartScheduler+0x138>)
 80128ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80128b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80128b2:	4b15      	ldr	r3, [pc, #84]	; (8012908 <xPortStartScheduler+0x138>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	4a14      	ldr	r2, [pc, #80]	; (8012908 <xPortStartScheduler+0x138>)
 80128b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80128bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80128be:	f000 f8dd 	bl	8012a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80128c2:	4b12      	ldr	r3, [pc, #72]	; (801290c <xPortStartScheduler+0x13c>)
 80128c4:	2200      	movs	r2, #0
 80128c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80128c8:	f000 f8fc 	bl	8012ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80128cc:	4b10      	ldr	r3, [pc, #64]	; (8012910 <xPortStartScheduler+0x140>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	4a0f      	ldr	r2, [pc, #60]	; (8012910 <xPortStartScheduler+0x140>)
 80128d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80128d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80128d8:	f7ff ff66 	bl	80127a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80128dc:	f7fe ff8a 	bl	80117f4 <vTaskSwitchContext>
	prvTaskExitError();
 80128e0:	f7ff ff20 	bl	8012724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80128e4:	2300      	movs	r3, #0
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3718      	adds	r7, #24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	e000ed00 	.word	0xe000ed00
 80128f4:	410fc271 	.word	0x410fc271
 80128f8:	410fc270 	.word	0x410fc270
 80128fc:	e000e400 	.word	0xe000e400
 8012900:	20002850 	.word	0x20002850
 8012904:	20002854 	.word	0x20002854
 8012908:	e000ed20 	.word	0xe000ed20
 801290c:	20000b1c 	.word	0x20000b1c
 8012910:	e000ef34 	.word	0xe000ef34

08012914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012914:	b480      	push	{r7}
 8012916:	b083      	sub	sp, #12
 8012918:	af00      	add	r7, sp, #0
	__asm volatile
 801291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291e:	f383 8811 	msr	BASEPRI, r3
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	607b      	str	r3, [r7, #4]
}
 801292c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801292e:	4b0f      	ldr	r3, [pc, #60]	; (801296c <vPortEnterCritical+0x58>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	3301      	adds	r3, #1
 8012934:	4a0d      	ldr	r2, [pc, #52]	; (801296c <vPortEnterCritical+0x58>)
 8012936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012938:	4b0c      	ldr	r3, [pc, #48]	; (801296c <vPortEnterCritical+0x58>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d10f      	bne.n	8012960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012940:	4b0b      	ldr	r3, [pc, #44]	; (8012970 <vPortEnterCritical+0x5c>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	b2db      	uxtb	r3, r3
 8012946:	2b00      	cmp	r3, #0
 8012948:	d00a      	beq.n	8012960 <vPortEnterCritical+0x4c>
	__asm volatile
 801294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294e:	f383 8811 	msr	BASEPRI, r3
 8012952:	f3bf 8f6f 	isb	sy
 8012956:	f3bf 8f4f 	dsb	sy
 801295a:	603b      	str	r3, [r7, #0]
}
 801295c:	bf00      	nop
 801295e:	e7fe      	b.n	801295e <vPortEnterCritical+0x4a>
	}
}
 8012960:	bf00      	nop
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr
 801296c:	20000b1c 	.word	0x20000b1c
 8012970:	e000ed04 	.word	0xe000ed04

08012974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801297a:	4b12      	ldr	r3, [pc, #72]	; (80129c4 <vPortExitCritical+0x50>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d10a      	bne.n	8012998 <vPortExitCritical+0x24>
	__asm volatile
 8012982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	607b      	str	r3, [r7, #4]
}
 8012994:	bf00      	nop
 8012996:	e7fe      	b.n	8012996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012998:	4b0a      	ldr	r3, [pc, #40]	; (80129c4 <vPortExitCritical+0x50>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	3b01      	subs	r3, #1
 801299e:	4a09      	ldr	r2, [pc, #36]	; (80129c4 <vPortExitCritical+0x50>)
 80129a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80129a2:	4b08      	ldr	r3, [pc, #32]	; (80129c4 <vPortExitCritical+0x50>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d105      	bne.n	80129b6 <vPortExitCritical+0x42>
 80129aa:	2300      	movs	r3, #0
 80129ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	f383 8811 	msr	BASEPRI, r3
}
 80129b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80129b6:	bf00      	nop
 80129b8:	370c      	adds	r7, #12
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	20000b1c 	.word	0x20000b1c
	...

080129d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80129d0:	f3ef 8009 	mrs	r0, PSP
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	4b15      	ldr	r3, [pc, #84]	; (8012a30 <pxCurrentTCBConst>)
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	f01e 0f10 	tst.w	lr, #16
 80129e0:	bf08      	it	eq
 80129e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80129e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ea:	6010      	str	r0, [r2, #0]
 80129ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80129f4:	f380 8811 	msr	BASEPRI, r0
 80129f8:	f3bf 8f4f 	dsb	sy
 80129fc:	f3bf 8f6f 	isb	sy
 8012a00:	f7fe fef8 	bl	80117f4 <vTaskSwitchContext>
 8012a04:	f04f 0000 	mov.w	r0, #0
 8012a08:	f380 8811 	msr	BASEPRI, r0
 8012a0c:	bc09      	pop	{r0, r3}
 8012a0e:	6819      	ldr	r1, [r3, #0]
 8012a10:	6808      	ldr	r0, [r1, #0]
 8012a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a16:	f01e 0f10 	tst.w	lr, #16
 8012a1a:	bf08      	it	eq
 8012a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a20:	f380 8809 	msr	PSP, r0
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	f3af 8000 	nop.w

08012a30 <pxCurrentTCBConst>:
 8012a30:	200026e8 	.word	0x200026e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012a34:	bf00      	nop
 8012a36:	bf00      	nop

08012a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8012a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	607b      	str	r3, [r7, #4]
}
 8012a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a52:	f7fe fe17 	bl	8011684 <xTaskIncrementTick>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d003      	beq.n	8012a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a5c:	4b06      	ldr	r3, [pc, #24]	; (8012a78 <SysTick_Handler+0x40>)
 8012a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	2300      	movs	r3, #0
 8012a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	f383 8811 	msr	BASEPRI, r3
}
 8012a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a70:	bf00      	nop
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	e000ed04 	.word	0xe000ed04

08012a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a80:	4b0b      	ldr	r3, [pc, #44]	; (8012ab0 <vPortSetupTimerInterrupt+0x34>)
 8012a82:	2200      	movs	r2, #0
 8012a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a86:	4b0b      	ldr	r3, [pc, #44]	; (8012ab4 <vPortSetupTimerInterrupt+0x38>)
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a8c:	4b0a      	ldr	r3, [pc, #40]	; (8012ab8 <vPortSetupTimerInterrupt+0x3c>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4a0a      	ldr	r2, [pc, #40]	; (8012abc <vPortSetupTimerInterrupt+0x40>)
 8012a92:	fba2 2303 	umull	r2, r3, r2, r3
 8012a96:	099b      	lsrs	r3, r3, #6
 8012a98:	4a09      	ldr	r2, [pc, #36]	; (8012ac0 <vPortSetupTimerInterrupt+0x44>)
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a9e:	4b04      	ldr	r3, [pc, #16]	; (8012ab0 <vPortSetupTimerInterrupt+0x34>)
 8012aa0:	2207      	movs	r2, #7
 8012aa2:	601a      	str	r2, [r3, #0]
}
 8012aa4:	bf00      	nop
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	e000e010 	.word	0xe000e010
 8012ab4:	e000e018 	.word	0xe000e018
 8012ab8:	20000b10 	.word	0x20000b10
 8012abc:	10624dd3 	.word	0x10624dd3
 8012ac0:	e000e014 	.word	0xe000e014

08012ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012ad4 <vPortEnableVFP+0x10>
 8012ac8:	6801      	ldr	r1, [r0, #0]
 8012aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012ace:	6001      	str	r1, [r0, #0]
 8012ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ad2:	bf00      	nop
 8012ad4:	e000ed88 	.word	0xe000ed88

08012ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012ade:	f3ef 8305 	mrs	r3, IPSR
 8012ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2b0f      	cmp	r3, #15
 8012ae8:	d914      	bls.n	8012b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012aea:	4a17      	ldr	r2, [pc, #92]	; (8012b48 <vPortValidateInterruptPriority+0x70>)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	4413      	add	r3, r2
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012af4:	4b15      	ldr	r3, [pc, #84]	; (8012b4c <vPortValidateInterruptPriority+0x74>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	7afa      	ldrb	r2, [r7, #11]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d20a      	bcs.n	8012b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	607b      	str	r3, [r7, #4]
}
 8012b10:	bf00      	nop
 8012b12:	e7fe      	b.n	8012b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b14:	4b0e      	ldr	r3, [pc, #56]	; (8012b50 <vPortValidateInterruptPriority+0x78>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b1c:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <vPortValidateInterruptPriority+0x7c>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d90a      	bls.n	8012b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b28:	f383 8811 	msr	BASEPRI, r3
 8012b2c:	f3bf 8f6f 	isb	sy
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	603b      	str	r3, [r7, #0]
}
 8012b36:	bf00      	nop
 8012b38:	e7fe      	b.n	8012b38 <vPortValidateInterruptPriority+0x60>
	}
 8012b3a:	bf00      	nop
 8012b3c:	3714      	adds	r7, #20
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop
 8012b48:	e000e3f0 	.word	0xe000e3f0
 8012b4c:	20002850 	.word	0x20002850
 8012b50:	e000ed0c 	.word	0xe000ed0c
 8012b54:	20002854 	.word	0x20002854

08012b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b08a      	sub	sp, #40	; 0x28
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b60:	2300      	movs	r3, #0
 8012b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b64:	f7fe fcd4 	bl	8011510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b68:	4b5b      	ldr	r3, [pc, #364]	; (8012cd8 <pvPortMalloc+0x180>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d101      	bne.n	8012b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b70:	f000 f920 	bl	8012db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b74:	4b59      	ldr	r3, [pc, #356]	; (8012cdc <pvPortMalloc+0x184>)
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4013      	ands	r3, r2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f040 8093 	bne.w	8012ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d01d      	beq.n	8012bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b88:	2208      	movs	r2, #8
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f003 0307 	and.w	r3, r3, #7
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d014      	beq.n	8012bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f023 0307 	bic.w	r3, r3, #7
 8012ba0:	3308      	adds	r3, #8
 8012ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f003 0307 	and.w	r3, r3, #7
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00a      	beq.n	8012bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	617b      	str	r3, [r7, #20]
}
 8012bc0:	bf00      	nop
 8012bc2:	e7fe      	b.n	8012bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d06e      	beq.n	8012ca8 <pvPortMalloc+0x150>
 8012bca:	4b45      	ldr	r3, [pc, #276]	; (8012ce0 <pvPortMalloc+0x188>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d869      	bhi.n	8012ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012bd4:	4b43      	ldr	r3, [pc, #268]	; (8012ce4 <pvPortMalloc+0x18c>)
 8012bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012bd8:	4b42      	ldr	r3, [pc, #264]	; (8012ce4 <pvPortMalloc+0x18c>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bde:	e004      	b.n	8012bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d903      	bls.n	8012bfc <pvPortMalloc+0xa4>
 8012bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d1f1      	bne.n	8012be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012bfc:	4b36      	ldr	r3, [pc, #216]	; (8012cd8 <pvPortMalloc+0x180>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d050      	beq.n	8012ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2208      	movs	r2, #8
 8012c0c:	4413      	add	r3, r2
 8012c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	681a      	ldr	r2, [r3, #0]
 8012c14:	6a3b      	ldr	r3, [r7, #32]
 8012c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	685a      	ldr	r2, [r3, #4]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	1ad2      	subs	r2, r2, r3
 8012c20:	2308      	movs	r3, #8
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d91f      	bls.n	8012c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	f003 0307 	and.w	r3, r3, #7
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d00a      	beq.n	8012c50 <pvPortMalloc+0xf8>
	__asm volatile
 8012c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3e:	f383 8811 	msr	BASEPRI, r3
 8012c42:	f3bf 8f6f 	isb	sy
 8012c46:	f3bf 8f4f 	dsb	sy
 8012c4a:	613b      	str	r3, [r7, #16]
}
 8012c4c:	bf00      	nop
 8012c4e:	e7fe      	b.n	8012c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	685a      	ldr	r2, [r3, #4]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	1ad2      	subs	r2, r2, r3
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c62:	69b8      	ldr	r0, [r7, #24]
 8012c64:	f000 f908 	bl	8012e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c68:	4b1d      	ldr	r3, [pc, #116]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	4a1b      	ldr	r2, [pc, #108]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c76:	4b1a      	ldr	r3, [pc, #104]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	4b1b      	ldr	r3, [pc, #108]	; (8012ce8 <pvPortMalloc+0x190>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d203      	bcs.n	8012c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c82:	4b17      	ldr	r3, [pc, #92]	; (8012ce0 <pvPortMalloc+0x188>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	4a18      	ldr	r2, [pc, #96]	; (8012ce8 <pvPortMalloc+0x190>)
 8012c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8c:	685a      	ldr	r2, [r3, #4]
 8012c8e:	4b13      	ldr	r3, [pc, #76]	; (8012cdc <pvPortMalloc+0x184>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	431a      	orrs	r2, r3
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c9e:	4b13      	ldr	r3, [pc, #76]	; (8012cec <pvPortMalloc+0x194>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	4a11      	ldr	r2, [pc, #68]	; (8012cec <pvPortMalloc+0x194>)
 8012ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012ca8:	f7fe fc40 	bl	801152c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	f003 0307 	and.w	r3, r3, #7
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00a      	beq.n	8012ccc <pvPortMalloc+0x174>
	__asm volatile
 8012cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cba:	f383 8811 	msr	BASEPRI, r3
 8012cbe:	f3bf 8f6f 	isb	sy
 8012cc2:	f3bf 8f4f 	dsb	sy
 8012cc6:	60fb      	str	r3, [r7, #12]
}
 8012cc8:	bf00      	nop
 8012cca:	e7fe      	b.n	8012cca <pvPortMalloc+0x172>
	return pvReturn;
 8012ccc:	69fb      	ldr	r3, [r7, #28]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3728      	adds	r7, #40	; 0x28
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	20007860 	.word	0x20007860
 8012cdc:	20007874 	.word	0x20007874
 8012ce0:	20007864 	.word	0x20007864
 8012ce4:	20007858 	.word	0x20007858
 8012ce8:	20007868 	.word	0x20007868
 8012cec:	2000786c 	.word	0x2000786c

08012cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b086      	sub	sp, #24
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d04d      	beq.n	8012d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d02:	2308      	movs	r3, #8
 8012d04:	425b      	negs	r3, r3
 8012d06:	697a      	ldr	r2, [r7, #20]
 8012d08:	4413      	add	r3, r2
 8012d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	685a      	ldr	r2, [r3, #4]
 8012d14:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <vPortFree+0xb8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	4013      	ands	r3, r2
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d10a      	bne.n	8012d34 <vPortFree+0x44>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d22:	f383 8811 	msr	BASEPRI, r3
 8012d26:	f3bf 8f6f 	isb	sy
 8012d2a:	f3bf 8f4f 	dsb	sy
 8012d2e:	60fb      	str	r3, [r7, #12]
}
 8012d30:	bf00      	nop
 8012d32:	e7fe      	b.n	8012d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00a      	beq.n	8012d52 <vPortFree+0x62>
	__asm volatile
 8012d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d40:	f383 8811 	msr	BASEPRI, r3
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	60bb      	str	r3, [r7, #8]
}
 8012d4e:	bf00      	nop
 8012d50:	e7fe      	b.n	8012d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	4b14      	ldr	r3, [pc, #80]	; (8012da8 <vPortFree+0xb8>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d01e      	beq.n	8012d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d11a      	bne.n	8012d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	685a      	ldr	r2, [r3, #4]
 8012d6c:	4b0e      	ldr	r3, [pc, #56]	; (8012da8 <vPortFree+0xb8>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	43db      	mvns	r3, r3
 8012d72:	401a      	ands	r2, r3
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d78:	f7fe fbca 	bl	8011510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	685a      	ldr	r2, [r3, #4]
 8012d80:	4b0a      	ldr	r3, [pc, #40]	; (8012dac <vPortFree+0xbc>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4413      	add	r3, r2
 8012d86:	4a09      	ldr	r2, [pc, #36]	; (8012dac <vPortFree+0xbc>)
 8012d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d8a:	6938      	ldr	r0, [r7, #16]
 8012d8c:	f000 f874 	bl	8012e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d90:	4b07      	ldr	r3, [pc, #28]	; (8012db0 <vPortFree+0xc0>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	3301      	adds	r3, #1
 8012d96:	4a06      	ldr	r2, [pc, #24]	; (8012db0 <vPortFree+0xc0>)
 8012d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d9a:	f7fe fbc7 	bl	801152c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d9e:	bf00      	nop
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	20007874 	.word	0x20007874
 8012dac:	20007864 	.word	0x20007864
 8012db0:	20007870 	.word	0x20007870

08012db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012db4:	b480      	push	{r7}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012dba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8012dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012dc0:	4b27      	ldr	r3, [pc, #156]	; (8012e60 <prvHeapInit+0xac>)
 8012dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f003 0307 	and.w	r3, r3, #7
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d00c      	beq.n	8012de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	3307      	adds	r3, #7
 8012dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f023 0307 	bic.w	r3, r3, #7
 8012dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012ddc:	68ba      	ldr	r2, [r7, #8]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	4a1f      	ldr	r2, [pc, #124]	; (8012e60 <prvHeapInit+0xac>)
 8012de4:	4413      	add	r3, r2
 8012de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012dec:	4a1d      	ldr	r2, [pc, #116]	; (8012e64 <prvHeapInit+0xb0>)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012df2:	4b1c      	ldr	r3, [pc, #112]	; (8012e64 <prvHeapInit+0xb0>)
 8012df4:	2200      	movs	r2, #0
 8012df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	68ba      	ldr	r2, [r7, #8]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012e00:	2208      	movs	r2, #8
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	1a9b      	subs	r3, r3, r2
 8012e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f023 0307 	bic.w	r3, r3, #7
 8012e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	4a15      	ldr	r2, [pc, #84]	; (8012e68 <prvHeapInit+0xb4>)
 8012e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e16:	4b14      	ldr	r3, [pc, #80]	; (8012e68 <prvHeapInit+0xb4>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e1e:	4b12      	ldr	r3, [pc, #72]	; (8012e68 <prvHeapInit+0xb4>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	2200      	movs	r2, #0
 8012e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	68fa      	ldr	r2, [r7, #12]
 8012e2e:	1ad2      	subs	r2, r2, r3
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012e34:	4b0c      	ldr	r3, [pc, #48]	; (8012e68 <prvHeapInit+0xb4>)
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	4a0a      	ldr	r2, [pc, #40]	; (8012e6c <prvHeapInit+0xb8>)
 8012e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	4a09      	ldr	r2, [pc, #36]	; (8012e70 <prvHeapInit+0xbc>)
 8012e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e4c:	4b09      	ldr	r3, [pc, #36]	; (8012e74 <prvHeapInit+0xc0>)
 8012e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e52:	601a      	str	r2, [r3, #0]
}
 8012e54:	bf00      	nop
 8012e56:	3714      	adds	r7, #20
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	20002858 	.word	0x20002858
 8012e64:	20007858 	.word	0x20007858
 8012e68:	20007860 	.word	0x20007860
 8012e6c:	20007868 	.word	0x20007868
 8012e70:	20007864 	.word	0x20007864
 8012e74:	20007874 	.word	0x20007874

08012e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e80:	4b28      	ldr	r3, [pc, #160]	; (8012f24 <prvInsertBlockIntoFreeList+0xac>)
 8012e82:	60fb      	str	r3, [r7, #12]
 8012e84:	e002      	b.n	8012e8c <prvInsertBlockIntoFreeList+0x14>
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	60fb      	str	r3, [r7, #12]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d8f7      	bhi.n	8012e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	68ba      	ldr	r2, [r7, #8]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d108      	bne.n	8012eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685a      	ldr	r2, [r3, #4]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	441a      	add	r2, r3
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	68ba      	ldr	r2, [r7, #8]
 8012ec4:	441a      	add	r2, r3
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d118      	bne.n	8012f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	4b15      	ldr	r3, [pc, #84]	; (8012f28 <prvInsertBlockIntoFreeList+0xb0>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d00d      	beq.n	8012ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	685a      	ldr	r2, [r3, #4]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	441a      	add	r2, r3
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	601a      	str	r2, [r3, #0]
 8012ef4:	e008      	b.n	8012f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012ef6:	4b0c      	ldr	r3, [pc, #48]	; (8012f28 <prvInsertBlockIntoFreeList+0xb0>)
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	601a      	str	r2, [r3, #0]
 8012efe:	e003      	b.n	8012f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d002      	beq.n	8012f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f16:	bf00      	nop
 8012f18:	3714      	adds	r7, #20
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	20007858 	.word	0x20007858
 8012f28:	20007860 	.word	0x20007860

08012f2c <__assert_func>:
 8012f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f2e:	4614      	mov	r4, r2
 8012f30:	461a      	mov	r2, r3
 8012f32:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <__assert_func+0x2c>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4605      	mov	r5, r0
 8012f38:	68d8      	ldr	r0, [r3, #12]
 8012f3a:	b14c      	cbz	r4, 8012f50 <__assert_func+0x24>
 8012f3c:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <__assert_func+0x30>)
 8012f3e:	9100      	str	r1, [sp, #0]
 8012f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f44:	4906      	ldr	r1, [pc, #24]	; (8012f60 <__assert_func+0x34>)
 8012f46:	462b      	mov	r3, r5
 8012f48:	f000 f8ea 	bl	8013120 <fiprintf>
 8012f4c:	f000 fe9a 	bl	8013c84 <abort>
 8012f50:	4b04      	ldr	r3, [pc, #16]	; (8012f64 <__assert_func+0x38>)
 8012f52:	461c      	mov	r4, r3
 8012f54:	e7f3      	b.n	8012f3e <__assert_func+0x12>
 8012f56:	bf00      	nop
 8012f58:	20000b20 	.word	0x20000b20
 8012f5c:	08016b04 	.word	0x08016b04
 8012f60:	08016b11 	.word	0x08016b11
 8012f64:	08016b3f 	.word	0x08016b3f

08012f68 <__errno>:
 8012f68:	4b01      	ldr	r3, [pc, #4]	; (8012f70 <__errno+0x8>)
 8012f6a:	6818      	ldr	r0, [r3, #0]
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	20000b20 	.word	0x20000b20

08012f74 <std>:
 8012f74:	2300      	movs	r3, #0
 8012f76:	b510      	push	{r4, lr}
 8012f78:	4604      	mov	r4, r0
 8012f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8012f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f82:	6083      	str	r3, [r0, #8]
 8012f84:	8181      	strh	r1, [r0, #12]
 8012f86:	6643      	str	r3, [r0, #100]	; 0x64
 8012f88:	81c2      	strh	r2, [r0, #14]
 8012f8a:	6183      	str	r3, [r0, #24]
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	2208      	movs	r2, #8
 8012f90:	305c      	adds	r0, #92	; 0x5c
 8012f92:	f000 f93c 	bl	801320e <memset>
 8012f96:	4b05      	ldr	r3, [pc, #20]	; (8012fac <std+0x38>)
 8012f98:	6263      	str	r3, [r4, #36]	; 0x24
 8012f9a:	4b05      	ldr	r3, [pc, #20]	; (8012fb0 <std+0x3c>)
 8012f9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f9e:	4b05      	ldr	r3, [pc, #20]	; (8012fb4 <std+0x40>)
 8012fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fa2:	4b05      	ldr	r3, [pc, #20]	; (8012fb8 <std+0x44>)
 8012fa4:	6224      	str	r4, [r4, #32]
 8012fa6:	6323      	str	r3, [r4, #48]	; 0x30
 8012fa8:	bd10      	pop	{r4, pc}
 8012faa:	bf00      	nop
 8012fac:	08013a59 	.word	0x08013a59
 8012fb0:	08013a7b 	.word	0x08013a7b
 8012fb4:	08013ab3 	.word	0x08013ab3
 8012fb8:	08013ad7 	.word	0x08013ad7

08012fbc <_cleanup_r>:
 8012fbc:	4901      	ldr	r1, [pc, #4]	; (8012fc4 <_cleanup_r+0x8>)
 8012fbe:	f000 b8c1 	b.w	8013144 <_fwalk_reent>
 8012fc2:	bf00      	nop
 8012fc4:	08013dc1 	.word	0x08013dc1

08012fc8 <__sfmoreglue>:
 8012fc8:	b570      	push	{r4, r5, r6, lr}
 8012fca:	2268      	movs	r2, #104	; 0x68
 8012fcc:	1e4d      	subs	r5, r1, #1
 8012fce:	4355      	muls	r5, r2
 8012fd0:	460e      	mov	r6, r1
 8012fd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012fd6:	f000 f943 	bl	8013260 <_malloc_r>
 8012fda:	4604      	mov	r4, r0
 8012fdc:	b140      	cbz	r0, 8012ff0 <__sfmoreglue+0x28>
 8012fde:	2100      	movs	r1, #0
 8012fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8012fe4:	300c      	adds	r0, #12
 8012fe6:	60a0      	str	r0, [r4, #8]
 8012fe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012fec:	f000 f90f 	bl	801320e <memset>
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	bd70      	pop	{r4, r5, r6, pc}

08012ff4 <__sfp_lock_acquire>:
 8012ff4:	4801      	ldr	r0, [pc, #4]	; (8012ffc <__sfp_lock_acquire+0x8>)
 8012ff6:	f000 b8ea 	b.w	80131ce <__retarget_lock_acquire_recursive>
 8012ffa:	bf00      	nop
 8012ffc:	20007879 	.word	0x20007879

08013000 <__sfp_lock_release>:
 8013000:	4801      	ldr	r0, [pc, #4]	; (8013008 <__sfp_lock_release+0x8>)
 8013002:	f000 b8e5 	b.w	80131d0 <__retarget_lock_release_recursive>
 8013006:	bf00      	nop
 8013008:	20007879 	.word	0x20007879

0801300c <__sinit_lock_acquire>:
 801300c:	4801      	ldr	r0, [pc, #4]	; (8013014 <__sinit_lock_acquire+0x8>)
 801300e:	f000 b8de 	b.w	80131ce <__retarget_lock_acquire_recursive>
 8013012:	bf00      	nop
 8013014:	2000787a 	.word	0x2000787a

08013018 <__sinit_lock_release>:
 8013018:	4801      	ldr	r0, [pc, #4]	; (8013020 <__sinit_lock_release+0x8>)
 801301a:	f000 b8d9 	b.w	80131d0 <__retarget_lock_release_recursive>
 801301e:	bf00      	nop
 8013020:	2000787a 	.word	0x2000787a

08013024 <__sinit>:
 8013024:	b510      	push	{r4, lr}
 8013026:	4604      	mov	r4, r0
 8013028:	f7ff fff0 	bl	801300c <__sinit_lock_acquire>
 801302c:	69a3      	ldr	r3, [r4, #24]
 801302e:	b11b      	cbz	r3, 8013038 <__sinit+0x14>
 8013030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013034:	f7ff bff0 	b.w	8013018 <__sinit_lock_release>
 8013038:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801303c:	6523      	str	r3, [r4, #80]	; 0x50
 801303e:	4b13      	ldr	r3, [pc, #76]	; (801308c <__sinit+0x68>)
 8013040:	4a13      	ldr	r2, [pc, #76]	; (8013090 <__sinit+0x6c>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	62a2      	str	r2, [r4, #40]	; 0x28
 8013046:	42a3      	cmp	r3, r4
 8013048:	bf04      	itt	eq
 801304a:	2301      	moveq	r3, #1
 801304c:	61a3      	streq	r3, [r4, #24]
 801304e:	4620      	mov	r0, r4
 8013050:	f000 f820 	bl	8013094 <__sfp>
 8013054:	6060      	str	r0, [r4, #4]
 8013056:	4620      	mov	r0, r4
 8013058:	f000 f81c 	bl	8013094 <__sfp>
 801305c:	60a0      	str	r0, [r4, #8]
 801305e:	4620      	mov	r0, r4
 8013060:	f000 f818 	bl	8013094 <__sfp>
 8013064:	2200      	movs	r2, #0
 8013066:	60e0      	str	r0, [r4, #12]
 8013068:	2104      	movs	r1, #4
 801306a:	6860      	ldr	r0, [r4, #4]
 801306c:	f7ff ff82 	bl	8012f74 <std>
 8013070:	68a0      	ldr	r0, [r4, #8]
 8013072:	2201      	movs	r2, #1
 8013074:	2109      	movs	r1, #9
 8013076:	f7ff ff7d 	bl	8012f74 <std>
 801307a:	68e0      	ldr	r0, [r4, #12]
 801307c:	2202      	movs	r2, #2
 801307e:	2112      	movs	r1, #18
 8013080:	f7ff ff78 	bl	8012f74 <std>
 8013084:	2301      	movs	r3, #1
 8013086:	61a3      	str	r3, [r4, #24]
 8013088:	e7d2      	b.n	8013030 <__sinit+0xc>
 801308a:	bf00      	nop
 801308c:	08016ba0 	.word	0x08016ba0
 8013090:	08012fbd 	.word	0x08012fbd

08013094 <__sfp>:
 8013094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013096:	4607      	mov	r7, r0
 8013098:	f7ff ffac 	bl	8012ff4 <__sfp_lock_acquire>
 801309c:	4b1e      	ldr	r3, [pc, #120]	; (8013118 <__sfp+0x84>)
 801309e:	681e      	ldr	r6, [r3, #0]
 80130a0:	69b3      	ldr	r3, [r6, #24]
 80130a2:	b913      	cbnz	r3, 80130aa <__sfp+0x16>
 80130a4:	4630      	mov	r0, r6
 80130a6:	f7ff ffbd 	bl	8013024 <__sinit>
 80130aa:	3648      	adds	r6, #72	; 0x48
 80130ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80130b0:	3b01      	subs	r3, #1
 80130b2:	d503      	bpl.n	80130bc <__sfp+0x28>
 80130b4:	6833      	ldr	r3, [r6, #0]
 80130b6:	b30b      	cbz	r3, 80130fc <__sfp+0x68>
 80130b8:	6836      	ldr	r6, [r6, #0]
 80130ba:	e7f7      	b.n	80130ac <__sfp+0x18>
 80130bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80130c0:	b9d5      	cbnz	r5, 80130f8 <__sfp+0x64>
 80130c2:	4b16      	ldr	r3, [pc, #88]	; (801311c <__sfp+0x88>)
 80130c4:	60e3      	str	r3, [r4, #12]
 80130c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80130ca:	6665      	str	r5, [r4, #100]	; 0x64
 80130cc:	f000 f87e 	bl	80131cc <__retarget_lock_init_recursive>
 80130d0:	f7ff ff96 	bl	8013000 <__sfp_lock_release>
 80130d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80130d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80130dc:	6025      	str	r5, [r4, #0]
 80130de:	61a5      	str	r5, [r4, #24]
 80130e0:	2208      	movs	r2, #8
 80130e2:	4629      	mov	r1, r5
 80130e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80130e8:	f000 f891 	bl	801320e <memset>
 80130ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80130f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80130f4:	4620      	mov	r0, r4
 80130f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130f8:	3468      	adds	r4, #104	; 0x68
 80130fa:	e7d9      	b.n	80130b0 <__sfp+0x1c>
 80130fc:	2104      	movs	r1, #4
 80130fe:	4638      	mov	r0, r7
 8013100:	f7ff ff62 	bl	8012fc8 <__sfmoreglue>
 8013104:	4604      	mov	r4, r0
 8013106:	6030      	str	r0, [r6, #0]
 8013108:	2800      	cmp	r0, #0
 801310a:	d1d5      	bne.n	80130b8 <__sfp+0x24>
 801310c:	f7ff ff78 	bl	8013000 <__sfp_lock_release>
 8013110:	230c      	movs	r3, #12
 8013112:	603b      	str	r3, [r7, #0]
 8013114:	e7ee      	b.n	80130f4 <__sfp+0x60>
 8013116:	bf00      	nop
 8013118:	08016ba0 	.word	0x08016ba0
 801311c:	ffff0001 	.word	0xffff0001

08013120 <fiprintf>:
 8013120:	b40e      	push	{r1, r2, r3}
 8013122:	b503      	push	{r0, r1, lr}
 8013124:	4601      	mov	r1, r0
 8013126:	ab03      	add	r3, sp, #12
 8013128:	4805      	ldr	r0, [pc, #20]	; (8013140 <fiprintf+0x20>)
 801312a:	f853 2b04 	ldr.w	r2, [r3], #4
 801312e:	6800      	ldr	r0, [r0, #0]
 8013130:	9301      	str	r3, [sp, #4]
 8013132:	f000 f933 	bl	801339c <_vfiprintf_r>
 8013136:	b002      	add	sp, #8
 8013138:	f85d eb04 	ldr.w	lr, [sp], #4
 801313c:	b003      	add	sp, #12
 801313e:	4770      	bx	lr
 8013140:	20000b20 	.word	0x20000b20

08013144 <_fwalk_reent>:
 8013144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013148:	4606      	mov	r6, r0
 801314a:	4688      	mov	r8, r1
 801314c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013150:	2700      	movs	r7, #0
 8013152:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013156:	f1b9 0901 	subs.w	r9, r9, #1
 801315a:	d505      	bpl.n	8013168 <_fwalk_reent+0x24>
 801315c:	6824      	ldr	r4, [r4, #0]
 801315e:	2c00      	cmp	r4, #0
 8013160:	d1f7      	bne.n	8013152 <_fwalk_reent+0xe>
 8013162:	4638      	mov	r0, r7
 8013164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013168:	89ab      	ldrh	r3, [r5, #12]
 801316a:	2b01      	cmp	r3, #1
 801316c:	d907      	bls.n	801317e <_fwalk_reent+0x3a>
 801316e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013172:	3301      	adds	r3, #1
 8013174:	d003      	beq.n	801317e <_fwalk_reent+0x3a>
 8013176:	4629      	mov	r1, r5
 8013178:	4630      	mov	r0, r6
 801317a:	47c0      	blx	r8
 801317c:	4307      	orrs	r7, r0
 801317e:	3568      	adds	r5, #104	; 0x68
 8013180:	e7e9      	b.n	8013156 <_fwalk_reent+0x12>
	...

08013184 <__libc_init_array>:
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	4d0d      	ldr	r5, [pc, #52]	; (80131bc <__libc_init_array+0x38>)
 8013188:	4c0d      	ldr	r4, [pc, #52]	; (80131c0 <__libc_init_array+0x3c>)
 801318a:	1b64      	subs	r4, r4, r5
 801318c:	10a4      	asrs	r4, r4, #2
 801318e:	2600      	movs	r6, #0
 8013190:	42a6      	cmp	r6, r4
 8013192:	d109      	bne.n	80131a8 <__libc_init_array+0x24>
 8013194:	4d0b      	ldr	r5, [pc, #44]	; (80131c4 <__libc_init_array+0x40>)
 8013196:	4c0c      	ldr	r4, [pc, #48]	; (80131c8 <__libc_init_array+0x44>)
 8013198:	f001 f942 	bl	8014420 <_init>
 801319c:	1b64      	subs	r4, r4, r5
 801319e:	10a4      	asrs	r4, r4, #2
 80131a0:	2600      	movs	r6, #0
 80131a2:	42a6      	cmp	r6, r4
 80131a4:	d105      	bne.n	80131b2 <__libc_init_array+0x2e>
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
 80131a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ac:	4798      	blx	r3
 80131ae:	3601      	adds	r6, #1
 80131b0:	e7ee      	b.n	8013190 <__libc_init_array+0xc>
 80131b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80131b6:	4798      	blx	r3
 80131b8:	3601      	adds	r6, #1
 80131ba:	e7f2      	b.n	80131a2 <__libc_init_array+0x1e>
 80131bc:	08016be0 	.word	0x08016be0
 80131c0:	08016be0 	.word	0x08016be0
 80131c4:	08016be0 	.word	0x08016be0
 80131c8:	08016be4 	.word	0x08016be4

080131cc <__retarget_lock_init_recursive>:
 80131cc:	4770      	bx	lr

080131ce <__retarget_lock_acquire_recursive>:
 80131ce:	4770      	bx	lr

080131d0 <__retarget_lock_release_recursive>:
 80131d0:	4770      	bx	lr

080131d2 <memcmp>:
 80131d2:	b510      	push	{r4, lr}
 80131d4:	3901      	subs	r1, #1
 80131d6:	4402      	add	r2, r0
 80131d8:	4290      	cmp	r0, r2
 80131da:	d101      	bne.n	80131e0 <memcmp+0xe>
 80131dc:	2000      	movs	r0, #0
 80131de:	e005      	b.n	80131ec <memcmp+0x1a>
 80131e0:	7803      	ldrb	r3, [r0, #0]
 80131e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80131e6:	42a3      	cmp	r3, r4
 80131e8:	d001      	beq.n	80131ee <memcmp+0x1c>
 80131ea:	1b18      	subs	r0, r3, r4
 80131ec:	bd10      	pop	{r4, pc}
 80131ee:	3001      	adds	r0, #1
 80131f0:	e7f2      	b.n	80131d8 <memcmp+0x6>

080131f2 <memcpy>:
 80131f2:	440a      	add	r2, r1
 80131f4:	4291      	cmp	r1, r2
 80131f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80131fa:	d100      	bne.n	80131fe <memcpy+0xc>
 80131fc:	4770      	bx	lr
 80131fe:	b510      	push	{r4, lr}
 8013200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013208:	4291      	cmp	r1, r2
 801320a:	d1f9      	bne.n	8013200 <memcpy+0xe>
 801320c:	bd10      	pop	{r4, pc}

0801320e <memset>:
 801320e:	4402      	add	r2, r0
 8013210:	4603      	mov	r3, r0
 8013212:	4293      	cmp	r3, r2
 8013214:	d100      	bne.n	8013218 <memset+0xa>
 8013216:	4770      	bx	lr
 8013218:	f803 1b01 	strb.w	r1, [r3], #1
 801321c:	e7f9      	b.n	8013212 <memset+0x4>
	...

08013220 <sbrk_aligned>:
 8013220:	b570      	push	{r4, r5, r6, lr}
 8013222:	4e0e      	ldr	r6, [pc, #56]	; (801325c <sbrk_aligned+0x3c>)
 8013224:	460c      	mov	r4, r1
 8013226:	6831      	ldr	r1, [r6, #0]
 8013228:	4605      	mov	r5, r0
 801322a:	b911      	cbnz	r1, 8013232 <sbrk_aligned+0x12>
 801322c:	f000 fbe4 	bl	80139f8 <_sbrk_r>
 8013230:	6030      	str	r0, [r6, #0]
 8013232:	4621      	mov	r1, r4
 8013234:	4628      	mov	r0, r5
 8013236:	f000 fbdf 	bl	80139f8 <_sbrk_r>
 801323a:	1c43      	adds	r3, r0, #1
 801323c:	d00a      	beq.n	8013254 <sbrk_aligned+0x34>
 801323e:	1cc4      	adds	r4, r0, #3
 8013240:	f024 0403 	bic.w	r4, r4, #3
 8013244:	42a0      	cmp	r0, r4
 8013246:	d007      	beq.n	8013258 <sbrk_aligned+0x38>
 8013248:	1a21      	subs	r1, r4, r0
 801324a:	4628      	mov	r0, r5
 801324c:	f000 fbd4 	bl	80139f8 <_sbrk_r>
 8013250:	3001      	adds	r0, #1
 8013252:	d101      	bne.n	8013258 <sbrk_aligned+0x38>
 8013254:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013258:	4620      	mov	r0, r4
 801325a:	bd70      	pop	{r4, r5, r6, pc}
 801325c:	20007880 	.word	0x20007880

08013260 <_malloc_r>:
 8013260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013264:	1ccd      	adds	r5, r1, #3
 8013266:	f025 0503 	bic.w	r5, r5, #3
 801326a:	3508      	adds	r5, #8
 801326c:	2d0c      	cmp	r5, #12
 801326e:	bf38      	it	cc
 8013270:	250c      	movcc	r5, #12
 8013272:	2d00      	cmp	r5, #0
 8013274:	4607      	mov	r7, r0
 8013276:	db01      	blt.n	801327c <_malloc_r+0x1c>
 8013278:	42a9      	cmp	r1, r5
 801327a:	d905      	bls.n	8013288 <_malloc_r+0x28>
 801327c:	230c      	movs	r3, #12
 801327e:	603b      	str	r3, [r7, #0]
 8013280:	2600      	movs	r6, #0
 8013282:	4630      	mov	r0, r6
 8013284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013288:	4e2e      	ldr	r6, [pc, #184]	; (8013344 <_malloc_r+0xe4>)
 801328a:	f000 fe67 	bl	8013f5c <__malloc_lock>
 801328e:	6833      	ldr	r3, [r6, #0]
 8013290:	461c      	mov	r4, r3
 8013292:	bb34      	cbnz	r4, 80132e2 <_malloc_r+0x82>
 8013294:	4629      	mov	r1, r5
 8013296:	4638      	mov	r0, r7
 8013298:	f7ff ffc2 	bl	8013220 <sbrk_aligned>
 801329c:	1c43      	adds	r3, r0, #1
 801329e:	4604      	mov	r4, r0
 80132a0:	d14d      	bne.n	801333e <_malloc_r+0xde>
 80132a2:	6834      	ldr	r4, [r6, #0]
 80132a4:	4626      	mov	r6, r4
 80132a6:	2e00      	cmp	r6, #0
 80132a8:	d140      	bne.n	801332c <_malloc_r+0xcc>
 80132aa:	6823      	ldr	r3, [r4, #0]
 80132ac:	4631      	mov	r1, r6
 80132ae:	4638      	mov	r0, r7
 80132b0:	eb04 0803 	add.w	r8, r4, r3
 80132b4:	f000 fba0 	bl	80139f8 <_sbrk_r>
 80132b8:	4580      	cmp	r8, r0
 80132ba:	d13a      	bne.n	8013332 <_malloc_r+0xd2>
 80132bc:	6821      	ldr	r1, [r4, #0]
 80132be:	3503      	adds	r5, #3
 80132c0:	1a6d      	subs	r5, r5, r1
 80132c2:	f025 0503 	bic.w	r5, r5, #3
 80132c6:	3508      	adds	r5, #8
 80132c8:	2d0c      	cmp	r5, #12
 80132ca:	bf38      	it	cc
 80132cc:	250c      	movcc	r5, #12
 80132ce:	4629      	mov	r1, r5
 80132d0:	4638      	mov	r0, r7
 80132d2:	f7ff ffa5 	bl	8013220 <sbrk_aligned>
 80132d6:	3001      	adds	r0, #1
 80132d8:	d02b      	beq.n	8013332 <_malloc_r+0xd2>
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	442b      	add	r3, r5
 80132de:	6023      	str	r3, [r4, #0]
 80132e0:	e00e      	b.n	8013300 <_malloc_r+0xa0>
 80132e2:	6822      	ldr	r2, [r4, #0]
 80132e4:	1b52      	subs	r2, r2, r5
 80132e6:	d41e      	bmi.n	8013326 <_malloc_r+0xc6>
 80132e8:	2a0b      	cmp	r2, #11
 80132ea:	d916      	bls.n	801331a <_malloc_r+0xba>
 80132ec:	1961      	adds	r1, r4, r5
 80132ee:	42a3      	cmp	r3, r4
 80132f0:	6025      	str	r5, [r4, #0]
 80132f2:	bf18      	it	ne
 80132f4:	6059      	strne	r1, [r3, #4]
 80132f6:	6863      	ldr	r3, [r4, #4]
 80132f8:	bf08      	it	eq
 80132fa:	6031      	streq	r1, [r6, #0]
 80132fc:	5162      	str	r2, [r4, r5]
 80132fe:	604b      	str	r3, [r1, #4]
 8013300:	4638      	mov	r0, r7
 8013302:	f104 060b 	add.w	r6, r4, #11
 8013306:	f000 fe2f 	bl	8013f68 <__malloc_unlock>
 801330a:	f026 0607 	bic.w	r6, r6, #7
 801330e:	1d23      	adds	r3, r4, #4
 8013310:	1af2      	subs	r2, r6, r3
 8013312:	d0b6      	beq.n	8013282 <_malloc_r+0x22>
 8013314:	1b9b      	subs	r3, r3, r6
 8013316:	50a3      	str	r3, [r4, r2]
 8013318:	e7b3      	b.n	8013282 <_malloc_r+0x22>
 801331a:	6862      	ldr	r2, [r4, #4]
 801331c:	42a3      	cmp	r3, r4
 801331e:	bf0c      	ite	eq
 8013320:	6032      	streq	r2, [r6, #0]
 8013322:	605a      	strne	r2, [r3, #4]
 8013324:	e7ec      	b.n	8013300 <_malloc_r+0xa0>
 8013326:	4623      	mov	r3, r4
 8013328:	6864      	ldr	r4, [r4, #4]
 801332a:	e7b2      	b.n	8013292 <_malloc_r+0x32>
 801332c:	4634      	mov	r4, r6
 801332e:	6876      	ldr	r6, [r6, #4]
 8013330:	e7b9      	b.n	80132a6 <_malloc_r+0x46>
 8013332:	230c      	movs	r3, #12
 8013334:	603b      	str	r3, [r7, #0]
 8013336:	4638      	mov	r0, r7
 8013338:	f000 fe16 	bl	8013f68 <__malloc_unlock>
 801333c:	e7a1      	b.n	8013282 <_malloc_r+0x22>
 801333e:	6025      	str	r5, [r4, #0]
 8013340:	e7de      	b.n	8013300 <_malloc_r+0xa0>
 8013342:	bf00      	nop
 8013344:	2000787c 	.word	0x2000787c

08013348 <__sfputc_r>:
 8013348:	6893      	ldr	r3, [r2, #8]
 801334a:	3b01      	subs	r3, #1
 801334c:	2b00      	cmp	r3, #0
 801334e:	b410      	push	{r4}
 8013350:	6093      	str	r3, [r2, #8]
 8013352:	da08      	bge.n	8013366 <__sfputc_r+0x1e>
 8013354:	6994      	ldr	r4, [r2, #24]
 8013356:	42a3      	cmp	r3, r4
 8013358:	db01      	blt.n	801335e <__sfputc_r+0x16>
 801335a:	290a      	cmp	r1, #10
 801335c:	d103      	bne.n	8013366 <__sfputc_r+0x1e>
 801335e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013362:	f000 bbbd 	b.w	8013ae0 <__swbuf_r>
 8013366:	6813      	ldr	r3, [r2, #0]
 8013368:	1c58      	adds	r0, r3, #1
 801336a:	6010      	str	r0, [r2, #0]
 801336c:	7019      	strb	r1, [r3, #0]
 801336e:	4608      	mov	r0, r1
 8013370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013374:	4770      	bx	lr

08013376 <__sfputs_r>:
 8013376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013378:	4606      	mov	r6, r0
 801337a:	460f      	mov	r7, r1
 801337c:	4614      	mov	r4, r2
 801337e:	18d5      	adds	r5, r2, r3
 8013380:	42ac      	cmp	r4, r5
 8013382:	d101      	bne.n	8013388 <__sfputs_r+0x12>
 8013384:	2000      	movs	r0, #0
 8013386:	e007      	b.n	8013398 <__sfputs_r+0x22>
 8013388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801338c:	463a      	mov	r2, r7
 801338e:	4630      	mov	r0, r6
 8013390:	f7ff ffda 	bl	8013348 <__sfputc_r>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d1f3      	bne.n	8013380 <__sfputs_r+0xa>
 8013398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801339c <_vfiprintf_r>:
 801339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a0:	460d      	mov	r5, r1
 80133a2:	b09d      	sub	sp, #116	; 0x74
 80133a4:	4614      	mov	r4, r2
 80133a6:	4698      	mov	r8, r3
 80133a8:	4606      	mov	r6, r0
 80133aa:	b118      	cbz	r0, 80133b4 <_vfiprintf_r+0x18>
 80133ac:	6983      	ldr	r3, [r0, #24]
 80133ae:	b90b      	cbnz	r3, 80133b4 <_vfiprintf_r+0x18>
 80133b0:	f7ff fe38 	bl	8013024 <__sinit>
 80133b4:	4b89      	ldr	r3, [pc, #548]	; (80135dc <_vfiprintf_r+0x240>)
 80133b6:	429d      	cmp	r5, r3
 80133b8:	d11b      	bne.n	80133f2 <_vfiprintf_r+0x56>
 80133ba:	6875      	ldr	r5, [r6, #4]
 80133bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133be:	07d9      	lsls	r1, r3, #31
 80133c0:	d405      	bmi.n	80133ce <_vfiprintf_r+0x32>
 80133c2:	89ab      	ldrh	r3, [r5, #12]
 80133c4:	059a      	lsls	r2, r3, #22
 80133c6:	d402      	bmi.n	80133ce <_vfiprintf_r+0x32>
 80133c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133ca:	f7ff ff00 	bl	80131ce <__retarget_lock_acquire_recursive>
 80133ce:	89ab      	ldrh	r3, [r5, #12]
 80133d0:	071b      	lsls	r3, r3, #28
 80133d2:	d501      	bpl.n	80133d8 <_vfiprintf_r+0x3c>
 80133d4:	692b      	ldr	r3, [r5, #16]
 80133d6:	b9eb      	cbnz	r3, 8013414 <_vfiprintf_r+0x78>
 80133d8:	4629      	mov	r1, r5
 80133da:	4630      	mov	r0, r6
 80133dc:	f000 fbe4 	bl	8013ba8 <__swsetup_r>
 80133e0:	b1c0      	cbz	r0, 8013414 <_vfiprintf_r+0x78>
 80133e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133e4:	07dc      	lsls	r4, r3, #31
 80133e6:	d50e      	bpl.n	8013406 <_vfiprintf_r+0x6a>
 80133e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133ec:	b01d      	add	sp, #116	; 0x74
 80133ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f2:	4b7b      	ldr	r3, [pc, #492]	; (80135e0 <_vfiprintf_r+0x244>)
 80133f4:	429d      	cmp	r5, r3
 80133f6:	d101      	bne.n	80133fc <_vfiprintf_r+0x60>
 80133f8:	68b5      	ldr	r5, [r6, #8]
 80133fa:	e7df      	b.n	80133bc <_vfiprintf_r+0x20>
 80133fc:	4b79      	ldr	r3, [pc, #484]	; (80135e4 <_vfiprintf_r+0x248>)
 80133fe:	429d      	cmp	r5, r3
 8013400:	bf08      	it	eq
 8013402:	68f5      	ldreq	r5, [r6, #12]
 8013404:	e7da      	b.n	80133bc <_vfiprintf_r+0x20>
 8013406:	89ab      	ldrh	r3, [r5, #12]
 8013408:	0598      	lsls	r0, r3, #22
 801340a:	d4ed      	bmi.n	80133e8 <_vfiprintf_r+0x4c>
 801340c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801340e:	f7ff fedf 	bl	80131d0 <__retarget_lock_release_recursive>
 8013412:	e7e9      	b.n	80133e8 <_vfiprintf_r+0x4c>
 8013414:	2300      	movs	r3, #0
 8013416:	9309      	str	r3, [sp, #36]	; 0x24
 8013418:	2320      	movs	r3, #32
 801341a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801341e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013422:	2330      	movs	r3, #48	; 0x30
 8013424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80135e8 <_vfiprintf_r+0x24c>
 8013428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801342c:	f04f 0901 	mov.w	r9, #1
 8013430:	4623      	mov	r3, r4
 8013432:	469a      	mov	sl, r3
 8013434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013438:	b10a      	cbz	r2, 801343e <_vfiprintf_r+0xa2>
 801343a:	2a25      	cmp	r2, #37	; 0x25
 801343c:	d1f9      	bne.n	8013432 <_vfiprintf_r+0x96>
 801343e:	ebba 0b04 	subs.w	fp, sl, r4
 8013442:	d00b      	beq.n	801345c <_vfiprintf_r+0xc0>
 8013444:	465b      	mov	r3, fp
 8013446:	4622      	mov	r2, r4
 8013448:	4629      	mov	r1, r5
 801344a:	4630      	mov	r0, r6
 801344c:	f7ff ff93 	bl	8013376 <__sfputs_r>
 8013450:	3001      	adds	r0, #1
 8013452:	f000 80aa 	beq.w	80135aa <_vfiprintf_r+0x20e>
 8013456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013458:	445a      	add	r2, fp
 801345a:	9209      	str	r2, [sp, #36]	; 0x24
 801345c:	f89a 3000 	ldrb.w	r3, [sl]
 8013460:	2b00      	cmp	r3, #0
 8013462:	f000 80a2 	beq.w	80135aa <_vfiprintf_r+0x20e>
 8013466:	2300      	movs	r3, #0
 8013468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801346c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013470:	f10a 0a01 	add.w	sl, sl, #1
 8013474:	9304      	str	r3, [sp, #16]
 8013476:	9307      	str	r3, [sp, #28]
 8013478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801347c:	931a      	str	r3, [sp, #104]	; 0x68
 801347e:	4654      	mov	r4, sl
 8013480:	2205      	movs	r2, #5
 8013482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013486:	4858      	ldr	r0, [pc, #352]	; (80135e8 <_vfiprintf_r+0x24c>)
 8013488:	f7ec feca 	bl	8000220 <memchr>
 801348c:	9a04      	ldr	r2, [sp, #16]
 801348e:	b9d8      	cbnz	r0, 80134c8 <_vfiprintf_r+0x12c>
 8013490:	06d1      	lsls	r1, r2, #27
 8013492:	bf44      	itt	mi
 8013494:	2320      	movmi	r3, #32
 8013496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801349a:	0713      	lsls	r3, r2, #28
 801349c:	bf44      	itt	mi
 801349e:	232b      	movmi	r3, #43	; 0x2b
 80134a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134a4:	f89a 3000 	ldrb.w	r3, [sl]
 80134a8:	2b2a      	cmp	r3, #42	; 0x2a
 80134aa:	d015      	beq.n	80134d8 <_vfiprintf_r+0x13c>
 80134ac:	9a07      	ldr	r2, [sp, #28]
 80134ae:	4654      	mov	r4, sl
 80134b0:	2000      	movs	r0, #0
 80134b2:	f04f 0c0a 	mov.w	ip, #10
 80134b6:	4621      	mov	r1, r4
 80134b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134bc:	3b30      	subs	r3, #48	; 0x30
 80134be:	2b09      	cmp	r3, #9
 80134c0:	d94e      	bls.n	8013560 <_vfiprintf_r+0x1c4>
 80134c2:	b1b0      	cbz	r0, 80134f2 <_vfiprintf_r+0x156>
 80134c4:	9207      	str	r2, [sp, #28]
 80134c6:	e014      	b.n	80134f2 <_vfiprintf_r+0x156>
 80134c8:	eba0 0308 	sub.w	r3, r0, r8
 80134cc:	fa09 f303 	lsl.w	r3, r9, r3
 80134d0:	4313      	orrs	r3, r2
 80134d2:	9304      	str	r3, [sp, #16]
 80134d4:	46a2      	mov	sl, r4
 80134d6:	e7d2      	b.n	801347e <_vfiprintf_r+0xe2>
 80134d8:	9b03      	ldr	r3, [sp, #12]
 80134da:	1d19      	adds	r1, r3, #4
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	9103      	str	r1, [sp, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	bfbb      	ittet	lt
 80134e4:	425b      	neglt	r3, r3
 80134e6:	f042 0202 	orrlt.w	r2, r2, #2
 80134ea:	9307      	strge	r3, [sp, #28]
 80134ec:	9307      	strlt	r3, [sp, #28]
 80134ee:	bfb8      	it	lt
 80134f0:	9204      	strlt	r2, [sp, #16]
 80134f2:	7823      	ldrb	r3, [r4, #0]
 80134f4:	2b2e      	cmp	r3, #46	; 0x2e
 80134f6:	d10c      	bne.n	8013512 <_vfiprintf_r+0x176>
 80134f8:	7863      	ldrb	r3, [r4, #1]
 80134fa:	2b2a      	cmp	r3, #42	; 0x2a
 80134fc:	d135      	bne.n	801356a <_vfiprintf_r+0x1ce>
 80134fe:	9b03      	ldr	r3, [sp, #12]
 8013500:	1d1a      	adds	r2, r3, #4
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	9203      	str	r2, [sp, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	bfb8      	it	lt
 801350a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801350e:	3402      	adds	r4, #2
 8013510:	9305      	str	r3, [sp, #20]
 8013512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80135f8 <_vfiprintf_r+0x25c>
 8013516:	7821      	ldrb	r1, [r4, #0]
 8013518:	2203      	movs	r2, #3
 801351a:	4650      	mov	r0, sl
 801351c:	f7ec fe80 	bl	8000220 <memchr>
 8013520:	b140      	cbz	r0, 8013534 <_vfiprintf_r+0x198>
 8013522:	2340      	movs	r3, #64	; 0x40
 8013524:	eba0 000a 	sub.w	r0, r0, sl
 8013528:	fa03 f000 	lsl.w	r0, r3, r0
 801352c:	9b04      	ldr	r3, [sp, #16]
 801352e:	4303      	orrs	r3, r0
 8013530:	3401      	adds	r4, #1
 8013532:	9304      	str	r3, [sp, #16]
 8013534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013538:	482c      	ldr	r0, [pc, #176]	; (80135ec <_vfiprintf_r+0x250>)
 801353a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801353e:	2206      	movs	r2, #6
 8013540:	f7ec fe6e 	bl	8000220 <memchr>
 8013544:	2800      	cmp	r0, #0
 8013546:	d03f      	beq.n	80135c8 <_vfiprintf_r+0x22c>
 8013548:	4b29      	ldr	r3, [pc, #164]	; (80135f0 <_vfiprintf_r+0x254>)
 801354a:	bb1b      	cbnz	r3, 8013594 <_vfiprintf_r+0x1f8>
 801354c:	9b03      	ldr	r3, [sp, #12]
 801354e:	3307      	adds	r3, #7
 8013550:	f023 0307 	bic.w	r3, r3, #7
 8013554:	3308      	adds	r3, #8
 8013556:	9303      	str	r3, [sp, #12]
 8013558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801355a:	443b      	add	r3, r7
 801355c:	9309      	str	r3, [sp, #36]	; 0x24
 801355e:	e767      	b.n	8013430 <_vfiprintf_r+0x94>
 8013560:	fb0c 3202 	mla	r2, ip, r2, r3
 8013564:	460c      	mov	r4, r1
 8013566:	2001      	movs	r0, #1
 8013568:	e7a5      	b.n	80134b6 <_vfiprintf_r+0x11a>
 801356a:	2300      	movs	r3, #0
 801356c:	3401      	adds	r4, #1
 801356e:	9305      	str	r3, [sp, #20]
 8013570:	4619      	mov	r1, r3
 8013572:	f04f 0c0a 	mov.w	ip, #10
 8013576:	4620      	mov	r0, r4
 8013578:	f810 2b01 	ldrb.w	r2, [r0], #1
 801357c:	3a30      	subs	r2, #48	; 0x30
 801357e:	2a09      	cmp	r2, #9
 8013580:	d903      	bls.n	801358a <_vfiprintf_r+0x1ee>
 8013582:	2b00      	cmp	r3, #0
 8013584:	d0c5      	beq.n	8013512 <_vfiprintf_r+0x176>
 8013586:	9105      	str	r1, [sp, #20]
 8013588:	e7c3      	b.n	8013512 <_vfiprintf_r+0x176>
 801358a:	fb0c 2101 	mla	r1, ip, r1, r2
 801358e:	4604      	mov	r4, r0
 8013590:	2301      	movs	r3, #1
 8013592:	e7f0      	b.n	8013576 <_vfiprintf_r+0x1da>
 8013594:	ab03      	add	r3, sp, #12
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	462a      	mov	r2, r5
 801359a:	4b16      	ldr	r3, [pc, #88]	; (80135f4 <_vfiprintf_r+0x258>)
 801359c:	a904      	add	r1, sp, #16
 801359e:	4630      	mov	r0, r6
 80135a0:	f3af 8000 	nop.w
 80135a4:	4607      	mov	r7, r0
 80135a6:	1c78      	adds	r0, r7, #1
 80135a8:	d1d6      	bne.n	8013558 <_vfiprintf_r+0x1bc>
 80135aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135ac:	07d9      	lsls	r1, r3, #31
 80135ae:	d405      	bmi.n	80135bc <_vfiprintf_r+0x220>
 80135b0:	89ab      	ldrh	r3, [r5, #12]
 80135b2:	059a      	lsls	r2, r3, #22
 80135b4:	d402      	bmi.n	80135bc <_vfiprintf_r+0x220>
 80135b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135b8:	f7ff fe0a 	bl	80131d0 <__retarget_lock_release_recursive>
 80135bc:	89ab      	ldrh	r3, [r5, #12]
 80135be:	065b      	lsls	r3, r3, #25
 80135c0:	f53f af12 	bmi.w	80133e8 <_vfiprintf_r+0x4c>
 80135c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135c6:	e711      	b.n	80133ec <_vfiprintf_r+0x50>
 80135c8:	ab03      	add	r3, sp, #12
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	462a      	mov	r2, r5
 80135ce:	4b09      	ldr	r3, [pc, #36]	; (80135f4 <_vfiprintf_r+0x258>)
 80135d0:	a904      	add	r1, sp, #16
 80135d2:	4630      	mov	r0, r6
 80135d4:	f000 f880 	bl	80136d8 <_printf_i>
 80135d8:	e7e4      	b.n	80135a4 <_vfiprintf_r+0x208>
 80135da:	bf00      	nop
 80135dc:	08016b60 	.word	0x08016b60
 80135e0:	08016b80 	.word	0x08016b80
 80135e4:	08016b40 	.word	0x08016b40
 80135e8:	08016ba4 	.word	0x08016ba4
 80135ec:	08016bae 	.word	0x08016bae
 80135f0:	00000000 	.word	0x00000000
 80135f4:	08013377 	.word	0x08013377
 80135f8:	08016baa 	.word	0x08016baa

080135fc <_printf_common>:
 80135fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013600:	4616      	mov	r6, r2
 8013602:	4699      	mov	r9, r3
 8013604:	688a      	ldr	r2, [r1, #8]
 8013606:	690b      	ldr	r3, [r1, #16]
 8013608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801360c:	4293      	cmp	r3, r2
 801360e:	bfb8      	it	lt
 8013610:	4613      	movlt	r3, r2
 8013612:	6033      	str	r3, [r6, #0]
 8013614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013618:	4607      	mov	r7, r0
 801361a:	460c      	mov	r4, r1
 801361c:	b10a      	cbz	r2, 8013622 <_printf_common+0x26>
 801361e:	3301      	adds	r3, #1
 8013620:	6033      	str	r3, [r6, #0]
 8013622:	6823      	ldr	r3, [r4, #0]
 8013624:	0699      	lsls	r1, r3, #26
 8013626:	bf42      	ittt	mi
 8013628:	6833      	ldrmi	r3, [r6, #0]
 801362a:	3302      	addmi	r3, #2
 801362c:	6033      	strmi	r3, [r6, #0]
 801362e:	6825      	ldr	r5, [r4, #0]
 8013630:	f015 0506 	ands.w	r5, r5, #6
 8013634:	d106      	bne.n	8013644 <_printf_common+0x48>
 8013636:	f104 0a19 	add.w	sl, r4, #25
 801363a:	68e3      	ldr	r3, [r4, #12]
 801363c:	6832      	ldr	r2, [r6, #0]
 801363e:	1a9b      	subs	r3, r3, r2
 8013640:	42ab      	cmp	r3, r5
 8013642:	dc26      	bgt.n	8013692 <_printf_common+0x96>
 8013644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013648:	1e13      	subs	r3, r2, #0
 801364a:	6822      	ldr	r2, [r4, #0]
 801364c:	bf18      	it	ne
 801364e:	2301      	movne	r3, #1
 8013650:	0692      	lsls	r2, r2, #26
 8013652:	d42b      	bmi.n	80136ac <_printf_common+0xb0>
 8013654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013658:	4649      	mov	r1, r9
 801365a:	4638      	mov	r0, r7
 801365c:	47c0      	blx	r8
 801365e:	3001      	adds	r0, #1
 8013660:	d01e      	beq.n	80136a0 <_printf_common+0xa4>
 8013662:	6823      	ldr	r3, [r4, #0]
 8013664:	68e5      	ldr	r5, [r4, #12]
 8013666:	6832      	ldr	r2, [r6, #0]
 8013668:	f003 0306 	and.w	r3, r3, #6
 801366c:	2b04      	cmp	r3, #4
 801366e:	bf08      	it	eq
 8013670:	1aad      	subeq	r5, r5, r2
 8013672:	68a3      	ldr	r3, [r4, #8]
 8013674:	6922      	ldr	r2, [r4, #16]
 8013676:	bf0c      	ite	eq
 8013678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801367c:	2500      	movne	r5, #0
 801367e:	4293      	cmp	r3, r2
 8013680:	bfc4      	itt	gt
 8013682:	1a9b      	subgt	r3, r3, r2
 8013684:	18ed      	addgt	r5, r5, r3
 8013686:	2600      	movs	r6, #0
 8013688:	341a      	adds	r4, #26
 801368a:	42b5      	cmp	r5, r6
 801368c:	d11a      	bne.n	80136c4 <_printf_common+0xc8>
 801368e:	2000      	movs	r0, #0
 8013690:	e008      	b.n	80136a4 <_printf_common+0xa8>
 8013692:	2301      	movs	r3, #1
 8013694:	4652      	mov	r2, sl
 8013696:	4649      	mov	r1, r9
 8013698:	4638      	mov	r0, r7
 801369a:	47c0      	blx	r8
 801369c:	3001      	adds	r0, #1
 801369e:	d103      	bne.n	80136a8 <_printf_common+0xac>
 80136a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136a8:	3501      	adds	r5, #1
 80136aa:	e7c6      	b.n	801363a <_printf_common+0x3e>
 80136ac:	18e1      	adds	r1, r4, r3
 80136ae:	1c5a      	adds	r2, r3, #1
 80136b0:	2030      	movs	r0, #48	; 0x30
 80136b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80136b6:	4422      	add	r2, r4
 80136b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80136bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80136c0:	3302      	adds	r3, #2
 80136c2:	e7c7      	b.n	8013654 <_printf_common+0x58>
 80136c4:	2301      	movs	r3, #1
 80136c6:	4622      	mov	r2, r4
 80136c8:	4649      	mov	r1, r9
 80136ca:	4638      	mov	r0, r7
 80136cc:	47c0      	blx	r8
 80136ce:	3001      	adds	r0, #1
 80136d0:	d0e6      	beq.n	80136a0 <_printf_common+0xa4>
 80136d2:	3601      	adds	r6, #1
 80136d4:	e7d9      	b.n	801368a <_printf_common+0x8e>
	...

080136d8 <_printf_i>:
 80136d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136dc:	7e0f      	ldrb	r7, [r1, #24]
 80136de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136e0:	2f78      	cmp	r7, #120	; 0x78
 80136e2:	4691      	mov	r9, r2
 80136e4:	4680      	mov	r8, r0
 80136e6:	460c      	mov	r4, r1
 80136e8:	469a      	mov	sl, r3
 80136ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136ee:	d807      	bhi.n	8013700 <_printf_i+0x28>
 80136f0:	2f62      	cmp	r7, #98	; 0x62
 80136f2:	d80a      	bhi.n	801370a <_printf_i+0x32>
 80136f4:	2f00      	cmp	r7, #0
 80136f6:	f000 80d8 	beq.w	80138aa <_printf_i+0x1d2>
 80136fa:	2f58      	cmp	r7, #88	; 0x58
 80136fc:	f000 80a3 	beq.w	8013846 <_printf_i+0x16e>
 8013700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013708:	e03a      	b.n	8013780 <_printf_i+0xa8>
 801370a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801370e:	2b15      	cmp	r3, #21
 8013710:	d8f6      	bhi.n	8013700 <_printf_i+0x28>
 8013712:	a101      	add	r1, pc, #4	; (adr r1, 8013718 <_printf_i+0x40>)
 8013714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013718:	08013771 	.word	0x08013771
 801371c:	08013785 	.word	0x08013785
 8013720:	08013701 	.word	0x08013701
 8013724:	08013701 	.word	0x08013701
 8013728:	08013701 	.word	0x08013701
 801372c:	08013701 	.word	0x08013701
 8013730:	08013785 	.word	0x08013785
 8013734:	08013701 	.word	0x08013701
 8013738:	08013701 	.word	0x08013701
 801373c:	08013701 	.word	0x08013701
 8013740:	08013701 	.word	0x08013701
 8013744:	08013891 	.word	0x08013891
 8013748:	080137b5 	.word	0x080137b5
 801374c:	08013873 	.word	0x08013873
 8013750:	08013701 	.word	0x08013701
 8013754:	08013701 	.word	0x08013701
 8013758:	080138b3 	.word	0x080138b3
 801375c:	08013701 	.word	0x08013701
 8013760:	080137b5 	.word	0x080137b5
 8013764:	08013701 	.word	0x08013701
 8013768:	08013701 	.word	0x08013701
 801376c:	0801387b 	.word	0x0801387b
 8013770:	682b      	ldr	r3, [r5, #0]
 8013772:	1d1a      	adds	r2, r3, #4
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	602a      	str	r2, [r5, #0]
 8013778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801377c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013780:	2301      	movs	r3, #1
 8013782:	e0a3      	b.n	80138cc <_printf_i+0x1f4>
 8013784:	6820      	ldr	r0, [r4, #0]
 8013786:	6829      	ldr	r1, [r5, #0]
 8013788:	0606      	lsls	r6, r0, #24
 801378a:	f101 0304 	add.w	r3, r1, #4
 801378e:	d50a      	bpl.n	80137a6 <_printf_i+0xce>
 8013790:	680e      	ldr	r6, [r1, #0]
 8013792:	602b      	str	r3, [r5, #0]
 8013794:	2e00      	cmp	r6, #0
 8013796:	da03      	bge.n	80137a0 <_printf_i+0xc8>
 8013798:	232d      	movs	r3, #45	; 0x2d
 801379a:	4276      	negs	r6, r6
 801379c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137a0:	485e      	ldr	r0, [pc, #376]	; (801391c <_printf_i+0x244>)
 80137a2:	230a      	movs	r3, #10
 80137a4:	e019      	b.n	80137da <_printf_i+0x102>
 80137a6:	680e      	ldr	r6, [r1, #0]
 80137a8:	602b      	str	r3, [r5, #0]
 80137aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80137ae:	bf18      	it	ne
 80137b0:	b236      	sxthne	r6, r6
 80137b2:	e7ef      	b.n	8013794 <_printf_i+0xbc>
 80137b4:	682b      	ldr	r3, [r5, #0]
 80137b6:	6820      	ldr	r0, [r4, #0]
 80137b8:	1d19      	adds	r1, r3, #4
 80137ba:	6029      	str	r1, [r5, #0]
 80137bc:	0601      	lsls	r1, r0, #24
 80137be:	d501      	bpl.n	80137c4 <_printf_i+0xec>
 80137c0:	681e      	ldr	r6, [r3, #0]
 80137c2:	e002      	b.n	80137ca <_printf_i+0xf2>
 80137c4:	0646      	lsls	r6, r0, #25
 80137c6:	d5fb      	bpl.n	80137c0 <_printf_i+0xe8>
 80137c8:	881e      	ldrh	r6, [r3, #0]
 80137ca:	4854      	ldr	r0, [pc, #336]	; (801391c <_printf_i+0x244>)
 80137cc:	2f6f      	cmp	r7, #111	; 0x6f
 80137ce:	bf0c      	ite	eq
 80137d0:	2308      	moveq	r3, #8
 80137d2:	230a      	movne	r3, #10
 80137d4:	2100      	movs	r1, #0
 80137d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80137da:	6865      	ldr	r5, [r4, #4]
 80137dc:	60a5      	str	r5, [r4, #8]
 80137de:	2d00      	cmp	r5, #0
 80137e0:	bfa2      	ittt	ge
 80137e2:	6821      	ldrge	r1, [r4, #0]
 80137e4:	f021 0104 	bicge.w	r1, r1, #4
 80137e8:	6021      	strge	r1, [r4, #0]
 80137ea:	b90e      	cbnz	r6, 80137f0 <_printf_i+0x118>
 80137ec:	2d00      	cmp	r5, #0
 80137ee:	d04d      	beq.n	801388c <_printf_i+0x1b4>
 80137f0:	4615      	mov	r5, r2
 80137f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80137f6:	fb03 6711 	mls	r7, r3, r1, r6
 80137fa:	5dc7      	ldrb	r7, [r0, r7]
 80137fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013800:	4637      	mov	r7, r6
 8013802:	42bb      	cmp	r3, r7
 8013804:	460e      	mov	r6, r1
 8013806:	d9f4      	bls.n	80137f2 <_printf_i+0x11a>
 8013808:	2b08      	cmp	r3, #8
 801380a:	d10b      	bne.n	8013824 <_printf_i+0x14c>
 801380c:	6823      	ldr	r3, [r4, #0]
 801380e:	07de      	lsls	r6, r3, #31
 8013810:	d508      	bpl.n	8013824 <_printf_i+0x14c>
 8013812:	6923      	ldr	r3, [r4, #16]
 8013814:	6861      	ldr	r1, [r4, #4]
 8013816:	4299      	cmp	r1, r3
 8013818:	bfde      	ittt	le
 801381a:	2330      	movle	r3, #48	; 0x30
 801381c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013824:	1b52      	subs	r2, r2, r5
 8013826:	6122      	str	r2, [r4, #16]
 8013828:	f8cd a000 	str.w	sl, [sp]
 801382c:	464b      	mov	r3, r9
 801382e:	aa03      	add	r2, sp, #12
 8013830:	4621      	mov	r1, r4
 8013832:	4640      	mov	r0, r8
 8013834:	f7ff fee2 	bl	80135fc <_printf_common>
 8013838:	3001      	adds	r0, #1
 801383a:	d14c      	bne.n	80138d6 <_printf_i+0x1fe>
 801383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013840:	b004      	add	sp, #16
 8013842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013846:	4835      	ldr	r0, [pc, #212]	; (801391c <_printf_i+0x244>)
 8013848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801384c:	6829      	ldr	r1, [r5, #0]
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	f851 6b04 	ldr.w	r6, [r1], #4
 8013854:	6029      	str	r1, [r5, #0]
 8013856:	061d      	lsls	r5, r3, #24
 8013858:	d514      	bpl.n	8013884 <_printf_i+0x1ac>
 801385a:	07df      	lsls	r7, r3, #31
 801385c:	bf44      	itt	mi
 801385e:	f043 0320 	orrmi.w	r3, r3, #32
 8013862:	6023      	strmi	r3, [r4, #0]
 8013864:	b91e      	cbnz	r6, 801386e <_printf_i+0x196>
 8013866:	6823      	ldr	r3, [r4, #0]
 8013868:	f023 0320 	bic.w	r3, r3, #32
 801386c:	6023      	str	r3, [r4, #0]
 801386e:	2310      	movs	r3, #16
 8013870:	e7b0      	b.n	80137d4 <_printf_i+0xfc>
 8013872:	6823      	ldr	r3, [r4, #0]
 8013874:	f043 0320 	orr.w	r3, r3, #32
 8013878:	6023      	str	r3, [r4, #0]
 801387a:	2378      	movs	r3, #120	; 0x78
 801387c:	4828      	ldr	r0, [pc, #160]	; (8013920 <_printf_i+0x248>)
 801387e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013882:	e7e3      	b.n	801384c <_printf_i+0x174>
 8013884:	0659      	lsls	r1, r3, #25
 8013886:	bf48      	it	mi
 8013888:	b2b6      	uxthmi	r6, r6
 801388a:	e7e6      	b.n	801385a <_printf_i+0x182>
 801388c:	4615      	mov	r5, r2
 801388e:	e7bb      	b.n	8013808 <_printf_i+0x130>
 8013890:	682b      	ldr	r3, [r5, #0]
 8013892:	6826      	ldr	r6, [r4, #0]
 8013894:	6961      	ldr	r1, [r4, #20]
 8013896:	1d18      	adds	r0, r3, #4
 8013898:	6028      	str	r0, [r5, #0]
 801389a:	0635      	lsls	r5, r6, #24
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	d501      	bpl.n	80138a4 <_printf_i+0x1cc>
 80138a0:	6019      	str	r1, [r3, #0]
 80138a2:	e002      	b.n	80138aa <_printf_i+0x1d2>
 80138a4:	0670      	lsls	r0, r6, #25
 80138a6:	d5fb      	bpl.n	80138a0 <_printf_i+0x1c8>
 80138a8:	8019      	strh	r1, [r3, #0]
 80138aa:	2300      	movs	r3, #0
 80138ac:	6123      	str	r3, [r4, #16]
 80138ae:	4615      	mov	r5, r2
 80138b0:	e7ba      	b.n	8013828 <_printf_i+0x150>
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	1d1a      	adds	r2, r3, #4
 80138b6:	602a      	str	r2, [r5, #0]
 80138b8:	681d      	ldr	r5, [r3, #0]
 80138ba:	6862      	ldr	r2, [r4, #4]
 80138bc:	2100      	movs	r1, #0
 80138be:	4628      	mov	r0, r5
 80138c0:	f7ec fcae 	bl	8000220 <memchr>
 80138c4:	b108      	cbz	r0, 80138ca <_printf_i+0x1f2>
 80138c6:	1b40      	subs	r0, r0, r5
 80138c8:	6060      	str	r0, [r4, #4]
 80138ca:	6863      	ldr	r3, [r4, #4]
 80138cc:	6123      	str	r3, [r4, #16]
 80138ce:	2300      	movs	r3, #0
 80138d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138d4:	e7a8      	b.n	8013828 <_printf_i+0x150>
 80138d6:	6923      	ldr	r3, [r4, #16]
 80138d8:	462a      	mov	r2, r5
 80138da:	4649      	mov	r1, r9
 80138dc:	4640      	mov	r0, r8
 80138de:	47d0      	blx	sl
 80138e0:	3001      	adds	r0, #1
 80138e2:	d0ab      	beq.n	801383c <_printf_i+0x164>
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	079b      	lsls	r3, r3, #30
 80138e8:	d413      	bmi.n	8013912 <_printf_i+0x23a>
 80138ea:	68e0      	ldr	r0, [r4, #12]
 80138ec:	9b03      	ldr	r3, [sp, #12]
 80138ee:	4298      	cmp	r0, r3
 80138f0:	bfb8      	it	lt
 80138f2:	4618      	movlt	r0, r3
 80138f4:	e7a4      	b.n	8013840 <_printf_i+0x168>
 80138f6:	2301      	movs	r3, #1
 80138f8:	4632      	mov	r2, r6
 80138fa:	4649      	mov	r1, r9
 80138fc:	4640      	mov	r0, r8
 80138fe:	47d0      	blx	sl
 8013900:	3001      	adds	r0, #1
 8013902:	d09b      	beq.n	801383c <_printf_i+0x164>
 8013904:	3501      	adds	r5, #1
 8013906:	68e3      	ldr	r3, [r4, #12]
 8013908:	9903      	ldr	r1, [sp, #12]
 801390a:	1a5b      	subs	r3, r3, r1
 801390c:	42ab      	cmp	r3, r5
 801390e:	dcf2      	bgt.n	80138f6 <_printf_i+0x21e>
 8013910:	e7eb      	b.n	80138ea <_printf_i+0x212>
 8013912:	2500      	movs	r5, #0
 8013914:	f104 0619 	add.w	r6, r4, #25
 8013918:	e7f5      	b.n	8013906 <_printf_i+0x22e>
 801391a:	bf00      	nop
 801391c:	08016bb5 	.word	0x08016bb5
 8013920:	08016bc6 	.word	0x08016bc6

08013924 <cleanup_glue>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	460c      	mov	r4, r1
 8013928:	6809      	ldr	r1, [r1, #0]
 801392a:	4605      	mov	r5, r0
 801392c:	b109      	cbz	r1, 8013932 <cleanup_glue+0xe>
 801392e:	f7ff fff9 	bl	8013924 <cleanup_glue>
 8013932:	4621      	mov	r1, r4
 8013934:	4628      	mov	r0, r5
 8013936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801393a:	f000 bb1b 	b.w	8013f74 <_free_r>
	...

08013940 <_reclaim_reent>:
 8013940:	4b2c      	ldr	r3, [pc, #176]	; (80139f4 <_reclaim_reent+0xb4>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	4283      	cmp	r3, r0
 8013946:	b570      	push	{r4, r5, r6, lr}
 8013948:	4604      	mov	r4, r0
 801394a:	d051      	beq.n	80139f0 <_reclaim_reent+0xb0>
 801394c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801394e:	b143      	cbz	r3, 8013962 <_reclaim_reent+0x22>
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d14a      	bne.n	80139ec <_reclaim_reent+0xac>
 8013956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013958:	6819      	ldr	r1, [r3, #0]
 801395a:	b111      	cbz	r1, 8013962 <_reclaim_reent+0x22>
 801395c:	4620      	mov	r0, r4
 801395e:	f000 fb09 	bl	8013f74 <_free_r>
 8013962:	6961      	ldr	r1, [r4, #20]
 8013964:	b111      	cbz	r1, 801396c <_reclaim_reent+0x2c>
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fb04 	bl	8013f74 <_free_r>
 801396c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801396e:	b111      	cbz	r1, 8013976 <_reclaim_reent+0x36>
 8013970:	4620      	mov	r0, r4
 8013972:	f000 faff 	bl	8013f74 <_free_r>
 8013976:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013978:	b111      	cbz	r1, 8013980 <_reclaim_reent+0x40>
 801397a:	4620      	mov	r0, r4
 801397c:	f000 fafa 	bl	8013f74 <_free_r>
 8013980:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013982:	b111      	cbz	r1, 801398a <_reclaim_reent+0x4a>
 8013984:	4620      	mov	r0, r4
 8013986:	f000 faf5 	bl	8013f74 <_free_r>
 801398a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801398c:	b111      	cbz	r1, 8013994 <_reclaim_reent+0x54>
 801398e:	4620      	mov	r0, r4
 8013990:	f000 faf0 	bl	8013f74 <_free_r>
 8013994:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013996:	b111      	cbz	r1, 801399e <_reclaim_reent+0x5e>
 8013998:	4620      	mov	r0, r4
 801399a:	f000 faeb 	bl	8013f74 <_free_r>
 801399e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80139a0:	b111      	cbz	r1, 80139a8 <_reclaim_reent+0x68>
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 fae6 	bl	8013f74 <_free_r>
 80139a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139aa:	b111      	cbz	r1, 80139b2 <_reclaim_reent+0x72>
 80139ac:	4620      	mov	r0, r4
 80139ae:	f000 fae1 	bl	8013f74 <_free_r>
 80139b2:	69a3      	ldr	r3, [r4, #24]
 80139b4:	b1e3      	cbz	r3, 80139f0 <_reclaim_reent+0xb0>
 80139b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80139b8:	4620      	mov	r0, r4
 80139ba:	4798      	blx	r3
 80139bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80139be:	b1b9      	cbz	r1, 80139f0 <_reclaim_reent+0xb0>
 80139c0:	4620      	mov	r0, r4
 80139c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139c6:	f7ff bfad 	b.w	8013924 <cleanup_glue>
 80139ca:	5949      	ldr	r1, [r1, r5]
 80139cc:	b941      	cbnz	r1, 80139e0 <_reclaim_reent+0xa0>
 80139ce:	3504      	adds	r5, #4
 80139d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139d2:	2d80      	cmp	r5, #128	; 0x80
 80139d4:	68d9      	ldr	r1, [r3, #12]
 80139d6:	d1f8      	bne.n	80139ca <_reclaim_reent+0x8a>
 80139d8:	4620      	mov	r0, r4
 80139da:	f000 facb 	bl	8013f74 <_free_r>
 80139de:	e7ba      	b.n	8013956 <_reclaim_reent+0x16>
 80139e0:	680e      	ldr	r6, [r1, #0]
 80139e2:	4620      	mov	r0, r4
 80139e4:	f000 fac6 	bl	8013f74 <_free_r>
 80139e8:	4631      	mov	r1, r6
 80139ea:	e7ef      	b.n	80139cc <_reclaim_reent+0x8c>
 80139ec:	2500      	movs	r5, #0
 80139ee:	e7ef      	b.n	80139d0 <_reclaim_reent+0x90>
 80139f0:	bd70      	pop	{r4, r5, r6, pc}
 80139f2:	bf00      	nop
 80139f4:	20000b20 	.word	0x20000b20

080139f8 <_sbrk_r>:
 80139f8:	b538      	push	{r3, r4, r5, lr}
 80139fa:	4d06      	ldr	r5, [pc, #24]	; (8013a14 <_sbrk_r+0x1c>)
 80139fc:	2300      	movs	r3, #0
 80139fe:	4604      	mov	r4, r0
 8013a00:	4608      	mov	r0, r1
 8013a02:	602b      	str	r3, [r5, #0]
 8013a04:	f7f5 fe70 	bl	80096e8 <_sbrk>
 8013a08:	1c43      	adds	r3, r0, #1
 8013a0a:	d102      	bne.n	8013a12 <_sbrk_r+0x1a>
 8013a0c:	682b      	ldr	r3, [r5, #0]
 8013a0e:	b103      	cbz	r3, 8013a12 <_sbrk_r+0x1a>
 8013a10:	6023      	str	r3, [r4, #0]
 8013a12:	bd38      	pop	{r3, r4, r5, pc}
 8013a14:	20007884 	.word	0x20007884

08013a18 <siprintf>:
 8013a18:	b40e      	push	{r1, r2, r3}
 8013a1a:	b500      	push	{lr}
 8013a1c:	b09c      	sub	sp, #112	; 0x70
 8013a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8013a20:	9002      	str	r0, [sp, #8]
 8013a22:	9006      	str	r0, [sp, #24]
 8013a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a28:	4809      	ldr	r0, [pc, #36]	; (8013a50 <siprintf+0x38>)
 8013a2a:	9107      	str	r1, [sp, #28]
 8013a2c:	9104      	str	r1, [sp, #16]
 8013a2e:	4909      	ldr	r1, [pc, #36]	; (8013a54 <siprintf+0x3c>)
 8013a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a34:	9105      	str	r1, [sp, #20]
 8013a36:	6800      	ldr	r0, [r0, #0]
 8013a38:	9301      	str	r3, [sp, #4]
 8013a3a:	a902      	add	r1, sp, #8
 8013a3c:	f000 fb70 	bl	8014120 <_svfiprintf_r>
 8013a40:	9b02      	ldr	r3, [sp, #8]
 8013a42:	2200      	movs	r2, #0
 8013a44:	701a      	strb	r2, [r3, #0]
 8013a46:	b01c      	add	sp, #112	; 0x70
 8013a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a4c:	b003      	add	sp, #12
 8013a4e:	4770      	bx	lr
 8013a50:	20000b20 	.word	0x20000b20
 8013a54:	ffff0208 	.word	0xffff0208

08013a58 <__sread>:
 8013a58:	b510      	push	{r4, lr}
 8013a5a:	460c      	mov	r4, r1
 8013a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a60:	f000 fc5e 	bl	8014320 <_read_r>
 8013a64:	2800      	cmp	r0, #0
 8013a66:	bfab      	itete	ge
 8013a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8013a6c:	181b      	addge	r3, r3, r0
 8013a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a72:	bfac      	ite	ge
 8013a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a76:	81a3      	strhlt	r3, [r4, #12]
 8013a78:	bd10      	pop	{r4, pc}

08013a7a <__swrite>:
 8013a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a7e:	461f      	mov	r7, r3
 8013a80:	898b      	ldrh	r3, [r1, #12]
 8013a82:	05db      	lsls	r3, r3, #23
 8013a84:	4605      	mov	r5, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	4616      	mov	r6, r2
 8013a8a:	d505      	bpl.n	8013a98 <__swrite+0x1e>
 8013a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a90:	2302      	movs	r3, #2
 8013a92:	2200      	movs	r2, #0
 8013a94:	f000 f9d0 	bl	8013e38 <_lseek_r>
 8013a98:	89a3      	ldrh	r3, [r4, #12]
 8013a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013aa2:	81a3      	strh	r3, [r4, #12]
 8013aa4:	4632      	mov	r2, r6
 8013aa6:	463b      	mov	r3, r7
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aae:	f000 b869 	b.w	8013b84 <_write_r>

08013ab2 <__sseek>:
 8013ab2:	b510      	push	{r4, lr}
 8013ab4:	460c      	mov	r4, r1
 8013ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aba:	f000 f9bd 	bl	8013e38 <_lseek_r>
 8013abe:	1c43      	adds	r3, r0, #1
 8013ac0:	89a3      	ldrh	r3, [r4, #12]
 8013ac2:	bf15      	itete	ne
 8013ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ace:	81a3      	strheq	r3, [r4, #12]
 8013ad0:	bf18      	it	ne
 8013ad2:	81a3      	strhne	r3, [r4, #12]
 8013ad4:	bd10      	pop	{r4, pc}

08013ad6 <__sclose>:
 8013ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ada:	f000 b8db 	b.w	8013c94 <_close_r>
	...

08013ae0 <__swbuf_r>:
 8013ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ae2:	460e      	mov	r6, r1
 8013ae4:	4614      	mov	r4, r2
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	b118      	cbz	r0, 8013af2 <__swbuf_r+0x12>
 8013aea:	6983      	ldr	r3, [r0, #24]
 8013aec:	b90b      	cbnz	r3, 8013af2 <__swbuf_r+0x12>
 8013aee:	f7ff fa99 	bl	8013024 <__sinit>
 8013af2:	4b21      	ldr	r3, [pc, #132]	; (8013b78 <__swbuf_r+0x98>)
 8013af4:	429c      	cmp	r4, r3
 8013af6:	d12b      	bne.n	8013b50 <__swbuf_r+0x70>
 8013af8:	686c      	ldr	r4, [r5, #4]
 8013afa:	69a3      	ldr	r3, [r4, #24]
 8013afc:	60a3      	str	r3, [r4, #8]
 8013afe:	89a3      	ldrh	r3, [r4, #12]
 8013b00:	071a      	lsls	r2, r3, #28
 8013b02:	d52f      	bpl.n	8013b64 <__swbuf_r+0x84>
 8013b04:	6923      	ldr	r3, [r4, #16]
 8013b06:	b36b      	cbz	r3, 8013b64 <__swbuf_r+0x84>
 8013b08:	6923      	ldr	r3, [r4, #16]
 8013b0a:	6820      	ldr	r0, [r4, #0]
 8013b0c:	1ac0      	subs	r0, r0, r3
 8013b0e:	6963      	ldr	r3, [r4, #20]
 8013b10:	b2f6      	uxtb	r6, r6
 8013b12:	4283      	cmp	r3, r0
 8013b14:	4637      	mov	r7, r6
 8013b16:	dc04      	bgt.n	8013b22 <__swbuf_r+0x42>
 8013b18:	4621      	mov	r1, r4
 8013b1a:	4628      	mov	r0, r5
 8013b1c:	f000 f950 	bl	8013dc0 <_fflush_r>
 8013b20:	bb30      	cbnz	r0, 8013b70 <__swbuf_r+0x90>
 8013b22:	68a3      	ldr	r3, [r4, #8]
 8013b24:	3b01      	subs	r3, #1
 8013b26:	60a3      	str	r3, [r4, #8]
 8013b28:	6823      	ldr	r3, [r4, #0]
 8013b2a:	1c5a      	adds	r2, r3, #1
 8013b2c:	6022      	str	r2, [r4, #0]
 8013b2e:	701e      	strb	r6, [r3, #0]
 8013b30:	6963      	ldr	r3, [r4, #20]
 8013b32:	3001      	adds	r0, #1
 8013b34:	4283      	cmp	r3, r0
 8013b36:	d004      	beq.n	8013b42 <__swbuf_r+0x62>
 8013b38:	89a3      	ldrh	r3, [r4, #12]
 8013b3a:	07db      	lsls	r3, r3, #31
 8013b3c:	d506      	bpl.n	8013b4c <__swbuf_r+0x6c>
 8013b3e:	2e0a      	cmp	r6, #10
 8013b40:	d104      	bne.n	8013b4c <__swbuf_r+0x6c>
 8013b42:	4621      	mov	r1, r4
 8013b44:	4628      	mov	r0, r5
 8013b46:	f000 f93b 	bl	8013dc0 <_fflush_r>
 8013b4a:	b988      	cbnz	r0, 8013b70 <__swbuf_r+0x90>
 8013b4c:	4638      	mov	r0, r7
 8013b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b50:	4b0a      	ldr	r3, [pc, #40]	; (8013b7c <__swbuf_r+0x9c>)
 8013b52:	429c      	cmp	r4, r3
 8013b54:	d101      	bne.n	8013b5a <__swbuf_r+0x7a>
 8013b56:	68ac      	ldr	r4, [r5, #8]
 8013b58:	e7cf      	b.n	8013afa <__swbuf_r+0x1a>
 8013b5a:	4b09      	ldr	r3, [pc, #36]	; (8013b80 <__swbuf_r+0xa0>)
 8013b5c:	429c      	cmp	r4, r3
 8013b5e:	bf08      	it	eq
 8013b60:	68ec      	ldreq	r4, [r5, #12]
 8013b62:	e7ca      	b.n	8013afa <__swbuf_r+0x1a>
 8013b64:	4621      	mov	r1, r4
 8013b66:	4628      	mov	r0, r5
 8013b68:	f000 f81e 	bl	8013ba8 <__swsetup_r>
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	d0cb      	beq.n	8013b08 <__swbuf_r+0x28>
 8013b70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013b74:	e7ea      	b.n	8013b4c <__swbuf_r+0x6c>
 8013b76:	bf00      	nop
 8013b78:	08016b60 	.word	0x08016b60
 8013b7c:	08016b80 	.word	0x08016b80
 8013b80:	08016b40 	.word	0x08016b40

08013b84 <_write_r>:
 8013b84:	b538      	push	{r3, r4, r5, lr}
 8013b86:	4d07      	ldr	r5, [pc, #28]	; (8013ba4 <_write_r+0x20>)
 8013b88:	4604      	mov	r4, r0
 8013b8a:	4608      	mov	r0, r1
 8013b8c:	4611      	mov	r1, r2
 8013b8e:	2200      	movs	r2, #0
 8013b90:	602a      	str	r2, [r5, #0]
 8013b92:	461a      	mov	r2, r3
 8013b94:	f7f5 fd57 	bl	8009646 <_write>
 8013b98:	1c43      	adds	r3, r0, #1
 8013b9a:	d102      	bne.n	8013ba2 <_write_r+0x1e>
 8013b9c:	682b      	ldr	r3, [r5, #0]
 8013b9e:	b103      	cbz	r3, 8013ba2 <_write_r+0x1e>
 8013ba0:	6023      	str	r3, [r4, #0]
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	20007884 	.word	0x20007884

08013ba8 <__swsetup_r>:
 8013ba8:	4b32      	ldr	r3, [pc, #200]	; (8013c74 <__swsetup_r+0xcc>)
 8013baa:	b570      	push	{r4, r5, r6, lr}
 8013bac:	681d      	ldr	r5, [r3, #0]
 8013bae:	4606      	mov	r6, r0
 8013bb0:	460c      	mov	r4, r1
 8013bb2:	b125      	cbz	r5, 8013bbe <__swsetup_r+0x16>
 8013bb4:	69ab      	ldr	r3, [r5, #24]
 8013bb6:	b913      	cbnz	r3, 8013bbe <__swsetup_r+0x16>
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f7ff fa33 	bl	8013024 <__sinit>
 8013bbe:	4b2e      	ldr	r3, [pc, #184]	; (8013c78 <__swsetup_r+0xd0>)
 8013bc0:	429c      	cmp	r4, r3
 8013bc2:	d10f      	bne.n	8013be4 <__swsetup_r+0x3c>
 8013bc4:	686c      	ldr	r4, [r5, #4]
 8013bc6:	89a3      	ldrh	r3, [r4, #12]
 8013bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bcc:	0719      	lsls	r1, r3, #28
 8013bce:	d42c      	bmi.n	8013c2a <__swsetup_r+0x82>
 8013bd0:	06dd      	lsls	r5, r3, #27
 8013bd2:	d411      	bmi.n	8013bf8 <__swsetup_r+0x50>
 8013bd4:	2309      	movs	r3, #9
 8013bd6:	6033      	str	r3, [r6, #0]
 8013bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bdc:	81a3      	strh	r3, [r4, #12]
 8013bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013be2:	e03e      	b.n	8013c62 <__swsetup_r+0xba>
 8013be4:	4b25      	ldr	r3, [pc, #148]	; (8013c7c <__swsetup_r+0xd4>)
 8013be6:	429c      	cmp	r4, r3
 8013be8:	d101      	bne.n	8013bee <__swsetup_r+0x46>
 8013bea:	68ac      	ldr	r4, [r5, #8]
 8013bec:	e7eb      	b.n	8013bc6 <__swsetup_r+0x1e>
 8013bee:	4b24      	ldr	r3, [pc, #144]	; (8013c80 <__swsetup_r+0xd8>)
 8013bf0:	429c      	cmp	r4, r3
 8013bf2:	bf08      	it	eq
 8013bf4:	68ec      	ldreq	r4, [r5, #12]
 8013bf6:	e7e6      	b.n	8013bc6 <__swsetup_r+0x1e>
 8013bf8:	0758      	lsls	r0, r3, #29
 8013bfa:	d512      	bpl.n	8013c22 <__swsetup_r+0x7a>
 8013bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bfe:	b141      	cbz	r1, 8013c12 <__swsetup_r+0x6a>
 8013c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c04:	4299      	cmp	r1, r3
 8013c06:	d002      	beq.n	8013c0e <__swsetup_r+0x66>
 8013c08:	4630      	mov	r0, r6
 8013c0a:	f000 f9b3 	bl	8013f74 <_free_r>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	6363      	str	r3, [r4, #52]	; 0x34
 8013c12:	89a3      	ldrh	r3, [r4, #12]
 8013c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c18:	81a3      	strh	r3, [r4, #12]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	6063      	str	r3, [r4, #4]
 8013c1e:	6923      	ldr	r3, [r4, #16]
 8013c20:	6023      	str	r3, [r4, #0]
 8013c22:	89a3      	ldrh	r3, [r4, #12]
 8013c24:	f043 0308 	orr.w	r3, r3, #8
 8013c28:	81a3      	strh	r3, [r4, #12]
 8013c2a:	6923      	ldr	r3, [r4, #16]
 8013c2c:	b94b      	cbnz	r3, 8013c42 <__swsetup_r+0x9a>
 8013c2e:	89a3      	ldrh	r3, [r4, #12]
 8013c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c38:	d003      	beq.n	8013c42 <__swsetup_r+0x9a>
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	f000 f933 	bl	8013ea8 <__smakebuf_r>
 8013c42:	89a0      	ldrh	r0, [r4, #12]
 8013c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c48:	f010 0301 	ands.w	r3, r0, #1
 8013c4c:	d00a      	beq.n	8013c64 <__swsetup_r+0xbc>
 8013c4e:	2300      	movs	r3, #0
 8013c50:	60a3      	str	r3, [r4, #8]
 8013c52:	6963      	ldr	r3, [r4, #20]
 8013c54:	425b      	negs	r3, r3
 8013c56:	61a3      	str	r3, [r4, #24]
 8013c58:	6923      	ldr	r3, [r4, #16]
 8013c5a:	b943      	cbnz	r3, 8013c6e <__swsetup_r+0xc6>
 8013c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c60:	d1ba      	bne.n	8013bd8 <__swsetup_r+0x30>
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	0781      	lsls	r1, r0, #30
 8013c66:	bf58      	it	pl
 8013c68:	6963      	ldrpl	r3, [r4, #20]
 8013c6a:	60a3      	str	r3, [r4, #8]
 8013c6c:	e7f4      	b.n	8013c58 <__swsetup_r+0xb0>
 8013c6e:	2000      	movs	r0, #0
 8013c70:	e7f7      	b.n	8013c62 <__swsetup_r+0xba>
 8013c72:	bf00      	nop
 8013c74:	20000b20 	.word	0x20000b20
 8013c78:	08016b60 	.word	0x08016b60
 8013c7c:	08016b80 	.word	0x08016b80
 8013c80:	08016b40 	.word	0x08016b40

08013c84 <abort>:
 8013c84:	b508      	push	{r3, lr}
 8013c86:	2006      	movs	r0, #6
 8013c88:	f000 fb84 	bl	8014394 <raise>
 8013c8c:	2001      	movs	r0, #1
 8013c8e:	f7f5 fcb3 	bl	80095f8 <_exit>
	...

08013c94 <_close_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d06      	ldr	r5, [pc, #24]	; (8013cb0 <_close_r+0x1c>)
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	602b      	str	r3, [r5, #0]
 8013ca0:	f7f5 fced 	bl	800967e <_close>
 8013ca4:	1c43      	adds	r3, r0, #1
 8013ca6:	d102      	bne.n	8013cae <_close_r+0x1a>
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	b103      	cbz	r3, 8013cae <_close_r+0x1a>
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	bd38      	pop	{r3, r4, r5, pc}
 8013cb0:	20007884 	.word	0x20007884

08013cb4 <__sflush_r>:
 8013cb4:	898a      	ldrh	r2, [r1, #12]
 8013cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cba:	4605      	mov	r5, r0
 8013cbc:	0710      	lsls	r0, r2, #28
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	d458      	bmi.n	8013d74 <__sflush_r+0xc0>
 8013cc2:	684b      	ldr	r3, [r1, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	dc05      	bgt.n	8013cd4 <__sflush_r+0x20>
 8013cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	dc02      	bgt.n	8013cd4 <__sflush_r+0x20>
 8013cce:	2000      	movs	r0, #0
 8013cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cd6:	2e00      	cmp	r6, #0
 8013cd8:	d0f9      	beq.n	8013cce <__sflush_r+0x1a>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ce0:	682f      	ldr	r7, [r5, #0]
 8013ce2:	602b      	str	r3, [r5, #0]
 8013ce4:	d032      	beq.n	8013d4c <__sflush_r+0x98>
 8013ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013ce8:	89a3      	ldrh	r3, [r4, #12]
 8013cea:	075a      	lsls	r2, r3, #29
 8013cec:	d505      	bpl.n	8013cfa <__sflush_r+0x46>
 8013cee:	6863      	ldr	r3, [r4, #4]
 8013cf0:	1ac0      	subs	r0, r0, r3
 8013cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013cf4:	b10b      	cbz	r3, 8013cfa <__sflush_r+0x46>
 8013cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cf8:	1ac0      	subs	r0, r0, r3
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d00:	6a21      	ldr	r1, [r4, #32]
 8013d02:	4628      	mov	r0, r5
 8013d04:	47b0      	blx	r6
 8013d06:	1c43      	adds	r3, r0, #1
 8013d08:	89a3      	ldrh	r3, [r4, #12]
 8013d0a:	d106      	bne.n	8013d1a <__sflush_r+0x66>
 8013d0c:	6829      	ldr	r1, [r5, #0]
 8013d0e:	291d      	cmp	r1, #29
 8013d10:	d82c      	bhi.n	8013d6c <__sflush_r+0xb8>
 8013d12:	4a2a      	ldr	r2, [pc, #168]	; (8013dbc <__sflush_r+0x108>)
 8013d14:	40ca      	lsrs	r2, r1
 8013d16:	07d6      	lsls	r6, r2, #31
 8013d18:	d528      	bpl.n	8013d6c <__sflush_r+0xb8>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	6062      	str	r2, [r4, #4]
 8013d1e:	04d9      	lsls	r1, r3, #19
 8013d20:	6922      	ldr	r2, [r4, #16]
 8013d22:	6022      	str	r2, [r4, #0]
 8013d24:	d504      	bpl.n	8013d30 <__sflush_r+0x7c>
 8013d26:	1c42      	adds	r2, r0, #1
 8013d28:	d101      	bne.n	8013d2e <__sflush_r+0x7a>
 8013d2a:	682b      	ldr	r3, [r5, #0]
 8013d2c:	b903      	cbnz	r3, 8013d30 <__sflush_r+0x7c>
 8013d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8013d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d32:	602f      	str	r7, [r5, #0]
 8013d34:	2900      	cmp	r1, #0
 8013d36:	d0ca      	beq.n	8013cce <__sflush_r+0x1a>
 8013d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d3c:	4299      	cmp	r1, r3
 8013d3e:	d002      	beq.n	8013d46 <__sflush_r+0x92>
 8013d40:	4628      	mov	r0, r5
 8013d42:	f000 f917 	bl	8013f74 <_free_r>
 8013d46:	2000      	movs	r0, #0
 8013d48:	6360      	str	r0, [r4, #52]	; 0x34
 8013d4a:	e7c1      	b.n	8013cd0 <__sflush_r+0x1c>
 8013d4c:	6a21      	ldr	r1, [r4, #32]
 8013d4e:	2301      	movs	r3, #1
 8013d50:	4628      	mov	r0, r5
 8013d52:	47b0      	blx	r6
 8013d54:	1c41      	adds	r1, r0, #1
 8013d56:	d1c7      	bne.n	8013ce8 <__sflush_r+0x34>
 8013d58:	682b      	ldr	r3, [r5, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d0c4      	beq.n	8013ce8 <__sflush_r+0x34>
 8013d5e:	2b1d      	cmp	r3, #29
 8013d60:	d001      	beq.n	8013d66 <__sflush_r+0xb2>
 8013d62:	2b16      	cmp	r3, #22
 8013d64:	d101      	bne.n	8013d6a <__sflush_r+0xb6>
 8013d66:	602f      	str	r7, [r5, #0]
 8013d68:	e7b1      	b.n	8013cce <__sflush_r+0x1a>
 8013d6a:	89a3      	ldrh	r3, [r4, #12]
 8013d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d70:	81a3      	strh	r3, [r4, #12]
 8013d72:	e7ad      	b.n	8013cd0 <__sflush_r+0x1c>
 8013d74:	690f      	ldr	r7, [r1, #16]
 8013d76:	2f00      	cmp	r7, #0
 8013d78:	d0a9      	beq.n	8013cce <__sflush_r+0x1a>
 8013d7a:	0793      	lsls	r3, r2, #30
 8013d7c:	680e      	ldr	r6, [r1, #0]
 8013d7e:	bf08      	it	eq
 8013d80:	694b      	ldreq	r3, [r1, #20]
 8013d82:	600f      	str	r7, [r1, #0]
 8013d84:	bf18      	it	ne
 8013d86:	2300      	movne	r3, #0
 8013d88:	eba6 0807 	sub.w	r8, r6, r7
 8013d8c:	608b      	str	r3, [r1, #8]
 8013d8e:	f1b8 0f00 	cmp.w	r8, #0
 8013d92:	dd9c      	ble.n	8013cce <__sflush_r+0x1a>
 8013d94:	6a21      	ldr	r1, [r4, #32]
 8013d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d98:	4643      	mov	r3, r8
 8013d9a:	463a      	mov	r2, r7
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	47b0      	blx	r6
 8013da0:	2800      	cmp	r0, #0
 8013da2:	dc06      	bgt.n	8013db2 <__sflush_r+0xfe>
 8013da4:	89a3      	ldrh	r3, [r4, #12]
 8013da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013daa:	81a3      	strh	r3, [r4, #12]
 8013dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013db0:	e78e      	b.n	8013cd0 <__sflush_r+0x1c>
 8013db2:	4407      	add	r7, r0
 8013db4:	eba8 0800 	sub.w	r8, r8, r0
 8013db8:	e7e9      	b.n	8013d8e <__sflush_r+0xda>
 8013dba:	bf00      	nop
 8013dbc:	20400001 	.word	0x20400001

08013dc0 <_fflush_r>:
 8013dc0:	b538      	push	{r3, r4, r5, lr}
 8013dc2:	690b      	ldr	r3, [r1, #16]
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	460c      	mov	r4, r1
 8013dc8:	b913      	cbnz	r3, 8013dd0 <_fflush_r+0x10>
 8013dca:	2500      	movs	r5, #0
 8013dcc:	4628      	mov	r0, r5
 8013dce:	bd38      	pop	{r3, r4, r5, pc}
 8013dd0:	b118      	cbz	r0, 8013dda <_fflush_r+0x1a>
 8013dd2:	6983      	ldr	r3, [r0, #24]
 8013dd4:	b90b      	cbnz	r3, 8013dda <_fflush_r+0x1a>
 8013dd6:	f7ff f925 	bl	8013024 <__sinit>
 8013dda:	4b14      	ldr	r3, [pc, #80]	; (8013e2c <_fflush_r+0x6c>)
 8013ddc:	429c      	cmp	r4, r3
 8013dde:	d11b      	bne.n	8013e18 <_fflush_r+0x58>
 8013de0:	686c      	ldr	r4, [r5, #4]
 8013de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d0ef      	beq.n	8013dca <_fflush_r+0xa>
 8013dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013dec:	07d0      	lsls	r0, r2, #31
 8013dee:	d404      	bmi.n	8013dfa <_fflush_r+0x3a>
 8013df0:	0599      	lsls	r1, r3, #22
 8013df2:	d402      	bmi.n	8013dfa <_fflush_r+0x3a>
 8013df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013df6:	f7ff f9ea 	bl	80131ce <__retarget_lock_acquire_recursive>
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	f7ff ff59 	bl	8013cb4 <__sflush_r>
 8013e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e04:	07da      	lsls	r2, r3, #31
 8013e06:	4605      	mov	r5, r0
 8013e08:	d4e0      	bmi.n	8013dcc <_fflush_r+0xc>
 8013e0a:	89a3      	ldrh	r3, [r4, #12]
 8013e0c:	059b      	lsls	r3, r3, #22
 8013e0e:	d4dd      	bmi.n	8013dcc <_fflush_r+0xc>
 8013e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e12:	f7ff f9dd 	bl	80131d0 <__retarget_lock_release_recursive>
 8013e16:	e7d9      	b.n	8013dcc <_fflush_r+0xc>
 8013e18:	4b05      	ldr	r3, [pc, #20]	; (8013e30 <_fflush_r+0x70>)
 8013e1a:	429c      	cmp	r4, r3
 8013e1c:	d101      	bne.n	8013e22 <_fflush_r+0x62>
 8013e1e:	68ac      	ldr	r4, [r5, #8]
 8013e20:	e7df      	b.n	8013de2 <_fflush_r+0x22>
 8013e22:	4b04      	ldr	r3, [pc, #16]	; (8013e34 <_fflush_r+0x74>)
 8013e24:	429c      	cmp	r4, r3
 8013e26:	bf08      	it	eq
 8013e28:	68ec      	ldreq	r4, [r5, #12]
 8013e2a:	e7da      	b.n	8013de2 <_fflush_r+0x22>
 8013e2c:	08016b60 	.word	0x08016b60
 8013e30:	08016b80 	.word	0x08016b80
 8013e34:	08016b40 	.word	0x08016b40

08013e38 <_lseek_r>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	4d07      	ldr	r5, [pc, #28]	; (8013e58 <_lseek_r+0x20>)
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	4608      	mov	r0, r1
 8013e40:	4611      	mov	r1, r2
 8013e42:	2200      	movs	r2, #0
 8013e44:	602a      	str	r2, [r5, #0]
 8013e46:	461a      	mov	r2, r3
 8013e48:	f7f5 fc40 	bl	80096cc <_lseek>
 8013e4c:	1c43      	adds	r3, r0, #1
 8013e4e:	d102      	bne.n	8013e56 <_lseek_r+0x1e>
 8013e50:	682b      	ldr	r3, [r5, #0]
 8013e52:	b103      	cbz	r3, 8013e56 <_lseek_r+0x1e>
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	bd38      	pop	{r3, r4, r5, pc}
 8013e58:	20007884 	.word	0x20007884

08013e5c <__swhatbuf_r>:
 8013e5c:	b570      	push	{r4, r5, r6, lr}
 8013e5e:	460e      	mov	r6, r1
 8013e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e64:	2900      	cmp	r1, #0
 8013e66:	b096      	sub	sp, #88	; 0x58
 8013e68:	4614      	mov	r4, r2
 8013e6a:	461d      	mov	r5, r3
 8013e6c:	da08      	bge.n	8013e80 <__swhatbuf_r+0x24>
 8013e6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e72:	2200      	movs	r2, #0
 8013e74:	602a      	str	r2, [r5, #0]
 8013e76:	061a      	lsls	r2, r3, #24
 8013e78:	d410      	bmi.n	8013e9c <__swhatbuf_r+0x40>
 8013e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e7e:	e00e      	b.n	8013e9e <__swhatbuf_r+0x42>
 8013e80:	466a      	mov	r2, sp
 8013e82:	f000 faa3 	bl	80143cc <_fstat_r>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	dbf1      	blt.n	8013e6e <__swhatbuf_r+0x12>
 8013e8a:	9a01      	ldr	r2, [sp, #4]
 8013e8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013e90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013e94:	425a      	negs	r2, r3
 8013e96:	415a      	adcs	r2, r3
 8013e98:	602a      	str	r2, [r5, #0]
 8013e9a:	e7ee      	b.n	8013e7a <__swhatbuf_r+0x1e>
 8013e9c:	2340      	movs	r3, #64	; 0x40
 8013e9e:	2000      	movs	r0, #0
 8013ea0:	6023      	str	r3, [r4, #0]
 8013ea2:	b016      	add	sp, #88	; 0x58
 8013ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ea8 <__smakebuf_r>:
 8013ea8:	898b      	ldrh	r3, [r1, #12]
 8013eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013eac:	079d      	lsls	r5, r3, #30
 8013eae:	4606      	mov	r6, r0
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	d507      	bpl.n	8013ec4 <__smakebuf_r+0x1c>
 8013eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013eb8:	6023      	str	r3, [r4, #0]
 8013eba:	6123      	str	r3, [r4, #16]
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	6163      	str	r3, [r4, #20]
 8013ec0:	b002      	add	sp, #8
 8013ec2:	bd70      	pop	{r4, r5, r6, pc}
 8013ec4:	ab01      	add	r3, sp, #4
 8013ec6:	466a      	mov	r2, sp
 8013ec8:	f7ff ffc8 	bl	8013e5c <__swhatbuf_r>
 8013ecc:	9900      	ldr	r1, [sp, #0]
 8013ece:	4605      	mov	r5, r0
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	f7ff f9c5 	bl	8013260 <_malloc_r>
 8013ed6:	b948      	cbnz	r0, 8013eec <__smakebuf_r+0x44>
 8013ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013edc:	059a      	lsls	r2, r3, #22
 8013ede:	d4ef      	bmi.n	8013ec0 <__smakebuf_r+0x18>
 8013ee0:	f023 0303 	bic.w	r3, r3, #3
 8013ee4:	f043 0302 	orr.w	r3, r3, #2
 8013ee8:	81a3      	strh	r3, [r4, #12]
 8013eea:	e7e3      	b.n	8013eb4 <__smakebuf_r+0xc>
 8013eec:	4b0d      	ldr	r3, [pc, #52]	; (8013f24 <__smakebuf_r+0x7c>)
 8013eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ef0:	89a3      	ldrh	r3, [r4, #12]
 8013ef2:	6020      	str	r0, [r4, #0]
 8013ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ef8:	81a3      	strh	r3, [r4, #12]
 8013efa:	9b00      	ldr	r3, [sp, #0]
 8013efc:	6163      	str	r3, [r4, #20]
 8013efe:	9b01      	ldr	r3, [sp, #4]
 8013f00:	6120      	str	r0, [r4, #16]
 8013f02:	b15b      	cbz	r3, 8013f1c <__smakebuf_r+0x74>
 8013f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f000 fa71 	bl	80143f0 <_isatty_r>
 8013f0e:	b128      	cbz	r0, 8013f1c <__smakebuf_r+0x74>
 8013f10:	89a3      	ldrh	r3, [r4, #12]
 8013f12:	f023 0303 	bic.w	r3, r3, #3
 8013f16:	f043 0301 	orr.w	r3, r3, #1
 8013f1a:	81a3      	strh	r3, [r4, #12]
 8013f1c:	89a0      	ldrh	r0, [r4, #12]
 8013f1e:	4305      	orrs	r5, r0
 8013f20:	81a5      	strh	r5, [r4, #12]
 8013f22:	e7cd      	b.n	8013ec0 <__smakebuf_r+0x18>
 8013f24:	08012fbd 	.word	0x08012fbd

08013f28 <memmove>:
 8013f28:	4288      	cmp	r0, r1
 8013f2a:	b510      	push	{r4, lr}
 8013f2c:	eb01 0402 	add.w	r4, r1, r2
 8013f30:	d902      	bls.n	8013f38 <memmove+0x10>
 8013f32:	4284      	cmp	r4, r0
 8013f34:	4623      	mov	r3, r4
 8013f36:	d807      	bhi.n	8013f48 <memmove+0x20>
 8013f38:	1e43      	subs	r3, r0, #1
 8013f3a:	42a1      	cmp	r1, r4
 8013f3c:	d008      	beq.n	8013f50 <memmove+0x28>
 8013f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f46:	e7f8      	b.n	8013f3a <memmove+0x12>
 8013f48:	4402      	add	r2, r0
 8013f4a:	4601      	mov	r1, r0
 8013f4c:	428a      	cmp	r2, r1
 8013f4e:	d100      	bne.n	8013f52 <memmove+0x2a>
 8013f50:	bd10      	pop	{r4, pc}
 8013f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f5a:	e7f7      	b.n	8013f4c <memmove+0x24>

08013f5c <__malloc_lock>:
 8013f5c:	4801      	ldr	r0, [pc, #4]	; (8013f64 <__malloc_lock+0x8>)
 8013f5e:	f7ff b936 	b.w	80131ce <__retarget_lock_acquire_recursive>
 8013f62:	bf00      	nop
 8013f64:	20007878 	.word	0x20007878

08013f68 <__malloc_unlock>:
 8013f68:	4801      	ldr	r0, [pc, #4]	; (8013f70 <__malloc_unlock+0x8>)
 8013f6a:	f7ff b931 	b.w	80131d0 <__retarget_lock_release_recursive>
 8013f6e:	bf00      	nop
 8013f70:	20007878 	.word	0x20007878

08013f74 <_free_r>:
 8013f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f76:	2900      	cmp	r1, #0
 8013f78:	d044      	beq.n	8014004 <_free_r+0x90>
 8013f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f7e:	9001      	str	r0, [sp, #4]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f1a1 0404 	sub.w	r4, r1, #4
 8013f86:	bfb8      	it	lt
 8013f88:	18e4      	addlt	r4, r4, r3
 8013f8a:	f7ff ffe7 	bl	8013f5c <__malloc_lock>
 8013f8e:	4a1e      	ldr	r2, [pc, #120]	; (8014008 <_free_r+0x94>)
 8013f90:	9801      	ldr	r0, [sp, #4]
 8013f92:	6813      	ldr	r3, [r2, #0]
 8013f94:	b933      	cbnz	r3, 8013fa4 <_free_r+0x30>
 8013f96:	6063      	str	r3, [r4, #4]
 8013f98:	6014      	str	r4, [r2, #0]
 8013f9a:	b003      	add	sp, #12
 8013f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fa0:	f7ff bfe2 	b.w	8013f68 <__malloc_unlock>
 8013fa4:	42a3      	cmp	r3, r4
 8013fa6:	d908      	bls.n	8013fba <_free_r+0x46>
 8013fa8:	6825      	ldr	r5, [r4, #0]
 8013faa:	1961      	adds	r1, r4, r5
 8013fac:	428b      	cmp	r3, r1
 8013fae:	bf01      	itttt	eq
 8013fb0:	6819      	ldreq	r1, [r3, #0]
 8013fb2:	685b      	ldreq	r3, [r3, #4]
 8013fb4:	1949      	addeq	r1, r1, r5
 8013fb6:	6021      	streq	r1, [r4, #0]
 8013fb8:	e7ed      	b.n	8013f96 <_free_r+0x22>
 8013fba:	461a      	mov	r2, r3
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	b10b      	cbz	r3, 8013fc4 <_free_r+0x50>
 8013fc0:	42a3      	cmp	r3, r4
 8013fc2:	d9fa      	bls.n	8013fba <_free_r+0x46>
 8013fc4:	6811      	ldr	r1, [r2, #0]
 8013fc6:	1855      	adds	r5, r2, r1
 8013fc8:	42a5      	cmp	r5, r4
 8013fca:	d10b      	bne.n	8013fe4 <_free_r+0x70>
 8013fcc:	6824      	ldr	r4, [r4, #0]
 8013fce:	4421      	add	r1, r4
 8013fd0:	1854      	adds	r4, r2, r1
 8013fd2:	42a3      	cmp	r3, r4
 8013fd4:	6011      	str	r1, [r2, #0]
 8013fd6:	d1e0      	bne.n	8013f9a <_free_r+0x26>
 8013fd8:	681c      	ldr	r4, [r3, #0]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	6053      	str	r3, [r2, #4]
 8013fde:	4421      	add	r1, r4
 8013fe0:	6011      	str	r1, [r2, #0]
 8013fe2:	e7da      	b.n	8013f9a <_free_r+0x26>
 8013fe4:	d902      	bls.n	8013fec <_free_r+0x78>
 8013fe6:	230c      	movs	r3, #12
 8013fe8:	6003      	str	r3, [r0, #0]
 8013fea:	e7d6      	b.n	8013f9a <_free_r+0x26>
 8013fec:	6825      	ldr	r5, [r4, #0]
 8013fee:	1961      	adds	r1, r4, r5
 8013ff0:	428b      	cmp	r3, r1
 8013ff2:	bf04      	itt	eq
 8013ff4:	6819      	ldreq	r1, [r3, #0]
 8013ff6:	685b      	ldreq	r3, [r3, #4]
 8013ff8:	6063      	str	r3, [r4, #4]
 8013ffa:	bf04      	itt	eq
 8013ffc:	1949      	addeq	r1, r1, r5
 8013ffe:	6021      	streq	r1, [r4, #0]
 8014000:	6054      	str	r4, [r2, #4]
 8014002:	e7ca      	b.n	8013f9a <_free_r+0x26>
 8014004:	b003      	add	sp, #12
 8014006:	bd30      	pop	{r4, r5, pc}
 8014008:	2000787c 	.word	0x2000787c

0801400c <_realloc_r>:
 801400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014010:	4680      	mov	r8, r0
 8014012:	4614      	mov	r4, r2
 8014014:	460e      	mov	r6, r1
 8014016:	b921      	cbnz	r1, 8014022 <_realloc_r+0x16>
 8014018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801401c:	4611      	mov	r1, r2
 801401e:	f7ff b91f 	b.w	8013260 <_malloc_r>
 8014022:	b92a      	cbnz	r2, 8014030 <_realloc_r+0x24>
 8014024:	f7ff ffa6 	bl	8013f74 <_free_r>
 8014028:	4625      	mov	r5, r4
 801402a:	4628      	mov	r0, r5
 801402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014030:	f000 f9ee 	bl	8014410 <_malloc_usable_size_r>
 8014034:	4284      	cmp	r4, r0
 8014036:	4607      	mov	r7, r0
 8014038:	d802      	bhi.n	8014040 <_realloc_r+0x34>
 801403a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801403e:	d812      	bhi.n	8014066 <_realloc_r+0x5a>
 8014040:	4621      	mov	r1, r4
 8014042:	4640      	mov	r0, r8
 8014044:	f7ff f90c 	bl	8013260 <_malloc_r>
 8014048:	4605      	mov	r5, r0
 801404a:	2800      	cmp	r0, #0
 801404c:	d0ed      	beq.n	801402a <_realloc_r+0x1e>
 801404e:	42bc      	cmp	r4, r7
 8014050:	4622      	mov	r2, r4
 8014052:	4631      	mov	r1, r6
 8014054:	bf28      	it	cs
 8014056:	463a      	movcs	r2, r7
 8014058:	f7ff f8cb 	bl	80131f2 <memcpy>
 801405c:	4631      	mov	r1, r6
 801405e:	4640      	mov	r0, r8
 8014060:	f7ff ff88 	bl	8013f74 <_free_r>
 8014064:	e7e1      	b.n	801402a <_realloc_r+0x1e>
 8014066:	4635      	mov	r5, r6
 8014068:	e7df      	b.n	801402a <_realloc_r+0x1e>

0801406a <__ssputs_r>:
 801406a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801406e:	688e      	ldr	r6, [r1, #8]
 8014070:	429e      	cmp	r6, r3
 8014072:	4682      	mov	sl, r0
 8014074:	460c      	mov	r4, r1
 8014076:	4690      	mov	r8, r2
 8014078:	461f      	mov	r7, r3
 801407a:	d838      	bhi.n	80140ee <__ssputs_r+0x84>
 801407c:	898a      	ldrh	r2, [r1, #12]
 801407e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014082:	d032      	beq.n	80140ea <__ssputs_r+0x80>
 8014084:	6825      	ldr	r5, [r4, #0]
 8014086:	6909      	ldr	r1, [r1, #16]
 8014088:	eba5 0901 	sub.w	r9, r5, r1
 801408c:	6965      	ldr	r5, [r4, #20]
 801408e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014096:	3301      	adds	r3, #1
 8014098:	444b      	add	r3, r9
 801409a:	106d      	asrs	r5, r5, #1
 801409c:	429d      	cmp	r5, r3
 801409e:	bf38      	it	cc
 80140a0:	461d      	movcc	r5, r3
 80140a2:	0553      	lsls	r3, r2, #21
 80140a4:	d531      	bpl.n	801410a <__ssputs_r+0xa0>
 80140a6:	4629      	mov	r1, r5
 80140a8:	f7ff f8da 	bl	8013260 <_malloc_r>
 80140ac:	4606      	mov	r6, r0
 80140ae:	b950      	cbnz	r0, 80140c6 <__ssputs_r+0x5c>
 80140b0:	230c      	movs	r3, #12
 80140b2:	f8ca 3000 	str.w	r3, [sl]
 80140b6:	89a3      	ldrh	r3, [r4, #12]
 80140b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140bc:	81a3      	strh	r3, [r4, #12]
 80140be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140c6:	6921      	ldr	r1, [r4, #16]
 80140c8:	464a      	mov	r2, r9
 80140ca:	f7ff f892 	bl	80131f2 <memcpy>
 80140ce:	89a3      	ldrh	r3, [r4, #12]
 80140d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80140d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140d8:	81a3      	strh	r3, [r4, #12]
 80140da:	6126      	str	r6, [r4, #16]
 80140dc:	6165      	str	r5, [r4, #20]
 80140de:	444e      	add	r6, r9
 80140e0:	eba5 0509 	sub.w	r5, r5, r9
 80140e4:	6026      	str	r6, [r4, #0]
 80140e6:	60a5      	str	r5, [r4, #8]
 80140e8:	463e      	mov	r6, r7
 80140ea:	42be      	cmp	r6, r7
 80140ec:	d900      	bls.n	80140f0 <__ssputs_r+0x86>
 80140ee:	463e      	mov	r6, r7
 80140f0:	6820      	ldr	r0, [r4, #0]
 80140f2:	4632      	mov	r2, r6
 80140f4:	4641      	mov	r1, r8
 80140f6:	f7ff ff17 	bl	8013f28 <memmove>
 80140fa:	68a3      	ldr	r3, [r4, #8]
 80140fc:	1b9b      	subs	r3, r3, r6
 80140fe:	60a3      	str	r3, [r4, #8]
 8014100:	6823      	ldr	r3, [r4, #0]
 8014102:	4433      	add	r3, r6
 8014104:	6023      	str	r3, [r4, #0]
 8014106:	2000      	movs	r0, #0
 8014108:	e7db      	b.n	80140c2 <__ssputs_r+0x58>
 801410a:	462a      	mov	r2, r5
 801410c:	f7ff ff7e 	bl	801400c <_realloc_r>
 8014110:	4606      	mov	r6, r0
 8014112:	2800      	cmp	r0, #0
 8014114:	d1e1      	bne.n	80140da <__ssputs_r+0x70>
 8014116:	6921      	ldr	r1, [r4, #16]
 8014118:	4650      	mov	r0, sl
 801411a:	f7ff ff2b 	bl	8013f74 <_free_r>
 801411e:	e7c7      	b.n	80140b0 <__ssputs_r+0x46>

08014120 <_svfiprintf_r>:
 8014120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014124:	4698      	mov	r8, r3
 8014126:	898b      	ldrh	r3, [r1, #12]
 8014128:	061b      	lsls	r3, r3, #24
 801412a:	b09d      	sub	sp, #116	; 0x74
 801412c:	4607      	mov	r7, r0
 801412e:	460d      	mov	r5, r1
 8014130:	4614      	mov	r4, r2
 8014132:	d50e      	bpl.n	8014152 <_svfiprintf_r+0x32>
 8014134:	690b      	ldr	r3, [r1, #16]
 8014136:	b963      	cbnz	r3, 8014152 <_svfiprintf_r+0x32>
 8014138:	2140      	movs	r1, #64	; 0x40
 801413a:	f7ff f891 	bl	8013260 <_malloc_r>
 801413e:	6028      	str	r0, [r5, #0]
 8014140:	6128      	str	r0, [r5, #16]
 8014142:	b920      	cbnz	r0, 801414e <_svfiprintf_r+0x2e>
 8014144:	230c      	movs	r3, #12
 8014146:	603b      	str	r3, [r7, #0]
 8014148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801414c:	e0d1      	b.n	80142f2 <_svfiprintf_r+0x1d2>
 801414e:	2340      	movs	r3, #64	; 0x40
 8014150:	616b      	str	r3, [r5, #20]
 8014152:	2300      	movs	r3, #0
 8014154:	9309      	str	r3, [sp, #36]	; 0x24
 8014156:	2320      	movs	r3, #32
 8014158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801415c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014160:	2330      	movs	r3, #48	; 0x30
 8014162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801430c <_svfiprintf_r+0x1ec>
 8014166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801416a:	f04f 0901 	mov.w	r9, #1
 801416e:	4623      	mov	r3, r4
 8014170:	469a      	mov	sl, r3
 8014172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014176:	b10a      	cbz	r2, 801417c <_svfiprintf_r+0x5c>
 8014178:	2a25      	cmp	r2, #37	; 0x25
 801417a:	d1f9      	bne.n	8014170 <_svfiprintf_r+0x50>
 801417c:	ebba 0b04 	subs.w	fp, sl, r4
 8014180:	d00b      	beq.n	801419a <_svfiprintf_r+0x7a>
 8014182:	465b      	mov	r3, fp
 8014184:	4622      	mov	r2, r4
 8014186:	4629      	mov	r1, r5
 8014188:	4638      	mov	r0, r7
 801418a:	f7ff ff6e 	bl	801406a <__ssputs_r>
 801418e:	3001      	adds	r0, #1
 8014190:	f000 80aa 	beq.w	80142e8 <_svfiprintf_r+0x1c8>
 8014194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014196:	445a      	add	r2, fp
 8014198:	9209      	str	r2, [sp, #36]	; 0x24
 801419a:	f89a 3000 	ldrb.w	r3, [sl]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	f000 80a2 	beq.w	80142e8 <_svfiprintf_r+0x1c8>
 80141a4:	2300      	movs	r3, #0
 80141a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141ae:	f10a 0a01 	add.w	sl, sl, #1
 80141b2:	9304      	str	r3, [sp, #16]
 80141b4:	9307      	str	r3, [sp, #28]
 80141b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141ba:	931a      	str	r3, [sp, #104]	; 0x68
 80141bc:	4654      	mov	r4, sl
 80141be:	2205      	movs	r2, #5
 80141c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141c4:	4851      	ldr	r0, [pc, #324]	; (801430c <_svfiprintf_r+0x1ec>)
 80141c6:	f7ec f82b 	bl	8000220 <memchr>
 80141ca:	9a04      	ldr	r2, [sp, #16]
 80141cc:	b9d8      	cbnz	r0, 8014206 <_svfiprintf_r+0xe6>
 80141ce:	06d0      	lsls	r0, r2, #27
 80141d0:	bf44      	itt	mi
 80141d2:	2320      	movmi	r3, #32
 80141d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141d8:	0711      	lsls	r1, r2, #28
 80141da:	bf44      	itt	mi
 80141dc:	232b      	movmi	r3, #43	; 0x2b
 80141de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141e2:	f89a 3000 	ldrb.w	r3, [sl]
 80141e6:	2b2a      	cmp	r3, #42	; 0x2a
 80141e8:	d015      	beq.n	8014216 <_svfiprintf_r+0xf6>
 80141ea:	9a07      	ldr	r2, [sp, #28]
 80141ec:	4654      	mov	r4, sl
 80141ee:	2000      	movs	r0, #0
 80141f0:	f04f 0c0a 	mov.w	ip, #10
 80141f4:	4621      	mov	r1, r4
 80141f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141fa:	3b30      	subs	r3, #48	; 0x30
 80141fc:	2b09      	cmp	r3, #9
 80141fe:	d94e      	bls.n	801429e <_svfiprintf_r+0x17e>
 8014200:	b1b0      	cbz	r0, 8014230 <_svfiprintf_r+0x110>
 8014202:	9207      	str	r2, [sp, #28]
 8014204:	e014      	b.n	8014230 <_svfiprintf_r+0x110>
 8014206:	eba0 0308 	sub.w	r3, r0, r8
 801420a:	fa09 f303 	lsl.w	r3, r9, r3
 801420e:	4313      	orrs	r3, r2
 8014210:	9304      	str	r3, [sp, #16]
 8014212:	46a2      	mov	sl, r4
 8014214:	e7d2      	b.n	80141bc <_svfiprintf_r+0x9c>
 8014216:	9b03      	ldr	r3, [sp, #12]
 8014218:	1d19      	adds	r1, r3, #4
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	9103      	str	r1, [sp, #12]
 801421e:	2b00      	cmp	r3, #0
 8014220:	bfbb      	ittet	lt
 8014222:	425b      	neglt	r3, r3
 8014224:	f042 0202 	orrlt.w	r2, r2, #2
 8014228:	9307      	strge	r3, [sp, #28]
 801422a:	9307      	strlt	r3, [sp, #28]
 801422c:	bfb8      	it	lt
 801422e:	9204      	strlt	r2, [sp, #16]
 8014230:	7823      	ldrb	r3, [r4, #0]
 8014232:	2b2e      	cmp	r3, #46	; 0x2e
 8014234:	d10c      	bne.n	8014250 <_svfiprintf_r+0x130>
 8014236:	7863      	ldrb	r3, [r4, #1]
 8014238:	2b2a      	cmp	r3, #42	; 0x2a
 801423a:	d135      	bne.n	80142a8 <_svfiprintf_r+0x188>
 801423c:	9b03      	ldr	r3, [sp, #12]
 801423e:	1d1a      	adds	r2, r3, #4
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	9203      	str	r2, [sp, #12]
 8014244:	2b00      	cmp	r3, #0
 8014246:	bfb8      	it	lt
 8014248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801424c:	3402      	adds	r4, #2
 801424e:	9305      	str	r3, [sp, #20]
 8014250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801431c <_svfiprintf_r+0x1fc>
 8014254:	7821      	ldrb	r1, [r4, #0]
 8014256:	2203      	movs	r2, #3
 8014258:	4650      	mov	r0, sl
 801425a:	f7eb ffe1 	bl	8000220 <memchr>
 801425e:	b140      	cbz	r0, 8014272 <_svfiprintf_r+0x152>
 8014260:	2340      	movs	r3, #64	; 0x40
 8014262:	eba0 000a 	sub.w	r0, r0, sl
 8014266:	fa03 f000 	lsl.w	r0, r3, r0
 801426a:	9b04      	ldr	r3, [sp, #16]
 801426c:	4303      	orrs	r3, r0
 801426e:	3401      	adds	r4, #1
 8014270:	9304      	str	r3, [sp, #16]
 8014272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014276:	4826      	ldr	r0, [pc, #152]	; (8014310 <_svfiprintf_r+0x1f0>)
 8014278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801427c:	2206      	movs	r2, #6
 801427e:	f7eb ffcf 	bl	8000220 <memchr>
 8014282:	2800      	cmp	r0, #0
 8014284:	d038      	beq.n	80142f8 <_svfiprintf_r+0x1d8>
 8014286:	4b23      	ldr	r3, [pc, #140]	; (8014314 <_svfiprintf_r+0x1f4>)
 8014288:	bb1b      	cbnz	r3, 80142d2 <_svfiprintf_r+0x1b2>
 801428a:	9b03      	ldr	r3, [sp, #12]
 801428c:	3307      	adds	r3, #7
 801428e:	f023 0307 	bic.w	r3, r3, #7
 8014292:	3308      	adds	r3, #8
 8014294:	9303      	str	r3, [sp, #12]
 8014296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014298:	4433      	add	r3, r6
 801429a:	9309      	str	r3, [sp, #36]	; 0x24
 801429c:	e767      	b.n	801416e <_svfiprintf_r+0x4e>
 801429e:	fb0c 3202 	mla	r2, ip, r2, r3
 80142a2:	460c      	mov	r4, r1
 80142a4:	2001      	movs	r0, #1
 80142a6:	e7a5      	b.n	80141f4 <_svfiprintf_r+0xd4>
 80142a8:	2300      	movs	r3, #0
 80142aa:	3401      	adds	r4, #1
 80142ac:	9305      	str	r3, [sp, #20]
 80142ae:	4619      	mov	r1, r3
 80142b0:	f04f 0c0a 	mov.w	ip, #10
 80142b4:	4620      	mov	r0, r4
 80142b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142ba:	3a30      	subs	r2, #48	; 0x30
 80142bc:	2a09      	cmp	r2, #9
 80142be:	d903      	bls.n	80142c8 <_svfiprintf_r+0x1a8>
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d0c5      	beq.n	8014250 <_svfiprintf_r+0x130>
 80142c4:	9105      	str	r1, [sp, #20]
 80142c6:	e7c3      	b.n	8014250 <_svfiprintf_r+0x130>
 80142c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80142cc:	4604      	mov	r4, r0
 80142ce:	2301      	movs	r3, #1
 80142d0:	e7f0      	b.n	80142b4 <_svfiprintf_r+0x194>
 80142d2:	ab03      	add	r3, sp, #12
 80142d4:	9300      	str	r3, [sp, #0]
 80142d6:	462a      	mov	r2, r5
 80142d8:	4b0f      	ldr	r3, [pc, #60]	; (8014318 <_svfiprintf_r+0x1f8>)
 80142da:	a904      	add	r1, sp, #16
 80142dc:	4638      	mov	r0, r7
 80142de:	f3af 8000 	nop.w
 80142e2:	1c42      	adds	r2, r0, #1
 80142e4:	4606      	mov	r6, r0
 80142e6:	d1d6      	bne.n	8014296 <_svfiprintf_r+0x176>
 80142e8:	89ab      	ldrh	r3, [r5, #12]
 80142ea:	065b      	lsls	r3, r3, #25
 80142ec:	f53f af2c 	bmi.w	8014148 <_svfiprintf_r+0x28>
 80142f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142f2:	b01d      	add	sp, #116	; 0x74
 80142f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f8:	ab03      	add	r3, sp, #12
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	462a      	mov	r2, r5
 80142fe:	4b06      	ldr	r3, [pc, #24]	; (8014318 <_svfiprintf_r+0x1f8>)
 8014300:	a904      	add	r1, sp, #16
 8014302:	4638      	mov	r0, r7
 8014304:	f7ff f9e8 	bl	80136d8 <_printf_i>
 8014308:	e7eb      	b.n	80142e2 <_svfiprintf_r+0x1c2>
 801430a:	bf00      	nop
 801430c:	08016ba4 	.word	0x08016ba4
 8014310:	08016bae 	.word	0x08016bae
 8014314:	00000000 	.word	0x00000000
 8014318:	0801406b 	.word	0x0801406b
 801431c:	08016baa 	.word	0x08016baa

08014320 <_read_r>:
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4d07      	ldr	r5, [pc, #28]	; (8014340 <_read_r+0x20>)
 8014324:	4604      	mov	r4, r0
 8014326:	4608      	mov	r0, r1
 8014328:	4611      	mov	r1, r2
 801432a:	2200      	movs	r2, #0
 801432c:	602a      	str	r2, [r5, #0]
 801432e:	461a      	mov	r2, r3
 8014330:	f7f5 f96c 	bl	800960c <_read>
 8014334:	1c43      	adds	r3, r0, #1
 8014336:	d102      	bne.n	801433e <_read_r+0x1e>
 8014338:	682b      	ldr	r3, [r5, #0]
 801433a:	b103      	cbz	r3, 801433e <_read_r+0x1e>
 801433c:	6023      	str	r3, [r4, #0]
 801433e:	bd38      	pop	{r3, r4, r5, pc}
 8014340:	20007884 	.word	0x20007884

08014344 <_raise_r>:
 8014344:	291f      	cmp	r1, #31
 8014346:	b538      	push	{r3, r4, r5, lr}
 8014348:	4604      	mov	r4, r0
 801434a:	460d      	mov	r5, r1
 801434c:	d904      	bls.n	8014358 <_raise_r+0x14>
 801434e:	2316      	movs	r3, #22
 8014350:	6003      	str	r3, [r0, #0]
 8014352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014356:	bd38      	pop	{r3, r4, r5, pc}
 8014358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801435a:	b112      	cbz	r2, 8014362 <_raise_r+0x1e>
 801435c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014360:	b94b      	cbnz	r3, 8014376 <_raise_r+0x32>
 8014362:	4620      	mov	r0, r4
 8014364:	f000 f830 	bl	80143c8 <_getpid_r>
 8014368:	462a      	mov	r2, r5
 801436a:	4601      	mov	r1, r0
 801436c:	4620      	mov	r0, r4
 801436e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014372:	f000 b817 	b.w	80143a4 <_kill_r>
 8014376:	2b01      	cmp	r3, #1
 8014378:	d00a      	beq.n	8014390 <_raise_r+0x4c>
 801437a:	1c59      	adds	r1, r3, #1
 801437c:	d103      	bne.n	8014386 <_raise_r+0x42>
 801437e:	2316      	movs	r3, #22
 8014380:	6003      	str	r3, [r0, #0]
 8014382:	2001      	movs	r0, #1
 8014384:	e7e7      	b.n	8014356 <_raise_r+0x12>
 8014386:	2400      	movs	r4, #0
 8014388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801438c:	4628      	mov	r0, r5
 801438e:	4798      	blx	r3
 8014390:	2000      	movs	r0, #0
 8014392:	e7e0      	b.n	8014356 <_raise_r+0x12>

08014394 <raise>:
 8014394:	4b02      	ldr	r3, [pc, #8]	; (80143a0 <raise+0xc>)
 8014396:	4601      	mov	r1, r0
 8014398:	6818      	ldr	r0, [r3, #0]
 801439a:	f7ff bfd3 	b.w	8014344 <_raise_r>
 801439e:	bf00      	nop
 80143a0:	20000b20 	.word	0x20000b20

080143a4 <_kill_r>:
 80143a4:	b538      	push	{r3, r4, r5, lr}
 80143a6:	4d07      	ldr	r5, [pc, #28]	; (80143c4 <_kill_r+0x20>)
 80143a8:	2300      	movs	r3, #0
 80143aa:	4604      	mov	r4, r0
 80143ac:	4608      	mov	r0, r1
 80143ae:	4611      	mov	r1, r2
 80143b0:	602b      	str	r3, [r5, #0]
 80143b2:	f7f5 f911 	bl	80095d8 <_kill>
 80143b6:	1c43      	adds	r3, r0, #1
 80143b8:	d102      	bne.n	80143c0 <_kill_r+0x1c>
 80143ba:	682b      	ldr	r3, [r5, #0]
 80143bc:	b103      	cbz	r3, 80143c0 <_kill_r+0x1c>
 80143be:	6023      	str	r3, [r4, #0]
 80143c0:	bd38      	pop	{r3, r4, r5, pc}
 80143c2:	bf00      	nop
 80143c4:	20007884 	.word	0x20007884

080143c8 <_getpid_r>:
 80143c8:	f7f5 b8fe 	b.w	80095c8 <_getpid>

080143cc <_fstat_r>:
 80143cc:	b538      	push	{r3, r4, r5, lr}
 80143ce:	4d07      	ldr	r5, [pc, #28]	; (80143ec <_fstat_r+0x20>)
 80143d0:	2300      	movs	r3, #0
 80143d2:	4604      	mov	r4, r0
 80143d4:	4608      	mov	r0, r1
 80143d6:	4611      	mov	r1, r2
 80143d8:	602b      	str	r3, [r5, #0]
 80143da:	f7f5 f95c 	bl	8009696 <_fstat>
 80143de:	1c43      	adds	r3, r0, #1
 80143e0:	d102      	bne.n	80143e8 <_fstat_r+0x1c>
 80143e2:	682b      	ldr	r3, [r5, #0]
 80143e4:	b103      	cbz	r3, 80143e8 <_fstat_r+0x1c>
 80143e6:	6023      	str	r3, [r4, #0]
 80143e8:	bd38      	pop	{r3, r4, r5, pc}
 80143ea:	bf00      	nop
 80143ec:	20007884 	.word	0x20007884

080143f0 <_isatty_r>:
 80143f0:	b538      	push	{r3, r4, r5, lr}
 80143f2:	4d06      	ldr	r5, [pc, #24]	; (801440c <_isatty_r+0x1c>)
 80143f4:	2300      	movs	r3, #0
 80143f6:	4604      	mov	r4, r0
 80143f8:	4608      	mov	r0, r1
 80143fa:	602b      	str	r3, [r5, #0]
 80143fc:	f7f5 f95b 	bl	80096b6 <_isatty>
 8014400:	1c43      	adds	r3, r0, #1
 8014402:	d102      	bne.n	801440a <_isatty_r+0x1a>
 8014404:	682b      	ldr	r3, [r5, #0]
 8014406:	b103      	cbz	r3, 801440a <_isatty_r+0x1a>
 8014408:	6023      	str	r3, [r4, #0]
 801440a:	bd38      	pop	{r3, r4, r5, pc}
 801440c:	20007884 	.word	0x20007884

08014410 <_malloc_usable_size_r>:
 8014410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014414:	1f18      	subs	r0, r3, #4
 8014416:	2b00      	cmp	r3, #0
 8014418:	bfbc      	itt	lt
 801441a:	580b      	ldrlt	r3, [r1, r0]
 801441c:	18c0      	addlt	r0, r0, r3
 801441e:	4770      	bx	lr

08014420 <_init>:
 8014420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014422:	bf00      	nop
 8014424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014426:	bc08      	pop	{r3}
 8014428:	469e      	mov	lr, r3
 801442a:	4770      	bx	lr

0801442c <_fini>:
 801442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801442e:	bf00      	nop
 8014430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014432:	bc08      	pop	{r3}
 8014434:	469e      	mov	lr, r3
 8014436:	4770      	bx	lr
